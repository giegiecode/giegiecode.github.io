<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>登录退出功能</title>
      <link href="/2022/01/18/niu-ke-xiang-mu-deng-lu-tui-chu-gong-neng/"/>
      <url>/2022/01/18/niu-ke-xiang-mu-deng-lu-tui-chu-gong-neng/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117074744905.png" alt="image-20220117074744905"></p><p>dao -&gt; service -&gt; controller</p><p>包 entity 下新建实体类 LoginTicket 属性与表中的字段对应，并生成对应的set，get，tostring方法</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117171204796.png" alt="image-20220117171204796"></p><p>包 dao 下新建接口 LoginTicketMapper 声明 @Mapper 注解</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117171613280.png" alt="image-20220117171613280"></p><p>在方法上直接注入sql 语句 有别于.xml 方法</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117173315324.png" alt="image-20220117173315324"></p><p>整张表围绕 ticket 来设计，ticket 是凭证，发送 ticket 字符串给浏览器进行保存，其他数据服务端存一份</p><p>客户端通过 cookie 存了 ticket 数据后，再次访问服务器会把 ticket 给服务器，服务端通过 ticket 查到整条数据</p><p>写完 dao 进行测试</p><p>在MapperTests里进行测试，注入LoginTicketMapper</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117173851830.png" alt="image-20220117173851830"></p><p>开发业务层，写登录业务，接收页面传入的条件，在 UserService 里写 service 注入 LoginTicketMapper ，登录方法返回值类型为 Map ，将多条信息放进去，参数为：用户名，密码，有效时间，先做空值处理，然后对账号、状态、密码进行验证，从客户端得到的密码要结合salt 值做md5 加密处理再和数据库中的密码进行比对，最后没问题就生成登录凭证，将 ticket 放进map 中并返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Map&lt;String, Object&gt; login(String username, String password, long expiredSeconds) &#123;        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();        &#x2F;&#x2F; 空值处理        if (StringUtils.isBlank(username)) &#123;            map.put(&quot;usernameMsg&quot;, &quot;账号不能为空&quot;);            return map;        &#125;        if (StringUtils.isBlank(password)) &#123;            map.put(&quot;password&quot;, &quot;密码不能为空&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证账号        User user &#x3D; userMapper.selectByName(username);        if (user &#x3D;&#x3D; null) &#123;            map.put(&quot;usernameMsg&quot;, &quot;该账号不存在&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证状态        if (user.getStatus() &#x3D;&#x3D; 0) &#123;            map.put(&quot;usernameMsg&quot;, &quot;该账号未激活&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证密码,从客户端获取到的密码为明文，要进行md5加密，在与数据库中的密码进行比较        password &#x3D; CommunityUtil.md5(password + user.getSalt());        if (!user.getPassword().equals(password)) &#123;            map.put(&quot;passwordMsg&quot;, &quot;密码不正确&quot;);            return map;        &#125;        &#x2F;&#x2F; 生成登录凭证        LoginTicket loginTicket &#x3D; new LoginTicket();        loginTicket.setUserId(user.getId());        loginTicket.setTicket(CommunityUtil.generateUUID());        loginTicket.setStatus(0);        loginTicket.setExpired(new Date(System.currentTimeMillis() + expiredSeconds * 1000));        map.put(&quot;ticket&quot;,loginTicket.getTicket());        return map;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 LoginController 里写 controller 路径“/login” 请求方式 post ,login方法的参数为 用户名，密码，验证码，是否记住，model，session，response。先判断验证码是否正确，然后检查账号和密码，调用service 里的 login 方法，传入参数，如果map 里包含了 ticket 就是成功，否则失败，成功重定向到首页，失败回到登录页面 。成功后发送 cookie 到浏览器进行保存，设置cookie 的有效路径，用户登录以后有效路径包含整个项目，路径不要写死，@Value 注入配置里的项目路径 text-path，设置cookie 的有效时间，通过response.add(cookie) 将cookie 发送给页面；失败后，将错误信息加入到 model 中带给登录页面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(path &#x3D; &quot;&#x2F;login&quot;, method &#x3D; RequestMethod.POST)public String login(String username, String password, String code, boolean rememberme,                    Model model, HttpSession session, HttpServletResponse response) &#123;    &#x2F;&#x2F; 先检查验证码    String kaptcha &#x3D; (String) session.getAttribute(&quot;kaptcha&quot;);    if (StringUtils.isBlank(kaptcha) || StringUtils.isBlank(code) || !kaptcha.equalsIgnoreCase(code)) &#123;        model.addAttribute(&quot;codeMsg&quot;, &quot;验证码不正确！&quot;);        &#x2F;&#x2F; 错误信息放到model中带入到登录页面        return &quot;&#x2F;site&#x2F;login&quot;; &#x2F;&#x2F; 重回登录页面    &#125;    &#x2F;&#x2F; 检查账号，密码    int expiredSceonds &#x3D; rememberme ? REMEMBER_EXPIRED_SECONDS : DEFAULT_EXPIRED_SECONDS;    Map&lt;String,Object&gt; map &#x3D; userService.login(username,password,expiredSceonds);    if (map.containsKey(&quot;ticket&quot;))&#123;        Cookie cookie &#x3D; new Cookie(&quot;ticket&quot;,map.get(&quot;ticket&quot;).toString());        &#x2F;&#x2F;new一个cookie,cookie中要存取字符串        cookie.setPath(contextPath); &#x2F;&#x2F; 设置cookie的路径：整个项目        cookie.setMaxAge(expiredSceonds); &#x2F;&#x2F; 设置cookie的有效时间        response.addCookie(cookie); &#x2F;&#x2F; 给浏览器的响应带上cookie        return &quot;redirect:&#x2F;index&quot;; &#x2F;&#x2F; 重定向到首页    &#125;else &#123;        model.addAttribute(&quot;usernameMsg&quot;,map.get(&quot;usernameMsg&quot;));        model.addAttribute(&quot;passwordMsg&quot;,map.get(&quot;passwordMsg&quot;));        return &quot;&#x2F;site&#x2F;login&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对登录页面进行设置，表单提交的方式，提交的路径，每个表单项增加一个 name ，name与controller 里的参数名要一致，对错误信息作一个展现，从请求的 Request 当中获取参数</p><p>提交的方式，路径</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117233626480.png" alt="image-20220117233626480"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117233852084.png" alt="image-20220117233852084"></p><p>①：判断usernameMsg 是否为空，若不为空，则输出 ${usernameMsg} 里的值<br>②：从请求 Request 中获取提交的 username，显示在登录页面的用户名输入框中<br>③：增加一个对应的 name 值与 controller 里的参数名相同<br>④：根据情况动态显示登录出现的错误</p><p>退出登录</p><p>service 层</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118004914552.png" alt="image-20220118004914552"></p><p>controller 层，重定向返回的默认是 get 方式的 login 登录页面</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118004951388.png" alt="image-20220118004951388"></p><p>在index 页面作设置</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118005137804.png" alt="image-20220118005137804"></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 登录功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成验证码</title>
      <link href="/2022/01/16/niu-ke-xiang-mu-sheng-cheng-yan-zheng-ma/"/>
      <url>/2022/01/16/niu-ke-xiang-mu-sheng-cheng-yan-zheng-ma/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116083330183.png" alt="image-20220116083330183"></p><p>导入 jar 包</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116084123482.png" alt="image-20220116084123482"></p><p>编写配置类（config 包下新建类 KaptchaConfig）</p><p>要实现 Producer 接口，</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116084606993.png" alt="image-20220116084606993"></p><p>DefaultKaptcha 是这个接口的实现类</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116084720082.png" alt="image-20220116084720082"></p><p>KaptchaConfig 配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.config;import com.google.code.kaptcha.Producer;import com.google.code.kaptcha.impl.DefaultKaptcha;import com.google.code.kaptcha.util.Config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.util.Properties;&#x2F;** * @author giegie * @create 2022-01-16-8:40 *&#x2F;@Configurationpublic class KaptchaConfig &#123;    @Bean &#x2F;&#x2F; 声明一个Bean,这个Bean将会被Spring容器所装配    public Producer kaptchaProducer() &#123;        Properties properties &#x3D; new Properties();        properties.setProperty(&quot;kaptcha.image.width&quot;, &quot;100&quot;);&#x2F;&#x2F; 宽        properties.setProperty(&quot;kaptcha.image.height&quot;, &quot;40&quot;);&#x2F;&#x2F; 高        properties.setProperty(&quot;kaptcha.textproducer.font.size&quot;, &quot;30&quot;);&#x2F;&#x2F; 字体大小        properties.setProperty(&quot;kaptcha.textproducer.font.color&quot;, &quot;0.0.0&quot;);&#x2F;&#x2F; 字体颜色        properties.setProperty(&quot;kaptcha.textproducer.char.string&quot;, &quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;);&#x2F;&#x2F; 字符范围        properties.setProperty(&quot;kaptcha.textproducer.char.length&quot;, &quot;4&quot;);&#x2F;&#x2F; 字符长度        properties.setProperty(&quot;kaptcha.noise.impl&quot;, &quot;com.google.code.kaptcha.impl.NoNoise&quot;);&#x2F;&#x2F; 验证码干扰因素        DefaultKaptcha kaptcha &#x3D; new DefaultKaptcha();        Config config &#x3D; new Config(properties);        &#x2F;&#x2F; 给kaptcha传入一些参数，参数封装进Config对象，Config对象传入Properties对象        &#x2F;&#x2F; Properties对象里存的都是key-value及Map,Map里存的就是参数        kaptcha.setConfig(config);        return kaptcha;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务启动 bean 被自动装配进容器里，通过容器得到一个Producer实例，实例有两个方法创建图片创建验证码</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116145842259.png" alt="image-20220116145842259"></p><p>getLoginPage方法的目的是给浏览器返回一个html，html里会包含一个图片的路径，浏览器会依据路径再次访问服务器，获得这个图片，因此要单独写一个请求，向浏览器返回验证码图片</p><p>在 LoginController.java 增加一个请求提供获取验证码的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(path &#x3D; &quot;&#x2F;kaptcha&quot;,method &#x3D; RequestMethod.GET)public void getKaptcha(HttpServletResponse response, HttpSession session)&#123;    &#x2F;&#x2F; 生成验证码    String text &#x3D; kaptchaProducer.createText(); &#x2F;&#x2F; 生成4位随机字符串    BufferedImage image &#x3D; kaptchaProducer.createImage(text); &#x2F;&#x2F; 利用字符串生成一个与之对应的图片    &#x2F;&#x2F; 将验证码存入session中    session.setAttribute(&quot;kaptcha&quot;,text);    &#x2F;&#x2F; 将图片输出给浏览器    response.setContentType(&quot;image&#x2F;png&quot;); &#x2F;&#x2F; 声明给浏览器返回的什么类型的数据    try &#123;        OutputStream os &#x3D; response.getOutputStream(); &#x2F;&#x2F; 从response中获取输出流        ImageIO.write(image,&quot;png&quot;,os);        &#x2F;&#x2F; 向浏览器输出图片的工具ImageIo，image:输出的图片，png:输出格式，os:输出流        &#x2F;&#x2F; 流不用关闭，整个response是由SpringMVC来维护的，会自动关闭    &#125; catch (IOException e) &#123;        logger.error(&quot;响应验证码失败&quot;+e.getMessage());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把验证码应用到 login.html 页面，并通过 js 来实现点击刷新验证码按钮来刷新验证码的功能（JS 部分知识）</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116143954545.png" alt="image-20220116143954545"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116145045619.png" alt="image-20220116145045619"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116145243941.png" alt="image-20220116145243941"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116145210414.png" alt="image-20220116145210414"></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话管理</title>
      <link href="/2022/01/15/niu-ke-xiang-mu-hui-hua-guan-li/"/>
      <url>/2022/01/15/niu-ke-xiang-mu-hui-hua-guan-li/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115113933803.png" alt="image-20220115113933803"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115083941854.png" alt="image-20220115083941854"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115084250343.png" alt="image-20220115084250343"></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115085041513.png" alt="image-20220115085041513"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115113707338.png" alt="image-20220115113707338"></p><h2 id="session-优点：数据存在服务端安全；缺点：有些内存上的压力"><a href="#session-优点：数据存在服务端安全；缺点：有些内存上的压力" class="headerlink" title="session 优点：数据存在服务端安全；缺点：有些内存上的压力"></a>session 优点：数据存在服务端安全；缺点：有些内存上的压力</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115115244393.png" alt="image-20220115115244393"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115152906928.png" alt="image-20220115152906928"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115155153663.png" alt="image-20220115155153663"></p><p>用户变多，服务器分布式部署</p><p>nginx：用于负载均衡</p><p>问题：第一次访问服务器①，生成session，第二次访问服务器③，就要重新生成session</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ol><li>设置负载均衡的策略：粘性session，根据 ip 固定访问某台服务器。问题：不能保证负载均衡</li><li>同步session，当一台服务器有了session 后，同步给其他的服务器，所有服务器的 session 都是统一的。问题：对服务器性能产生影响，服务器之间产生关联及耦合，对部署不友好</li><li>共享session ，多出一台服务器存储处理 session ，其他服务器向这台服务器获取 session 。问题：如果over ，其他服务器无法工作</li></ol><h2 id="主流方案："><a href="#主流方案：" class="headerlink" title="主流方案："></a>主流方案：</h2><p>会话数据存入数据库中，数据库作集群，传统关系型数据库是将数据存入硬盘里，没有存内存中性能好，因此用 nosql 数据库，使用Redis</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> cookie </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发注册功能</title>
      <link href="/2022/01/15/niu-ke-xiang-mu-kai-fa-zhu-ce-gong-neng/"/>
      <url>/2022/01/15/niu-ke-xiang-mu-kai-fa-zhu-ce-gong-neng/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114130504396.png" alt="image-20220114130504396"></p><h2 id="访问注册页面：点击顶部区域内的链接，打开注册页面"><a href="#访问注册页面：点击顶部区域内的链接，打开注册页面" class="headerlink" title="访问注册页面：点击顶部区域内的链接，打开注册页面"></a>访问注册页面：点击顶部区域内的链接，打开注册页面</h2><h3 id="在controller包下新建LoginController"><a href="#在controller包下新建LoginController" class="headerlink" title="在controller包下新建LoginController"></a>在controller包下新建LoginController</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;&#x2F;** * @author giegie * @create 2022-01-14-13:41 *&#x2F;@Controllerpublic class LoginController &#123;    @RequestMapping(path &#x3D; &quot;&#x2F;register&quot;,method &#x3D; RequestMethod.GET) &#x2F;&#x2F; 设置访问路径和请求方式    public String getRegisterPage()&#123;        return &quot;&#x2F;site&#x2F;register&quot;; &#x2F;&#x2F; register是模板    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接着对register-html-模板进行设置，加入-thymeleaf-标签"><a href="#接着对register-html-模板进行设置，加入-thymeleaf-标签" class="headerlink" title="接着对register.html 模板进行设置，加入 thymeleaf 标签"></a>接着对register.html 模板进行设置，加入 thymeleaf 标签</h3><p>首先加入 thymeleaf 声明</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114135044987.png" alt="image-20220114135044987"></p><p>对头尾处的相对路径进行处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114135237723.png" alt="image-20220114135237723"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114135457763.png" alt="image-20220114135457763"></p><p>访问注册页面是通过首页 index页面的注册按钮点击跳转的，因此修改 index 页面的注册链接<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114140330315.png" alt="image-20220114140330315"></p><p>让首页顶部的代码在多个页面复用 </p><p>在header标签上增加一个属性及给这段代码起个名字，方便复用<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114140508490.png" alt="image-20220114140508490"></p><p>在另一个页面复用 index 页面的header<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114140902669.png" alt="image-20220114140902669"></p><h2 id="提交注册数据"><a href="#提交注册数据" class="headerlink" title="提交注册数据"></a>提交注册数据</h2><p>导包：用来判断字符串集合空值的情况（经常用到）<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114141840236.png" alt="image-20220114141840236"></p><p>配置文件里增加域名<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114142232050.png" alt="image-20220114142232050"></p><p>在 util 包下新建工具类 CommunityUtil<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114143842659.png" alt="image-20220114143842659"></p><h3 id="开始写Service-层业务"><a href="#开始写Service-层业务" class="headerlink" title="开始写Service 层业务"></a>开始写Service 层业务</h3><p>注入邮件的客户端（在注册的时候会发邮件），注入模板引擎<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114144222402.png" alt="image-20220114144222402"></p><p>发邮件时生成激活码，包含域名和项目名，因此要注入配置中的域名和项目名<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114145010787.png" alt="image-20220114145010787"></p><p>向controller返回map，包含处理的多个结果，若注册成功返回null，并发激活邮件给用户</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.service;import com.nowcoder.community.dao.UserMapper;import com.nowcoder.community.entity.User;import com.nowcoder.community.util.CommunityUtil;import com.nowcoder.community.util.MailClient;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.thymeleaf.TemplateEngine;import org.thymeleaf.context.Context;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.Random;&#x2F;** * @author giegie * @create 2022-01-12-9:52 *&#x2F;@Servicepublic class UserService &#123;    @Autowired    private UserMapper userMapper;    @Autowired    private MailClient mailClient;    @Autowired    private TemplateEngine templateEngine;    @Value(&quot;$&#123;community.path.domain&#125;&quot;) &#x2F;&#x2F; 通过表达式的方式取 key的值    private String domain;    @Value(&quot;$&#123;server.servlet.context-path&#125;&quot;)    private String contextPath;    public User findUserById(int id) &#123;        return userMapper.selectById(id);    &#125;    public Map&lt;String, Object&gt; register(User user) &#123; &#x2F;&#x2F; 将返回的多个结果封装到 Map中        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();        &#x2F;&#x2F; 空值处理        if (user &#x3D;&#x3D; null) &#123;            throw new IllegalArgumentException(&quot;参数不能为空&quot;);        &#125;        if (StringUtils.isBlank(user.getUsername())) &#123;            map.put(&quot;usernameMsg&quot;, &quot;账号不能为空&quot;);            return map;        &#125;        if (StringUtils.isBlank(user.getPassword())) &#123;            map.put(&quot;passwordMsg&quot;, &quot;密码不能为空&quot;);            return map;        &#125;        if (StringUtils.isBlank(user.getEmail())) &#123;            map.put(&quot;emailMsg&quot;, &quot;邮箱不能为空&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证账号        User u &#x3D; userMapper.selectByName(user.getUsername());        if (u !&#x3D; null)&#123;            map.put(&quot;usernameMsg&quot;,&quot;账号已存在&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证邮箱        u &#x3D; userMapper.selectByEmail(user.getEmail());        if (u !&#x3D; null)&#123;            map.put(&quot;emailMsg&quot;,&quot;该邮箱已被注册&quot;);            return map;        &#125;        &#x2F;&#x2F; 注册用户，将用户信息存到库里        user.setSalt(CommunityUtil.generateUUID().substring(0,5));        user.setPassword(CommunityUtil.md5(user.getPassword() + user.getSalt()));        user.setType(0);        user.setStatus(0);        user.setActivationCode(CommunityUtil.generateUUID());        user.setHeaderUrl(String.format(&quot;https:&#x2F;&#x2F;images.nowcoder.com&#x2F;head&#x2F;&amp;dt.png&quot;,new Random().nextInt(1000)));        user.setCreateTime(new Date());        userMapper.insertUser(user);        &#x2F;&#x2F; 激活邮件        Context context &#x3D; new Context();        context.setVariable(&quot;eamil&quot;,user.getEmail());        &#x2F;&#x2F; http:&#x2F;&#x2F;localhost:8080&#x2F;community&#x2F;activation&#x2F;101&#x2F;code        String url &#x3D; domain + contextPath + &quot;&#x2F;activation&#x2F;&quot;+user.getId() + &quot;&#x2F;&quot; + user.getActivationCode();        context.setVariable(&quot;url&quot;,url);        String content &#x3D; templateEngine.process(&quot;&#x2F;mail&#x2F;activation&quot;,context);        mailClient.sendMail(user.getEmail(),&quot;激活账号&quot;,content);                return map;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>邮件发送内容的 html 模板 activation.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://static.nowcoder.com/images/logo_87_87.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>牛客网-激活账号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;email&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxx@xxx.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>您好!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>您正在注册牛客网, 这是一封激活邮件, 请点击 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>此链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>,激活您的牛客账号!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller;import com.nowcoder.community.entity.User;import com.nowcoder.community.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import java.util.Map;&#x2F;** * @author giegie * @create 2022-01-14-13:41 *&#x2F;@Controllerpublic class LoginController &#123;    @Autowired    private UserService userService;    @RequestMapping(path &#x3D; &quot;&#x2F;register&quot;, method &#x3D; RequestMethod.GET)    public String getRegisterPage() &#123;        return &quot;&#x2F;site&#x2F;register&quot;;    &#125;    @RequestMapping(path &#x3D; &quot;register&quot;, method &#x3D; RequestMethod.POST)    public String register(Model model, User user) &#123;        Map&lt;String, Object&gt; map &#x3D; userService.register(user);        if (map &#x3D;&#x3D; null || map.isEmpty()) &#123;            model.addAttribute(&quot;msg&quot;,&quot;注册成功，我们已经向您的邮箱发送了一封激活邮件，请尽快激活&quot;);            model.addAttribute(&quot;target&quot;,&quot;&#x2F;index&quot;);            return &quot;&#x2F;site&#x2F;operate-result&quot;;        &#125;else&#123;            model.addAttribute(&quot;usernameMsg&quot;,map.get(&quot;usernameMsg&quot;));            model.addAttribute(&quot;passwordMsg&quot;,map.get(&quot;passwordMsg&quot;));            model.addAttribute(&quot;emailMsg&quot;,map.get(&quot;emailMsg&quot;));            return &quot;&#x2F;site&#x2F;register&quot;;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若注册成功跳转至 operate-result 页面，并在8秒后自动返回首页</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114233058282.png" alt="image-20220114233058282"></p><p>对 register.html页面作修改</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114233324477.png" alt="image-20220114233324477"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114233348793.png" alt="image-20220114233348793"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114233509371.png" alt="image-20220114233509371"></p><ol><li>判断账号是否存在，若已存在，提示：该账号已存在！，若不存在则不提示</li><li>若注册失败，输入框中仍显示输入的注册信息：用户名，密码，邮箱</li><li>注册失败，提示失败原因：用户已存在，邮箱已存在…</li></ol><h2 id="激活注册账号"><a href="#激活注册账号" class="headerlink" title="激活注册账号"></a>激活注册账号</h2><p>点击邮件中的链接，访问服务端的激活服务</p><p>在处理激活账号有三种情况：</p><ul><li>激活成功没有问题</li><li>链接点了多次，重复激活，要给个提示</li><li>激活码错误，失败</li></ul><h3 id="三种状态放到一个常量接口中"><a href="#三种状态放到一个常量接口中" class="headerlink" title="三种状态放到一个常量接口中"></a>三种状态放到一个常量接口中</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.util;&#x2F;** * @author giegie * @create 2022-01-14-23:49 *&#x2F;public interface CommunityConstant &#123;    &#x2F;**     * 激活成功     *&#x2F;    int ACTIVATION_SUCCESS &#x3D; 0;    &#x2F;**     * 重复激活     *&#x2F;    int ACTIVATION_PETEAT &#x3D; 1;    &#x2F;**     * 激活失败     *&#x2F;    int ACTIVATION_FAILURE &#x3D; 2;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="service-实现接口"><a href="#service-实现接口" class="headerlink" title="service 实现接口"></a>service 实现接口</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115002611171.png" alt="image-20220115002611171"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115002626723.png" alt="image-20220115002626723"></p><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115002837821.png" alt="image-20220115002837821"></p><p>引入路径<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115002936651.png" alt="image-20220115002936651"></p><h3 id="对登录页面作模板修改"><a href="#对登录页面作模板修改" class="headerlink" title="对登录页面作模板修改"></a>对登录页面作模板修改</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115003059394.png" alt="image-20220115003059394"></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/2022/01/14/git-shi-yong/"/>
      <url>/2022/01/14/git-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220113082458327.png" alt="image-20220113082458327"></p><p>进入目录</p><p>git init</p><p>git add 增加</p><p>git commit -m “注释语句” 提交</p><p>git status 看状态</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识spring</title>
      <link href="/2022/01/14/chu-shi-spring/"/>
      <url>/2022/01/14/chu-shi-spring/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220113195429108.png" alt="image-20220113195429108"></p><p>spring 管理的对象称为 bean</p><p> 若不用 IoC 自己管理对象，new对象A,对象B，A.set 使A和B产生联系，A调用B，缺点：A和B产生了耦合，项目规模变大，不易维护</p><p>Spring Container是IoC容器要装两份数据：① 需要向其提供bean的类型 ② 配置文件，配置描述bean之间的关系<br>会自动实例化Bean 然后被调用，bean 之间不会产生直接关系，它们之间的关系体现在配置文件的配置中，降低了耦合度</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220113195809413.png" alt="image-20220113195809413"></p><p>spring 应用运行启动，底层自动启动了tomcat，并创建了spring容器，容器会自动扫描某些包下的某些类，将这些Bean自动装配到容器中</p><p>CommunityApplication 这个类就是配置文件，注解@SpringBootApplication 标识的类就是配置文件</p><p><strong>进到@SpringBootApplication 底层</strong></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114080336197.png" alt="image-20220114080336197"></p><p>@SpringBootConfiguration 表示这个类是个配置文件</p><p>@EnableAutoConfiguration 表示启用自动配置</p><p>@ComponentScan 表示主键扫描，会自动扫描某些包下的某些bean，装配到容器里，扫描配置类所在的包以及子包下的bean，并且<br>这些bean上需要有像@Controller这样的注解，才能被扫描<br>和@Controller等价的注解有@Service@Repository@Component，都是由@Component 来实现的</p><p>如果开发业务组件用@Service标明，如果开发处理请求的组件用@Controller标识，如果开发数据库访问的组件用@Repository<br>如果开发的类在任何地方都能用，用@Component 通用</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114082620382.png" alt="image-20220114082620382"></p><p>①：加注解 @ContextConfiguration 使测试类启用 CommunityApplication 作为配置类</p><p>②：哪个类要得到容器，就实现 ApplicationContextAware 这个接口</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114083153895.png" alt="image-20220114083153895"></p><p>BeanFactory是容器的顶层接口</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114085343478.png" alt="image-20220114085343478"></p><p>@Autowired 注入<br>spring 容器将AlphaDao 注入到 alphaDao 属性中，直接使用这个属性就可以</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目（发送邮件）</title>
      <link href="/2022/01/14/niu-ke-xiang-mu-1/"/>
      <url>/2022/01/14/niu-ke-xiang-mu-1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114102208602.png" alt="image-20220114102208602"></p><h2 id="开启SMTP服务"><a href="#开启SMTP服务" class="headerlink" title="开启SMTP服务"></a>开启SMTP服务</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114122601574.png" alt="image-20220114122601574"></p><h2 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114122812314.png" alt="image-20220114122812314"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114123950892.png" alt="image-20220114123950892"></p><h2 id="邮箱参数配置"><a href="#邮箱参数配置" class="headerlink" title="邮箱参数配置"></a>邮箱参数配置</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114122954538.png" alt="image-20220114122954538"></p><p>password 处填写授权码</p><h2 id="使用-JavaMailSender-发送邮件"><a href="#使用-JavaMailSender-发送邮件" class="headerlink" title="使用 JavaMailSender 发送邮件"></a>使用 JavaMailSender 发送邮件</h2><p>community 包下 新建包util ，建类MailClient</p><p>JavaMailSender 是 Spring Email 的核心组件，负责发送邮件<br>MimeMessage 用于封装邮件的相关信息<br>MimeMessageHelper 用于辅助构建 MimeMessage 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.util;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMessageHelper;import org.springframework.stereotype.Component;import javax.mail.MessagingException;import javax.mail.internet.MimeMessage;&#x2F;** * @author giegie * @create 2022-01-14-10:23 *&#x2F;@Componentpublic class MailClient &#123;    private static final Logger logger &#x3D; LoggerFactory.getLogger(MailClient.class);    @Autowired    private JavaMailSender mailSender;    @Value(&quot;$&#123;spring.mail.username&#125;&quot;)    private String from;    public void sendMail(String to,String subject,String content)&#123;        try &#123;            MimeMessage message &#x3D; mailSender.createMimeMessage();            MimeMessageHelper helper &#x3D; new MimeMessageHelper(message);            helper.setFrom(from);            helper.setTo(to);            helper.setSubject(subject);            helper.setText(content,true);            mailSender.send(helper.getMimeMessage());        &#125; catch (MessagingException e) &#123;            logger.error(&quot;发送邮件失败&quot;+e.getMessage());        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建测试类 MailTests，使用 Thymeleaf 模板发送 HTML 邮件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community;import com.nowcoder.community.util.MailClient;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.ContextConfiguration;import org.thymeleaf.TemplateEngine;import org.thymeleaf.context.Context;&#x2F;** * @author giegie * @create 2022-01-14-10:41 *&#x2F;@SpringBootTest@ContextConfiguration(classes &#x3D; CommunityApplication.class)public class MailTests &#123;    @Autowired    private MailClient mailClient;    @Autowired    private TemplateEngine templateEngine;    @Test    public void testTextMail()&#123;        mailClient.sendMail(&quot;2075314587@qq.com&quot;,&quot;TEST&quot;,&quot;HELLO.&quot;);    &#125;    @Test    public void testHtmlMail()&#123;        Context context &#x3D; new Context();        context.setVariable(&quot;username&quot;,&quot;sunday&quot;);        String content &#x3D; templateEngine.process(&quot;&#x2F;mail&#x2F;demo&quot;, context);        System.out.println(content);        mailClient.sendMail(&quot;2075314587@qq.com&quot;,&quot;HTML&quot;,content);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114125012558.png" alt="image-20220114125012558"></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目调试技巧</title>
      <link href="/2022/01/12/xiang-mu-diao-shi-ji-qiao/"/>
      <url>/2022/01/12/xiang-mu-diao-shi-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112214338461.png" alt="image-20220112214338461"></p><h2 id="状态码："><a href="#状态码：" class="headerlink" title="状态码："></a>状态码：</h2><p>200：成功了</p><p>302：重定向</p><p>404：路径写错了</p><p>500：服务器在处理的过程中发生了问题</p><h2 id="打断点"><a href="#打断点" class="headerlink" title="打断点"></a>打断点</h2><p>F8：程序逐行向下执行</p><p>F7：进入当前行所调方法的内部</p><p>F9：程序向下执行直到执行到下一个断点为止</p><p>客户端断点调试</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112220911302.png" alt="image-20220112220911302"></p><p>F10：向下执行一行</p><p>F11：进入代码</p><p>F8：执行到底</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初学mybatis</title>
      <link href="/2022/01/12/mybatis/"/>
      <url>/2022/01/12/mybatis/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220111123249192.png" alt="image-20220111123249192"></p><h2 id="Mapper接口：UserMapper-java"><a href="#Mapper接口：UserMapper-java" class="headerlink" title="Mapper接口：UserMapper.java"></a>Mapper接口：UserMapper.java</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220111213801345.png" alt="image-20220111213801345"></p><h2 id="mapper映射器：user-mapper-xml"><a href="#mapper映射器：user-mapper-xml" class="headerlink" title="mapper映射器：user-mapper.xml"></a>mapper映射器：user-mapper.xml</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.nowcoder.community.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!--写UserMapper的权限定名，这个配置文件是为UserMapper服务的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        username,password,salt,email,type,status,activation_code,header_url,create_time <span class="token comment">&lt;!--定义查询的字段--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id,username,password,salt,email,type,status,activation_code,header_url,create_time    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--id:写对应的方法的名  resultType:返回类型--></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--引用的sql是selectFields--></span>        from user        where id = #&#123;id&#125; <span class="token comment">&lt;!--#&#123;id&#125; 引用方法的参数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from user        where username = #&#123;username&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByEmail<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from user        where email = #&#123;email&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--parameterType写插入的类型--></span>        insert into user (<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>)        values (#&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;,#&#123;email&#125;,#&#123;type&#125;,#&#123;status&#125;,#&#123;activationCode&#125;,#&#123;headerUrl&#125;,#&#123;createTime&#125;) <span class="token comment">&lt;!--对应的参数从User中来--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateStatus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user set status = #&#123;status&#125; where id = #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateHeader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user set header_Url = #&#123;headerUrl&#125; where id = #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updatePassword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user set password = #&#123;password&#125; where id = #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目</title>
      <link href="/2022/01/12/niu-ke-xiang-mu/"/>
      <url>/2022/01/12/niu-ke-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112082629721.png" alt="image-20220112082629721"></p><h1 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h1><h2 id="实体类（DiscussPost-java）"><a href="#实体类（DiscussPost-java）" class="headerlink" title="实体类（DiscussPost.java）"></a>实体类（DiscussPost.java）</h2><h2 id="entity包"><a href="#entity包" class="headerlink" title="entity包"></a>entity包</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112082907145.png" alt="image-20220112082907145"></p><h2 id="DAO接口（DiscussPostMapper-java）写方法"><a href="#DAO接口（DiscussPostMapper-java）写方法" class="headerlink" title="DAO接口（DiscussPostMapper.java）写方法"></a>DAO接口（DiscussPostMapper.java）写方法</h2><h2 id="dao包"><a href="#dao包" class="headerlink" title="dao包"></a>dao包</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.dao;import com.nowcoder.community.entity.DiscussPost;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Param;import java.util.List;&#x2F;** * @author giegie * @create 2022-01-11-22:24 *&#x2F;@Mapperpublic interface DiscussPostMapper &#123;    List&lt;DiscussPost&gt; selectDiscussPosts(int userId,int offset,int limit);    &#x2F;&#x2F; userId 首页查找时用不上，在个人主页中查找时使用    &#x2F;&#x2F;动态sql有时拼userId,有时不拼userId。考虑未来分页的可能    int selectDiscussPostRows(@Param(&quot;userId&quot;) int userId);&#x2F;&#x2F; 为了将来显示页码，查寻一共多少条数据    &#x2F;&#x2F; @Param(&quot;&quot;)注解用于给后面的参数取一个别名    &#x2F;&#x2F; 如果需要动态的拼一个条件，并且这个方法有且只有一个条件，这时这个参数之前就必须取别名    &#x2F;&#x2F; 如果只有一个参数，并且在&lt;if&gt;里使用，则必须加别名。&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mapper映射器（discusspost-mapper-xml）写对应方法的-sql-语句"><a href="#Mapper映射器（discusspost-mapper-xml）写对应方法的-sql-语句" class="headerlink" title="Mapper映射器（discusspost-mapper.xml）写对应方法的 sql 语句"></a>Mapper映射器（discusspost-mapper.xml）写对应方法的 sql 语句</h2><h2 id="resources资源包下的mapper包"><a href="#resources资源包下的mapper包" class="headerlink" title="resources资源包下的mapper包"></a>resources资源包下的mapper包</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.nowcoder.community.dao.DiscussPostMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id,user_id,title,content,type,status,create_time,comment_count,score    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectDiscussPosts<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DiscussPost<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from discuss_post        where status != 2 <span class="token comment">&lt;!--拉黑的不看--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId!=0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and user_id = #&#123;userId&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        order by type desc,create_time desc        limit #&#123;offset&#125;,#&#123;limit&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectDiscussPostRows<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select count(id)        from discuss_post        where status != 2        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId!=0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and user_id = #&#123;userId&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h1><h2 id="service包下DiscussPostService-java"><a href="#service包下DiscussPostService-java" class="headerlink" title="service包下DiscussPostService.java"></a>service包下DiscussPostService.java</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.service;import com.nowcoder.community.dao.DiscussPostMapper;import com.nowcoder.community.entity.DiscussPost;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;&#x2F;** * @author giegie * @create 2022-01-12-9:13 *&#x2F;@Servicepublic class DiscussPostService &#123;    @Autowired    private DiscussPostMapper discussPostMapper;    public List&lt;DiscussPost&gt; findDiscussPosts(int userId,int offset,int limit)&#123;        return discussPostMapper.selectDiscussPosts(userId,offset,limit);    &#125;    public int findDiscussPostRows(int userId)&#123;        return discussPostMapper.selectDiscussPostRows(userId);    &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="service包下UserService-java"><a href="#service包下UserService-java" class="headerlink" title="service包下UserService.java"></a>service包下UserService.java</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.service;import com.nowcoder.community.dao.UserMapper;import com.nowcoder.community.entity.User;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;&#x2F;** * @author giegie * @create 2022-01-12-9:52 *&#x2F;@Servicepublic class UserService &#123;    @Autowired    private UserMapper userMapper;    public User findUserById(int id)&#123;        return userMapper.selectById(id);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h1><h2 id="不支持分页"><a href="#不支持分页" class="headerlink" title="不支持分页"></a>不支持分页</h2><h3 id="controller包下HomeController"><a href="#controller包下HomeController" class="headerlink" title="controller包下HomeController"></a>controller包下HomeController</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller;import com.nowcoder.community.entity.DiscussPost;import com.nowcoder.community.entity.User;import com.nowcoder.community.service.DiscussPostService;import com.nowcoder.community.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;&#x2F;** * @author giegie * @create 2022-01-12-10:06 *&#x2F;@Controllerpublic class HomeController &#123;    @Autowired    private DiscussPostService discussPostService;    @Autowired    private UserService userService;    &#x2F;&#x2F;处理请求的方法，设置访问路径主页index，请求方式get    @RequestMapping(path&#x3D;&quot;&#x2F;index&quot;,method &#x3D; RequestMethod.GET)    public String getIndexPage(Model model)&#123;        &#x2F;&#x2F; 对象中的userId只是id,不是用户名        List&lt;DiscussPost&gt; list &#x3D; discussPostService.findDiscussPosts(0, 0, 10);        &#x2F;&#x2F; 根据userId查到user，再将数据组装一下，放到新的集合，返回给页面        &#x2F;&#x2F; 新的集合对象能够封装post和user对象        List&lt;Map&lt;String,Object&gt;&gt; discussPosts &#x3D; new ArrayList&lt;&gt;();        if (list!&#x3D;null)&#123;            for (DiscussPost post : list)&#123; &#x2F;&#x2F; 遍历，将两份数据都装到discussPosts中                Map&lt;String ,Object&gt; map &#x3D; new HashMap&lt;&gt;(); &#x2F;&#x2F; 实例化map对象                map.put(&quot;post&quot;,post); &#x2F;&#x2F; 装帖子                User user &#x3D; userService.findUserById(post.getUserId()); &#x2F;&#x2F; 从帖子中找用户id，再根据id查找用户                map.put(&quot;user&quot;,user); &#x2F;&#x2F; 装用户                discussPosts.add(map); &#x2F;&#x2F; 把map装到新的集合里            &#125;        &#125;        &#x2F;&#x2F; 将样本页面展现的结果装到model里        model.addAttribute(&quot;discussPosts&quot;,discussPosts);        return &quot;&#x2F;index&quot;; &#x2F;&#x2F; 返回的路径：templates下的index    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--指定使用的模板引擎--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, shrink-to-fit=no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://static.nowcoder.com/images/logo_87_87.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/css/global.css&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token comment">&lt;!--href里引用的文件通过thymeleaf模板帮助找的，固定到static下面找资源--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>牛客网-首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 帖子列表 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-unstyled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media pb-3 pt-3 mb-3 border-bottom<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map:$&#123;discussPosts&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--通过thymeleaf模板引擎循环输出li 每次循环得到一个map --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>site/profile.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.user.headerUrl&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-4 rounded-circle<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户头像<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-0 mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.post.title&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>备战春招，面试刷题跟他复习，一个月全搞定！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-secondary bg-primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.post.type==1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>置顶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-secondary bg-danger<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.post.status==1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>精华<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-muted font-size-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-3<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>寒江雪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span> 发布于 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#dates.format(map.post.createTime,<span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2019-04-15 15:32:18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>                                 <span class="token comment">&lt;!--#是引用工具--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline float-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline ml-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>赞 11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline ml-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline ml-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>回帖 7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="支持分页"><a href="#支持分页" class="headerlink" title="支持分页"></a>支持分页</h2><h3 id="在entity包下建一个实体类-Page-封装分页的相关信息"><a href="#在entity包下建一个实体类-Page-封装分页的相关信息" class="headerlink" title="在entity包下建一个实体类 Page 封装分页的相关信息"></a>在entity包下建一个实体类 Page 封装分页的相关信息</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.entity;&#x2F;** * @author giegie * @create 2022-01-12-14:00 *&#x2F;&#x2F;** * 封装分页相关的信息 *&#x2F;public class Page &#123;    &#x2F;&#x2F; 当前页码    private int current &#x3D; 1;    &#x2F;&#x2F; 显示上限    private int limit &#x3D; 10;    &#x2F;&#x2F; 数据总数(用于计算总页数)    private int rows;    &#x2F;&#x2F; 查询路径(用于复用分页链接)    private String path;&#x2F;&#x2F;省略get set方法    &#x2F;**     * 获取当前页的起始行     * @return     *&#x2F;    public int getOffset()&#123;        &#x2F;&#x2F; current * limit - limit 当前页*每页显示多少条数据 - 当前页数据条数        return (current - 1) * limit;    &#125;    &#x2F;**     * 获取总页数     * @return     *&#x2F;    public int getTotal()&#123;        &#x2F;&#x2F; rows &#x2F; limit [+1]总的行数&#x2F;每页显示多少条数据        if (rows % limit &#x3D;&#x3D; 0)&#123;            return rows &#x2F; limit;        &#125; else &#123;            return rows &#x2F; limit + 1;        &#125;    &#125;    &#x2F;**     * 获取起始页码     * @return     *&#x2F;    public int getFrom()&#123;        int from &#x3D; current - 2;        return from &lt; 1 ? 1 : from;    &#125;    &#x2F;**     * 获取结束页码     * @return     *&#x2F;    public int getTo()&#123;        int to &#x3D; current + 2;        int total &#x3D; getTotal();        return to &gt; total ? total : to;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HomeController-java增加分页相关的内容"><a href="#HomeController-java增加分页相关的内容" class="headerlink" title="HomeController.java增加分页相关的内容"></a>HomeController.java增加分页相关的内容</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112144726954.png" alt="image-20220112144726954"></p><h3 id="index-html-1"><a href="#index-html-1" class="headerlink" title="index.html"></a>index.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 分页 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-5<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;page.rows>0&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pagination justify-content-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;$&#123;page.path&#125;(current=1)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|page-item $&#123;page.current==1?<span class="token punctuation">'</span>disabled<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span>&#125;|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--如果是第一页,上一页就不可点 disabled--></span><span class="token comment">&lt;!--固定数据再拼上一个变量,静态值拼上一个动态值 用 |xxx|--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;$&#123;page.path&#125;(current=$&#123;page.current-1&#125;)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|page-item $&#123;i==page.current?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span>&#125;|<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i:$&#123;#numbers.sequence(page.from,page.to)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--生成一个从from到to的连续的数组,i变量引用每一个数字--></span><span class="token comment">&lt;!--页码点亮用active--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;i&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--i显示页码--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|page-item $&#123;page.current==page.total?<span class="token punctuation">'</span>disabled<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span>&#125;|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;$&#123;page.path&#125;(current=$&#123;page.current+1&#125;)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;$&#123;page.path&#125;(current=$&#123;page.total&#125;)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>末页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左神讲数据结构与算法</title>
      <link href="/2022/01/01/zuo-shen-jiang-shu-ju-jie-gou-yu-suan-fa/"/>
      <url>/2022/01/01/zuo-shen-jiang-shu-ju-jie-gou-yu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="左神讲解数据结构与算法基础（1）"><a href="#左神讲解数据结构与算法基础（1）" class="headerlink" title="左神讲解数据结构与算法基础（1）"></a>左神讲解数据结构与算法基础（1）</h1><h2 id="认识复杂度与简单排序"><a href="#认识复杂度与简单排序" class="headerlink" title="认识复杂度与简单排序"></a>认识复杂度与简单排序</h2><p><strong>异或</strong>运算-交换 a和b （运用<strong>交换律</strong>与<strong>结合律</strong>，相同为0，不同为1）</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220101085534503.png" alt="image-20220101085534503"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;一个数组中有两个数是奇数个，其余数是偶数个，求奇数个数的两数分别是多少int eor &#x3D; 0;for(int i &#x3D; 0 ; i &lt; arr.length ; i++)&#123;    eor ^&#x3D; arr[i];&#125;&#x2F;&#x2F;eor &#x3D; a ^ b&#x2F;&#x2F;eor !&#x3D; 0&#x2F;&#x2F;eor必然有一个位置上是1int rightOne &#x3D; eor &amp; (~eor + 1); &#x2F;&#x2F;提取出最右的1，常用的方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">int onlyOne &#x3D; 0;&#x2F;&#x2F;eor&#39;for(int cur : arr)&#123;    if((cur &amp; rightOne) &#x3D;&#x3D; 1)&#123;&#x2F;&#x2F;0或1都可        onlyOne ^&#x3D; cur;    &#125;&#125;System.out.println(&quot;一个数是：&quot;+onlyOne+&quot;另一个数是：&quot;+(onlyOne^eor));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="冒泡排序（O（n平方））"><a href="#冒泡排序（O（n平方））" class="headerlink" title="冒泡排序（O（n平方））"></a>冒泡排序（O（n平方））</h2><p><a href="http://javainterview.gitee.io/luffy/2021/09/01/11-%E7%AE%97%E6%B3%95/01.%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/">参考1</a>，<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.md">参考2</a>，<a href="https://www.runoob.com/w3cnote/bubble-sort.html">参考3</a></p><p>思路：从左往右，两两比较，大(小)放后面，第一次排序结束最大值(最小值)已经在数组末尾，n个数需要n-1趟</p><p>实现：两层for循环，外层控制比较的趟数，内层是比较的次数，每比较一趟后，比较次数-1</p><h2 id="选择排序（O（n平方））"><a href="#选择排序（O（n平方））" class="headerlink" title="选择排序（O（n平方））"></a>选择排序（O（n平方））</h2><p><a href="http://javainterview.gitee.io/luffy/2021/09/01/11-%E7%AE%97%E6%B3%95/01.%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/">参考1</a>，<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.md">参考2</a>，<a href="https://www.runoob.com/w3cnote/selection-sort.html">参考3</a></p><p>思路：从数组中选择最小元素，将它与数组的第一个元素交换位置。再从数组剩下的元素中选择出最小的元素，将它与数组的第二个元素交换位置。不断进行这样的操作，直到将整个数组排序。</p><p>实现：设第一个数是最小值，两层for循环，外层控制比较的趟数，内层找到当前趟数的最小值，与第一个数作比较，小于则进行交换</p><h2 id="插入排序（时间复杂度按最差情况来估计）"><a href="#插入排序（时间复杂度按最差情况来估计）" class="headerlink" title="插入排序（时间复杂度按最差情况来估计）"></a>插入排序（时间复杂度按最差情况来估计）</h2><p><a href="http://javainterview.gitee.io/luffy/2021/09/01/11-%E7%AE%97%E6%B3%95/01.%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/">参考1</a>，<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.md">参考2</a>，<a href="https://www.runoob.com/w3cnote/insertion-sort.html">参考3</a></p><p>思路：每次都将当前元素插入到左侧已经排序的数组中，使得插入之后左侧数组依然有序。</p><p>举例：数组 {3, 5, 2, 4, 1}，从小到大排序，3先不动，从5开始与3比较（5&gt;3不动）：3,5,2,4,1；</p><p>2与5比较（2&lt;5），5和2交换位置，2再与3比较（2&lt;3），3和2交换位置：2,3,5,4,1；</p><p>4与5比较（4&lt;5），5和4交换位置，3再与4比较（4&gt;3），4不再与前面数字比较：2,3,4,5,1;</p><p>1与5比较（1&lt;5），5和1交换位置，1再与4比较（1&lt;4），4和1交换位置，1再与3比较（1&lt;3），3和1交换为位置，1再与2比较（1&lt;2），2和1交换位置：1,2,3,4,5</p><h2 id="二分法：O（logN）"><a href="#二分法：O（logN）" class="headerlink" title="二分法：O（logN）"></a>二分法：O（logN）</h2><p><a href="https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">示例</a></p><p>一组有序数中查找一个数；一组有序数中查找最左侧&gt;=num的；一组有序数中查找最右侧&gt;=num的</p><p><strong>注意</strong>：并非有序才能二分</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql 用法</title>
      <link href="/2021/12/28/sql-yong-fa/"/>
      <url>/2021/12/28/sql-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>尝试通过typro来写博客，试试水，检查看看有没有什么问题</p><h2 id="sql-语句"><a href="#sql-语句" class="headerlink" title="sql 语句"></a>sql 语句</h2><ul><li><p>column_name as 别名</p></li><li><p>ROUND(colum_name,decimals) #ROUND()函数用于把数值字段舍入为指定的小数位</p></li><li><p>LIMIT N OFFSET M #limit 设定返回的记录数，offset指定select语句查询的数据偏移量</p></li><li><p>group by 后面有多个条件用 ”, “ 隔开，搭配 having 使用 而不是 where</p></li><li><p>order by 按什么顺序排序</p></li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20211228181259946.png"></p><ul><li>inner join 与 join一样</li></ul><pre class="line-numbers language-none"><code class="language-none">select column_name(s)FROM table1INNER JOIN table2ON table1.column_name&#x3D;table2.column_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不去重：union all</li></ul><h2 id="mysql-高级函数"><a href="#mysql-高级函数" class="headerlink" title="mysql 高级函数"></a>mysql 高级函数</h2><pre class="line-numbers language-none"><code class="language-none">if(expr,v1,v2)#如果表达式expr成立，返回结果v1;否做，返回结果v2.&#x2F;&#x2F; 牛客sql 26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">case expressionwhen condition then resultwhen 条件 then 结果...else 其他结果 #描述与输出不一致，以输出为准 end#牛客sql 27<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>附：<a href="https://www.cnblogs.com/chenduzizhong/p/9590741.html">case when用法</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">system.out.println(&quot;hello&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>123</p><p>456</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
