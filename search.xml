<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>帖子详情</title>
      <link href="/2022/01/21/niu-ke-xiang-mu-tie-zi-xiang-qing/"/>
      <url>/2022/01/21/niu-ke-xiang-mu-tie-zi-xiang-qing/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121111045307.png" alt="image-20220121111045307"></p><p>用th:text不会解析html，用th:utext会解析html，在页面中显示相应的样式</p><p>用户在发帖时，可能带有标签，用utext 可以正常显示标签的样子，若不用utext 会显示转义的字符</p><h2 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h2><p>增加方法根据帖子id 查询帖子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">DiscussPost selectDiscussPostById(int id);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在discusspost-mapper内编写对应的sql语句</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectDiscussPostById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DiscussPost<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    from discuss_post    where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><p>DiscussPostService中增加对应的查询帖子业务</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">public DiscussPost findDiscussPostById(int id)&#123;return discussPostMapper.selectDiscussPostById(id);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><p>ontroller负责请求转发，接受页面过来的参数，传给Service处理，接到返回值，再传给页面。controller层一般会和前台的js文件进行数据的交互， controller层是前台数据的接收器，后台处理好的数据也是通过controller层传递到前台显示的。</p><p>路径：/detail/{discussPostId} ，discussPostId 帖子id，变化的值，请求方式get</p><p><a href="https://blog.csdn.net/u011410529/article/details/66974974">@RequestParam，@PathParam，@PathVariable等注解区别</a></p><p>@PathVariable 这个注解能够识别URL里面的一个模板</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Autowiredprivate UserService userService;@Autowiredprivate DiscussPostService discussPostService;@RequestMapping(path &#x3D; &quot;&#x2F;detail&#x2F;&#123;discussPostId&#125;&quot;, method &#x3D; RequestMethod.GET)public String getDiscussPost(@PathVariable(&quot;discussPostId&quot;) int discussPostId, Model model) &#123;    &#x2F;&#x2F; 帖子    DiscussPost post &#x3D; discussPostService.findDiscussPostById(discussPostId);    model.addAttribute(&quot;post&quot;, post);    &#x2F;&#x2F; 作者    User user &#x3D; userService.findUserById(post.getUserId());    model.addAttribute(&quot;user&quot;, user);    return &quot;&#x2F;site&#x2F;discuss-detail&quot;; &#x2F;&#x2F; 跳转到帖子的详情页&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在首页上的帖子标题增加访问链接"><a href="#在首页上的帖子标题增加访问链接" class="headerlink" title="在首页上的帖子标题增加访问链接"></a>在首页上的帖子标题增加访问链接</h2><p>处理静态资源的访问路径，获取帖子的 id 使用到社区首页开发的内容</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;|/discuss/detail/$&#123;map.post.id&#125;|&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.post.title&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>备战春招，面试刷题跟他复习，一个月全搞定！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="帖子详情页"><a href="#帖子详情页" class="headerlink" title="帖子详情页"></a>帖子详情页</h2><h3 id="thymeleaf-模板处理"><a href="#thymeleaf-模板处理" class="headerlink" title="thymeleaf 模板处理"></a>thymeleaf 模板处理</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121130318490.png" alt="image-20220121130318490"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121130332697.png" alt="image-20220121130332697"></p><h3 id="复用首页的头部"><a href="#复用首页的头部" class="headerlink" title="复用首页的头部"></a>复用首页的头部</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121130421889.png" alt="image-20220121130421889"></p><h3 id="修改或增加thymeleaf-模板处理方法"><a href="#修改或增加thymeleaf-模板处理方法" class="headerlink" title="修改或增加thymeleaf 模板处理方法"></a>修改或增加thymeleaf 模板处理方法</h3><p>获取对应帖子和作者对象里的属性</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121130617442.png" alt="image-20220121130617442"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121130649781.png" alt="image-20220121130649781"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121130714680.png" alt="image-20220121130714680"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布帖子</title>
      <link href="/2022/01/21/niu-ke-xiang-mu-fa-bu-tie-zi/"/>
      <url>/2022/01/21/niu-ke-xiang-mu-fa-bu-tie-zi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120205644840.png"></p><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120212805901.png"></p><h2 id="根据包中的api-编写方法"><a href="#根据包中的api-编写方法" class="headerlink" title="根据包中的api 编写方法"></a>根据包中的api 编写方法</h2><p>服务器给浏览器返回的JSON数据，往往会包含几部分内容</p><ol><li>通常会给浏览器返回一个编号，如 0,1 编码代表什么意思</li><li>给浏览器返回一个提示信息，成功还是失败 …. </li><li>返回业务数据</li></ol><p>JSON返回的是字符串，code ：编码，msg：提示信息，map：封装的业务数据，将这三个条件封装为JSON对象，将JSON对象转换为字符串，就得到了JSON格式的字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static String getJSONString(int code, String msg, Map&lt;String, Object&gt; map) &#123;        JSONObject json &#x3D; new JSONObject();        json.put(&quot;code&quot;, code);        json.put(&quot;msg&quot;, msg);        if (map !&#x3D; null) &#123;            for (String key : map.keySet()) &#123; &#x2F;&#x2F; 遍历map的key                json.put(key, map.get(key)); &#x2F;&#x2F; 将value封装进JSON对象            &#125;        &#125;        return json.toJSONString(); &#x2F;&#x2F; 转变为JSON类型的字符串    &#125;    &#x2F;&#x2F; 有时候没有map或msg，增加重载方法，便于调用    public static String getJSONString(int code, String msg) &#123;        return getJSONString(code, msg, null);    &#125;    public static String getJSONString(int code) &#123;        return getJSONString(code, null, null);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><p>浏览器将数据转换为 js 对象，可以得到 key 对应的值，实现前后端的交互<br> <img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120211146907.png"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120211201328.png"></p><h2 id="演示-AJAX-示例，如何发送异步请求"><a href="#演示-AJAX-示例，如何发送异步请求" class="headerlink" title="演示 AJAX 示例，如何发送异步请求"></a>演示 AJAX 示例，如何发送异步请求</h2><p>Controller 层增加处理方法</p><p>方式：post 因为返回的是数据不是网页，加@ResponseBody<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120214427571.png"></p><ul><li><p>增加一个静态网页，写 jquery 代码，来访问这个方法</p></li><li><p>写一个按钮，点击按钮就向服务器发送这个请求，类型：button 值：发送 单击事件：send() 方法</p></li><li><p>要实现 send() 方法要引入 jquery </p></li><li><p>写一个script 标签实现 send 方法</p></li></ul><p>$.get，$.post，$.ajax 三个方法，$.ajax 是万能方法，get和post是简化之后的方法<br>这个方法常用的参数有3个：</p><ol><li>访问路径</li><li>向服务器提交的数据（写一个 js 对象，也是json格式，js 对象的直接量就是json 格式）</li><li>声明一个回调函数（匿名，服务器给浏览器做出响应后，浏览器会调这个方法，并且会把返回的数据传给这个方法，data 就是服务器给浏览器返回的数据，证明：在控制台打印出来，typeof（js的一个函数）看data 是不是string，再将json 字符串转变为 json 对象 ）</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>AJAX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>发送<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.3.1.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>                <span class="token string">"/community/alpha/ajax"</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    data <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120222827968.png"></p><h2 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h2><p>在 DiscussPostMapper 中增加一个方法，用于增加帖子<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120223746477.png"></p><p>在 discusspost-mapper.xml 中写插入帖子的sql 语句<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120224705198.png"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120224652152.png"></p><h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">public int addDiscussPost(DiscussPost post) &#123;    if (post &#x3D;&#x3D; null) &#123;        throw new IllegalArgumentException(&quot;参数不能为空&quot;);    &#125;    &#x2F;&#x2F;转义HTML标记，HtmlUtils是springMVC提供的工具    post.setTitle(HtmlUtils.htmlEscape(post.getTitle()));    post.setContent(HtmlUtils.htmlEscape(post.getContent()));    &#x2F;&#x2F;过滤敏感词    post.setTitle(sensitiveFilter.filter(post.getTitle()));    post.setContent(sensitiveFilter.filter(post.getContent()));    return discussPostMapper.insertDiscussPostRows(post);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h2><p>新建一个发帖相关的类 DiscussPostController </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller;import com.nowcoder.community.entity.DiscussPost;import com.nowcoder.community.entity.User;import com.nowcoder.community.service.DiscussPostService;import com.nowcoder.community.util.CommunityUtil;import com.nowcoder.community.util.HostHolder;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import java.util.Date;&#x2F;** * @author giegie * @create 2022-01-21-8:56 *&#x2F;@Controller@RequestMapping(&quot;&#x2F;discuss&quot;)public class DiscussPostController &#123;    @Autowired    private DiscussPostService discussPostService;    @Autowired    private HostHolder hostHolder;    @RequestMapping(path &#x3D; &quot;&#x2F;add&quot;,method &#x3D; RequestMethod.POST)    @ResponseBody    public String addDiscussPost(String title,String content)&#123;        User user &#x3D; hostHolder.getUser();        if (user &#x3D;&#x3D; null)&#123;            return CommunityUtil.getJSONString(403,&quot;你还没有登录喔！&quot;);        &#125;        DiscussPost post &#x3D; new DiscussPost();        post.setUserId(user.getId());        post.setTitle(title);        post.setContent(content);        post.setCreateTime(new Date());        discussPostService.addDiscussPost(post);                &#x2F;&#x2F; 报错的情况，将来统一处理        return CommunityUtil.getJSONString(0,&quot;发布成功！&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理页面"><a href="#处理页面" class="headerlink" title="处理页面"></a>处理页面</h2><p>index.js<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121091402753.png"></p><p>当点发布时，将填数据的对话框隐藏掉，这个先不动<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121091605907.png"></p><p>向服务器发送消息后，等返回结果以后再显示提示框，这个是后显示的<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121091617800.png"></p><p>两者之间发异步请求</p><p>获取标题和内容，用到 id ，首先取的是标题，用 jquery id 选择器，选中的是文本框，得到的是它们的值，同理取内容<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121092427545.png"></p><h3 id="处理异步请求"><a href="#处理异步请求" class="headerlink" title="处理异步请求"></a>处理异步请求</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#publishBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>publish<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#publishModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"hide"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取标题和内容</span>    <span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#recipient-name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message-text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发送异步请求（POST）</span>    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>        <span class="token constant">CONTEXT_PATH</span> <span class="token operator">+</span> <span class="token string">"/discuss/add"</span><span class="token punctuation">,</span><span class="token comment">// 访问路径</span>        <span class="token punctuation">&#123;</span><span class="token string">"title"</span><span class="token operator">:</span> title<span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token operator">:</span> content<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 传入的数据</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 回调函数来处理返回的结果</span>            data <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将字符串转变为 json对象</span>            <span class="token comment">// 服务器返回一个状态和提示消息</span>            <span class="token comment">// 在提示框中显示返回的消息,利用id获取提示框，修改它的内容</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#hintBody"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 显示提示框</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#hintModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2秒后，自动隐藏提示框</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#hintModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"hide"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果返回的结果是ok的，添加完以后要把当前页面刷新一下，看到这个数据；失败报错，就不刷新，成功的才算页面</span>                <span class="token comment">// 刷新页面</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> AJAX </tag>
            
            <tag> js </tag>
            
            <tag> json </tag>
            
            <tag> jQuery </tag>
            
            <tag> 增量更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤敏感词</title>
      <link href="/2022/01/21/guo-lu-min-gan-ci/"/>
      <url>/2022/01/21/guo-lu-min-gan-ci/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120111129041.png" alt="image-20220120111129041"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.util;import org.apache.commons.lang3.CharUtils;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Component;import javax.annotation.PostConstruct;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.HashMap;import java.util.Map;&#x2F;** * @author giegie * @create 2022-01-20-15:20 *&#x2F;@Componentpublic class SensitiveFilter &#123;    private static final Logger logger &#x3D; LoggerFactory.getLogger(SensitiveFilter.class);    &#x2F;&#x2F; 替换节点    private static final String REPLACEMENT &#x3D; &quot;***&quot;;    &#x2F;&#x2F; 根节点    private TrieNode rootNode &#x3D; new TrieNode();    @PostConstruct &#x2F;&#x2F; 程序编译时，初始化读取配置文件    public void init() &#123;        try (                InputStream is &#x3D; this.getClass().getClassLoader().getResourceAsStream(&quot;sensitive-words.txt&quot;);&#x2F;&#x2F; 获取文件的字节流                BufferedReader reader &#x3D; new BufferedReader(new InputStreamReader(is)); &#x2F;&#x2F; 字节流转变为字符流，字符流转变为缓冲流        ) &#123;            String keyword;            while ((keyword &#x3D; reader.readLine()) !&#x3D; null) &#123;                &#x2F;&#x2F; 添加到前缀树                this.addKeyword(keyword);            &#125;        &#125; catch (IOException e) &#123;            logger.error(&quot;加载敏感词文件失败：&quot; + e.getMessage());        &#125;    &#125;    &#x2F;&#x2F; 将一个敏感词添加到前缀树中    private void addKeyword(String keyword) &#123;        TrieNode tempNode &#x3D; rootNode;        for (int i &#x3D; 0; i &lt; keyword.length(); i++) &#123;            char c &#x3D; keyword.charAt(i); &#x2F;&#x2F; 获取敏感词每个字符            TrieNode subNode &#x3D; tempNode.getSubNode(c); &#x2F;&#x2F;根节点查看是否有该字符的子节点            if (subNode &#x3D;&#x3D; null) &#123;                &#x2F;&#x2F; 若没有对应的子节点，就初始化子节点                subNode &#x3D; new TrieNode();                tempNode.addSubNode(c, subNode); &#x2F;&#x2F; 将子节点挂到根节点上            &#125;            &#x2F;&#x2F; 指向子节点，进入下一轮循环            tempNode &#x3D; subNode;            &#x2F;&#x2F; 设置结束标识            if (i &#x3D;&#x3D; keyword.length() - 1) &#123;                tempNode.setKeywordEnd(true);            &#125;        &#125;    &#125;    &#x2F;**     * 过滤敏感词     *     * @param text 待过滤的文本     * @return 过滤后的文本     *&#x2F;    public String filter(String text) &#123;        if (StringUtils.isBlank(text)) &#123;            return null;        &#125;        &#x2F;&#x2F; 指针1        TrieNode tempNode &#x3D; rootNode;        &#x2F;&#x2F; 指针2        int begin &#x3D; 0;        &#x2F;&#x2F; 指针3        int position &#x3D; 0;        &#x2F;&#x2F; 结果        StringBuilder sb &#x3D; new StringBuilder();        while (position &lt; text.length()) &#123;            char c &#x3D; text.charAt(position);            &#x2F;&#x2F; 跳过符号            if (isSymbol(c)) &#123;                &#x2F;&#x2F; 若指针1处于根节点，就将此符号计入结果，让指针2向下走一步                if (tempNode &#x3D;&#x3D; rootNode) &#123;                    sb.append(c);                    begin++;                &#125;                &#x2F;&#x2F; 无论符号在开头或中间，指针3都向下走一步                position++;                continue;            &#125;            &#x2F;&#x2F; 检查下级节点            tempNode &#x3D; tempNode.getSubNode(c);            if (tempNode &#x3D;&#x3D; null)&#123;                &#x2F;&#x2F; 以begin开头的字符串不是敏感词                sb.append(text.charAt(begin));                &#x2F;&#x2F; 进入下一个位置                position &#x3D; ++begin;                &#x2F;&#x2F; 重新指向根节点                tempNode &#x3D; rootNode;            &#125; else if (tempNode.isKeywordEnd)&#123;                &#x2F;&#x2F; 发现敏感词，将begin~position字符串替换掉                sb.append(REPLACEMENT);                &#x2F;&#x2F; 进入下一个位置                begin&#x3D;++position;                &#x2F;&#x2F; 重新指向根节点                tempNode &#x3D; rootNode;            &#125; else &#123;                &#x2F;&#x2F; 检查下一个字符                position++;            &#125;        &#125;        &#x2F;&#x2F; 将最后一批字符计入结果        sb.append(text.substring(begin));        return sb.toString();    &#125;    &#x2F;&#x2F; 判断是否为符号    private boolean isSymbol(Character c) &#123;        &#x2F;&#x2F; 0x2E80~0x9FFF 是东亚文字范围        return !CharUtils.isAsciiAlphanumeric(c) &amp;&amp; (c &lt; 0x2E80 || c &gt; 0x9FFF);    &#125;    &#x2F;&#x2F; 前缀树    private class TrieNode &#123; &#x2F;&#x2F; 内部类        &#x2F;&#x2F; 关键词结束标识        private boolean isKeywordEnd &#x3D; false;        &#x2F;&#x2F; 子节点(key是下级字符，value是下级节点)        private Map&lt;Character, TrieNode&gt; subNodes &#x3D; new HashMap&lt;&gt;();        public boolean isKeywordEnd() &#123;            return isKeywordEnd;        &#125;        public void setKeywordEnd(boolean keywordEnd) &#123;            isKeywordEnd &#x3D; keywordEnd;        &#125;        &#x2F;&#x2F; 添加子节点        public void addSubNode(Character c, TrieNode node) &#123;            subNodes.put(c, node);        &#125;        &#x2F;&#x2F; 获取子节点的        public TrieNode getSubNode(Character c) &#123;            return subNodes.get(c);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community;import com.nowcoder.community.util.SensitiveFilter;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.ContextConfiguration;&#x2F;** * @author giegie * @create 2022-01-20-17:36 *&#x2F;@SpringBootTest@ContextConfiguration(classes &#x3D; CommunityApplication.class)public class SensitiveTests &#123;    @Autowired    private SensitiveFilter sensitiveFilter;    @Test    public void testSensitiveFilter()&#123;        String text &#x3D; &quot;这里可以赌博，可以嫖娼，可以开票，哈哈哈&quot;;        text &#x3D; sensitiveFilter.filter(text);        System.out.println(text);        text &#x3D; &quot;这里可以☆赌☆博☆,可以☆嫖☆娼☆,可以☆吸☆毒☆,可以☆开☆票☆,哈哈哈!&quot;;        text &#x3D; sensitiveFilter.filter(text);        System.out.println(text);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 过滤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>检查登录状态</title>
      <link href="/2022/01/20/niu-ke-xiang-mu-jian-cha-deng-lu-zhuang-tai/"/>
      <url>/2022/01/20/niu-ke-xiang-mu-jian-cha-deng-lu-zhuang-tai/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120094641087.png" alt="image-20220120094641087"></p><p>@Target 注解声明自定义注解可以写在哪个位置，作用在哪个类型上（类，方法，属性）</p><p>@Retention 声明自定义注解保留的时间或有效的时间，编译有效还是运行有效</p><p>@Document 声明自定义注解在生成文档时，要不要带上</p><p>@Inherited 用于继承，子类继承于父类，父类上有自定义注解，子类是否要继承这些注解</p><p>Method.getDeclaredAnnotations() 获取这个方法上所有的注解</p><p>Method.getAnnotation(Class<T> annotationClass) 获取这个指定类型的注解</p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>community下新增一个包 annotation 新建一个自定义注解 LoginRequired </p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120103726928.png" alt="image-20220120103726928"></p><h2 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h2><p>在需要登录后才能访问的方法上，加上自定义注解</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120100126620.png" alt="image-20220120100126620"></p><h2 id="新增拦截器"><a href="#新增拦截器" class="headerlink" title="新增拦截器"></a>新增拦截器</h2><p>在 interceptor 包下新增一个拦截器 LoginRequiredInterceptor</p><ul><li>在程序中，可以通过反射的方式解析注解</li><li>通过Method 对象可以获取某方法上标注的所有注解</li><li>通过Method 对象可以获取某方法上指定类型的注解</li><li>Method 对象上还有很多其他的方法，可以获取该方法上标注的注解</li></ul><p>如果 loginRequired 不为空且获取不到当前的用户，则直接重定向到登录页面，return false意味着请求执行到此为止, 不会继续执行后续的部分了, 因为重定向已经完成了对这个请求的处理，</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120104014444.png" alt="image-20220120104014444"></p><h2 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120105812408.png" alt="image-20220120105812408"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 拦截器 </tag>
            
            <tag> 登录状态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忘记密码</title>
      <link href="/2022/01/19/niu-ke-xiang-mu-wang-ji-mi-ma/"/>
      <url>/2022/01/19/niu-ke-xiang-mu-wang-ji-mi-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><p>登录页面点击忘记密码跳转到 forget 页面，请求的方式为 get，再处理登录页面，使点击可以跳转到忘记密码页面</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119203608355.png" alt="image-20220119203608355"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119205017503.png" alt="image-20220119205017503"></p><h2 id="service-层"><a href="#service-层" class="headerlink" title="service 层"></a>service 层</h2><p>service 层增加重置密码的业务，接收参数为邮箱和密码，先进行空值处理，验证邮箱：根据传入的邮箱查找是否有对应的用户，将传入的用户输入的密码再加上对应的 salt 做md5 加密处理，更改数据库中原先的密码，将处理的信息装入 map 并返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 重置密码    public Map&lt;String, Object&gt; resetPassword(String email, String password) &#123;        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();        &#x2F;&#x2F; 空值处理        if (StringUtils.isBlank(email)) &#123;            map.put(&quot;emailMsg&quot;, &quot;邮箱不能为空！&quot;);            return map;        &#125;        if (StringUtils.isBlank(password)) &#123;            map.put(&quot;passwordMsg&quot;, &quot;密码不能为空&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证邮箱        User user &#x3D; userMapper.selectByEmail(email);        if (user &#x3D;&#x3D; null) &#123;            map.put(&quot;emailMsg&quot;, &quot;该邮箱尚未注册!&quot;);            return map;        &#125;        &#x2F;&#x2F; 重置密码        password &#x3D; CommunityUtil.md5(password + user.getSalt());        userMapper.updatePassword(user.getId(), password);        map.put(&quot;user&quot;, user);        return map;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="conroller-层"><a href="#conroller-层" class="headerlink" title="conroller 层"></a>conroller 层</h2><p>注入邮件发送工具和模板引擎</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119204846083.png" alt="image-20220119204846083"></p><p>增加获取验证码的处理</p><p>路径 /forget/code 请求的方式 get ，参数是邮箱和 session ，先判断邮箱是否为空，不为空就处理邮件发送，随机生成4位的验证码，将邮箱和验证码装进context 中，通过模板引擎将context 传进 mail/forget.html 页面，并将content 邮件内容发送给用户，将生成的验证码保存进 session </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取验证码    @RequestMapping(path &#x3D; &quot;&#x2F;forget&#x2F;code&quot;, method &#x3D; RequestMethod.GET)    @ResponseBody    public String getForgetCode(String email, HttpSession session) &#123;        if (StringUtils.isBlank(email)) &#123;            return CommunityUtil.getJSONString(1, &quot;邮箱不能为空！&quot;);        &#125;        &#x2F;&#x2F; 发送邮件        Context context &#x3D; new Context();        context.setVariable(&quot;email&quot;, email);        String code &#x3D; CommunityUtil.generateUUID().substring(0, 4);        context.setVariable(&quot;verifyCode&quot;, code);        String content &#x3D; templateEngine.process(&quot;&#x2F;mail&#x2F;forget&quot;, context);        mailClient.sendMail(email, &quot;找回密码&quot;, content);        &#x2F;&#x2F; 保存验证码        session.setAttribute(&quot;verifyCode&quot;, code);        return CommunityUtil.getJSONString(0);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理-mail-forget-html-页面"><a href="#处理-mail-forget-html-页面" class="headerlink" title="处理 mail/forget.html 页面"></a>处理 mail/forget.html 页面</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119210202820.png" alt="image-20220119210202820"></p><p>进行重置密码操作，访问路径 forget/password 请求的方式 post，传入的参数为 用户输入的邮箱，用户输入的验证码，用户输入的新密码，model，session，从session中获取生成的4位验证码，判断用户输入的验证码是否为空，session 中的验证码是否为空，生成的验证码和用户输入的验证码是否相同，验证码没问题调用service 中的重置密码方法，得到返回的map ，若map 里有user 则重定向到登录页面。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 重置密码    @RequestMapping(path &#x3D; &quot;&#x2F;forget&#x2F;password&quot;, method &#x3D; RequestMethod.POST)    public String resetPassword(String email, String verifyCode, String password, Model model, HttpSession session) &#123;        String code &#x3D; (String) session.getAttribute(&quot;verifyCode&quot;);        if (StringUtils.isBlank(verifyCode) || StringUtils.isBlank(code) || !code.equalsIgnoreCase(verifyCode)) &#123;            model.addAttribute(&quot;codeMsg&quot;, &quot;验证码错误&quot;);            return &quot;&#x2F;site&#x2F;forget&quot;;        &#125;        Map&lt;String, Object&gt; map &#x3D; userService.resetPassword(email, password);        if (map.containsKey(&quot;user&quot;)) &#123;            return &quot;redirect:&#x2F;login&quot;;        &#125; else &#123;            model.addAttribute(&quot;emailMsg&quot;, map.get(&quot;emailMsg&quot;));            model.addAttribute(&quot;passwordMsg&quot;, map.get(&quot;passwordMsg&quot;));            return &quot;&#x2F;site&#x2F;forget&quot;;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置forget 页面</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119212727167.png" alt="image-20220119212727167"></p><p>复用首页</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119212803805.png" alt="image-20220119212803805"></p><p>对内容进行修改</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119213007041.png" alt="image-20220119213007041"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119213120402.png" alt="image-20220119213120402"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119213138119.png" alt="image-20220119213138119"></p><p>获取验证码，导入 forget.js 文件，js 知识</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119213356841.png" alt="image-20220119213356841"></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>账号设置</title>
      <link href="/2022/01/19/niu-ke-xiang-mu-zhang-hao-she-zhi/"/>
      <url>/2022/01/19/niu-ke-xiang-mu-zhang-hao-she-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="修改上传头像"><a href="#修改上传头像" class="headerlink" title="修改上传头像"></a>修改上传头像</h1><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118212844688.png" alt="image-20220118212844688"></p><h2 id="跳转账户设置页面"><a href="#跳转账户设置页面" class="headerlink" title="跳转账户设置页面"></a>跳转账户设置页面</h2><p>登录后点击首页的账号设置能跳转到setting 页面</p><p>在 controller 包下新建一个UserController，处理与用户个人有关的设置<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119091455083.png" alt="image-20220119091455083"></p><p>增加访问路径和请求方式，返回账号设置页面<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119091558409.png" alt="image-20220119091558409"></p><p>对首页的账号设置按钮进行配置<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119091808178.png" alt="image-20220119091808178"></p><p>对setting 页面做模板处理<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119091926946.png" alt="image-20220119091926946"></p><p>复用首页的头部设置<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119091947281.png" alt="image-20220119091947281"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在application.properties 配置中增加一个图片的上传路径<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119105214469.png" alt="image-20220119105214469"></p><h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><p>在 UserService 中增加一个更改头像路径的方法<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119105333884.png" alt="image-20220119105333884"></p><h2 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h2><p>在UserController中注入 上传路径，域名，项目名，service层，持有的用户信息<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119105535979.png" alt="image-20220119105535979"></p><h2 id="增加图片上传的方法"><a href="#增加图片上传的方法" class="headerlink" title="增加图片上传的方法"></a>增加图片上传的方法</h2><p>路径：upload，请求方式：post，图片上传至指定的路径，并更改用户的 headUrl ，最后重定向到首页<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119105700943.png" alt="image-20220119105700943"></p><h2 id="获取图片方法"><a href="#获取图片方法" class="headerlink" title="获取图片方法"></a>获取图片方法</h2><p>增加方法：浏览器从服务端获取头像<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119110354892.png" alt="image-20220119110354892"></p><h2 id="设置setting页面"><a href="#设置setting页面" class="headerlink" title="设置setting页面"></a>设置setting页面</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119125504097.png" alt="image-20220119125504097"></p><h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><h2 id="service-层"><a href="#service-层" class="headerlink" title="service 层"></a>service 层</h2><p>参数 用户id，旧密码，新密码，先判断旧密码和新密码是否为空，验证用户输入的原始密码是否与存在数据库里该用户的密码一致，更改密码，并将新密码修改保存进数据库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 修改密码    public Map&lt;String, Object&gt; updatePassword(int userId, String oldePassword, String newPassword) &#123;        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();        &#x2F;&#x2F; 空值处理        if (StringUtils.isBlank(oldePassword)) &#123;            map.put(&quot;oldPasswordMsg&quot;, &quot;原密码不能为空！&quot;);            return map;        &#125;        if (StringUtils.isBlank(newPassword)) &#123;            map.put(&quot;newPasswordMsg&quot;, &quot;新密码不能为空！&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证原始密码        User user &#x3D; userMapper.selectById(userId);        oldePassword &#x3D; CommunityUtil.md5(oldePassword + user.getSalt());        if (!user.getPassword().equals(oldePassword)) &#123;            map.put(&quot;oldPassword&quot;, &quot;原始密码输入有误&quot;);            return map;        &#125;        &#x2F;&#x2F; 更新密码        newPassword &#x3D; CommunityUtil.md5(newPassword + user.getSalt());        userMapper.updatePassword(userId, newPassword);        return map;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="controller-层"><a href="#controller-层" class="headerlink" title="controller 层"></a>controller 层</h2><p>获取当前持有的用户调用service 层的方法，判断返回的 map 是否为空，若为空则重定向到退出登录页面（<strong>先退出，再登录</strong>）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 修改密码    @RequestMapping(path &#x3D; &quot;&#x2F;updatePassword&quot;,method &#x3D; RequestMethod.POST)    public String updatePassword(String oldPassword,String newPassword,Model model)&#123;        User user &#x3D; hostHolder.getUser();        Map&lt;String,Object&gt; map &#x3D; userService.updatePassword(user.getId(),oldPassword,newPassword);        if (map &#x3D;&#x3D; null || map.isEmpty())&#123;            return &quot;redirect:&#x2F;logout&quot;;        &#125;else&#123;            model.addAttribute(&quot;oldPasswordMsg&quot;,map.get(&quot;oldPasswordMsg&quot;));            model.addAttribute(&quot;newPasswordMsg&quot;,map.get(&quot;newPasswordMsg&quot;));            return &quot;&#x2F;site&#x2F;setting&quot;;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置setting页面-1"><a href="#设置setting页面-1" class="headerlink" title="设置setting页面"></a>设置setting页面</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119232226476.png" alt="image-20220119232226476"></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 账号设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>显示登陆信息</title>
      <link href="/2022/01/18/niu-ke-xiang-mu-xian-shi-deng-lu-xin-xi/"/>
      <url>/2022/01/18/niu-ke-xiang-mu-xian-shi-deng-lu-xin-xi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118084242965.png" alt="image-20220118084242965"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118142149512.png" alt="image-20220118142149512"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118171035706.png" alt="image-20220118171035706"></p><p>在Util 包下新建类CookieUtil 对浏览器发来的cookie 进行封装，从cookie中获取要查找的指定字符串</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118161715578.png" alt="image-20220118161715578"></p><p>在UserService中增加一个方法，根据ticket 查找用户的凭证</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118162158060.png" alt="image-20220118162158060"></p><h2 id="难点：多线程"><a href="#难点：多线程" class="headerlink" title="难点：多线程"></a>难点：多线程</h2><p>将user 用户存储起来，方便后面的使用</p><p>因为服务器会出现并发处理的情况，每一个线程要单独处理一个请求，服务器在处理请求的时候是一个多线程的环境，在多个线程中要隔离存储user 对象，使用 ThreadLocal工具作线程隔离操作，将这个对user 的操作封装进一个工具里，在 util包下新建 HostHolder类，对user进行隔离操作</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118170908977.png" alt="image-20220118170908977"></p><p>在拦截器里对浏览器发送给服务器的请求进行处理，获取cookie中的ticket 根据凭证查到user 用户，将用户装进model 里，传给模板</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller.interceptor;import com.nowcoder.community.entity.LoginTicket;import com.nowcoder.community.entity.User;import com.nowcoder.community.service.UserService;import com.nowcoder.community.util.CookieUtil;import com.nowcoder.community.util.HostHolder;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.Date;&#x2F;** * @author giegie * @create 2022-01-18-16:04 *&#x2F;@Componentpublic class LoginTicketInterceptor implements HandlerInterceptor &#123;    @Autowired    private UserService userService;    @Autowired    private HostHolder hostHolder;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;        &#x2F;&#x2F; 从cookie中获取凭证        String ticket &#x3D; CookieUtil.getValue(request, &quot;ticket&quot;);        if (ticket !&#x3D; null) &#123;            &#x2F;&#x2F; 查询凭证            LoginTicket loginTicket &#x3D; userService.findLoginTicket(ticket);            &#x2F;&#x2F; 检查凭证是否有效            if (loginTicket !&#x3D; null &amp;&amp; loginTicket.getStatus() &#x3D;&#x3D; 0 &amp;&amp; loginTicket.getExpired().after(new Date())) &#123;                &#x2F;&#x2F; 根据凭证查询用户                User user &#x3D; userService.findUserById(loginTicket.getUserId());                &#x2F;&#x2F; 在本次请求中持有用户                hostHolder.setUser(user);            &#125;        &#125;        return true;    &#125;    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;        User user &#x3D; hostHolder.getUser();        if (user!&#x3D;null &amp;&amp; modelAndView!&#x3D;null)&#123;            modelAndView.addObject(&quot;loginUser&quot;,user);        &#125;    &#125;    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;        hostHolder.clear();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对拦截器进行相关的配置，不拦截静态的 css，js ….文件</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118171526745.png" alt="image-20220118171526745"></p><p>对index 首页进行处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118172446362.png" alt="image-20220118172446362"></p><p>判断loginUser 是否为空，若为空，则未登陆，页面头部应显示注册和登陆信息，不显示登录后的消息信息，不为空则反之，登录后从用户获取头像headerUrl 。</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 拦截器 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登录退出功能</title>
      <link href="/2022/01/18/niu-ke-xiang-mu-deng-lu-tui-chu-gong-neng/"/>
      <url>/2022/01/18/niu-ke-xiang-mu-deng-lu-tui-chu-gong-neng/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117074744905.png" alt="image-20220117074744905"></p><p>dao -&gt; service -&gt; controller</p><p>包 entity 下新建实体类 LoginTicket 属性与表中的字段对应，并生成对应的set，get，tostring方法</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117171204796.png" alt="image-20220117171204796"></p><p>包 dao 下新建接口 LoginTicketMapper 声明 @Mapper 注解</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117171613280.png" alt="image-20220117171613280"></p><p>在方法上直接注入sql 语句 有别于.xml 方法</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117173315324.png" alt="image-20220117173315324"></p><p>整张表围绕 ticket 来设计，ticket 是凭证，发送 ticket 字符串给浏览器进行保存，其他数据服务端存一份</p><p>客户端通过 cookie 存了 ticket 数据后，再次访问服务器会把 ticket 给服务器，服务端通过 ticket 查到整条数据</p><p>写完 dao 进行测试</p><p>在MapperTests里进行测试，注入LoginTicketMapper</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117173851830.png" alt="image-20220117173851830"></p><p>开发业务层，写登录业务，接收页面传入的条件，在 UserService 里写 service 注入 LoginTicketMapper ，登录方法返回值类型为 Map ，将多条信息放进去，参数为：用户名，密码，有效时间，先做空值处理，然后对账号、状态、密码进行验证，从客户端得到的密码要结合salt 值做md5 加密处理再和数据库中的密码进行比对，最后没问题就生成登录凭证，将 ticket 放进map 中并返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Map&lt;String, Object&gt; login(String username, String password, long expiredSeconds) &#123;        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();        &#x2F;&#x2F; 空值处理        if (StringUtils.isBlank(username)) &#123;            map.put(&quot;usernameMsg&quot;, &quot;账号不能为空&quot;);            return map;        &#125;        if (StringUtils.isBlank(password)) &#123;            map.put(&quot;password&quot;, &quot;密码不能为空&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证账号        User user &#x3D; userMapper.selectByName(username);        if (user &#x3D;&#x3D; null) &#123;            map.put(&quot;usernameMsg&quot;, &quot;该账号不存在&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证状态        if (user.getStatus() &#x3D;&#x3D; 0) &#123;            map.put(&quot;usernameMsg&quot;, &quot;该账号未激活&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证密码,从客户端获取到的密码为明文，要进行md5加密，在与数据库中的密码进行比较        password &#x3D; CommunityUtil.md5(password + user.getSalt());        if (!user.getPassword().equals(password)) &#123;            map.put(&quot;passwordMsg&quot;, &quot;密码不正确&quot;);            return map;        &#125;        &#x2F;&#x2F; 生成登录凭证        LoginTicket loginTicket &#x3D; new LoginTicket();        loginTicket.setUserId(user.getId());        loginTicket.setTicket(CommunityUtil.generateUUID());        loginTicket.setStatus(0);        loginTicket.setExpired(new Date(System.currentTimeMillis() + expiredSeconds * 1000));        map.put(&quot;ticket&quot;,loginTicket.getTicket());        return map;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 LoginController 里写 controller 路径“/login” 请求方式 post ,login方法的参数为 用户名，密码，验证码，是否记住，model，session，response。先判断验证码是否正确，然后检查账号和密码，调用service 里的 login 方法，传入参数，如果map 里包含了 ticket 就是成功，否则失败，成功重定向到首页，失败回到登录页面 。成功后发送 cookie 到浏览器进行保存，设置cookie 的有效路径，用户登录以后有效路径包含整个项目，路径不要写死，@Value 注入配置里的项目路径 text-path，设置cookie 的有效时间，通过response.add(cookie) 将cookie 发送给页面；失败后，将错误信息加入到 model 中带给登录页面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(path &#x3D; &quot;&#x2F;login&quot;, method &#x3D; RequestMethod.POST)public String login(String username, String password, String code, boolean rememberme,                    Model model, HttpSession session, HttpServletResponse response) &#123;    &#x2F;&#x2F; 先检查验证码    String kaptcha &#x3D; (String) session.getAttribute(&quot;kaptcha&quot;);    if (StringUtils.isBlank(kaptcha) || StringUtils.isBlank(code) || !kaptcha.equalsIgnoreCase(code)) &#123;        model.addAttribute(&quot;codeMsg&quot;, &quot;验证码不正确！&quot;);        &#x2F;&#x2F; 错误信息放到model中带入到登录页面        return &quot;&#x2F;site&#x2F;login&quot;; &#x2F;&#x2F; 重回登录页面    &#125;    &#x2F;&#x2F; 检查账号，密码    int expiredSceonds &#x3D; rememberme ? REMEMBER_EXPIRED_SECONDS : DEFAULT_EXPIRED_SECONDS;    Map&lt;String,Object&gt; map &#x3D; userService.login(username,password,expiredSceonds);    if (map.containsKey(&quot;ticket&quot;))&#123;        Cookie cookie &#x3D; new Cookie(&quot;ticket&quot;,map.get(&quot;ticket&quot;).toString());        &#x2F;&#x2F;new一个cookie,cookie中要存取字符串        cookie.setPath(contextPath); &#x2F;&#x2F; 设置cookie的路径：整个项目        cookie.setMaxAge(expiredSceonds); &#x2F;&#x2F; 设置cookie的有效时间        response.addCookie(cookie); &#x2F;&#x2F; 给浏览器的响应带上cookie        return &quot;redirect:&#x2F;index&quot;; &#x2F;&#x2F; 重定向到首页    &#125;else &#123;        model.addAttribute(&quot;usernameMsg&quot;,map.get(&quot;usernameMsg&quot;));        model.addAttribute(&quot;passwordMsg&quot;,map.get(&quot;passwordMsg&quot;));        return &quot;&#x2F;site&#x2F;login&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对登录页面进行设置，表单提交的方式，提交的路径，每个表单项增加一个 name ，name与controller 里的参数名要一致，对错误信息作一个展现，从请求的 Request 当中获取参数</p><p>提交的方式，路径</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117233626480.png" alt="image-20220117233626480"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117233852084.png" alt="image-20220117233852084"></p><p>①：判断usernameMsg 是否为空，若不为空，则输出 ${usernameMsg} 里的值<br>②：从请求 Request 中获取提交的 username，显示在登录页面的用户名输入框中<br>③：增加一个对应的 name 值与 controller 里的参数名相同<br>④：根据情况动态显示登录出现的错误</p><p>退出登录</p><p>service 层</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118004914552.png" alt="image-20220118004914552"></p><p>controller 层，重定向返回的默认是 get 方式的 login 登录页面</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118004951388.png" alt="image-20220118004951388"></p><p>在index 页面作设置</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118005137804.png" alt="image-20220118005137804"></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 登录功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成验证码</title>
      <link href="/2022/01/16/niu-ke-xiang-mu-sheng-cheng-yan-zheng-ma/"/>
      <url>/2022/01/16/niu-ke-xiang-mu-sheng-cheng-yan-zheng-ma/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116083330183.png" alt="image-20220116083330183"></p><p>导入 jar 包</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116084123482.png" alt="image-20220116084123482"></p><p>编写配置类（config 包下新建类 KaptchaConfig）</p><p>要实现 Producer 接口，</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116084606993.png" alt="image-20220116084606993"></p><p>DefaultKaptcha 是这个接口的实现类</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116084720082.png" alt="image-20220116084720082"></p><p>KaptchaConfig 配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.config;import com.google.code.kaptcha.Producer;import com.google.code.kaptcha.impl.DefaultKaptcha;import com.google.code.kaptcha.util.Config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.util.Properties;&#x2F;** * @author giegie * @create 2022-01-16-8:40 *&#x2F;@Configurationpublic class KaptchaConfig &#123;    @Bean &#x2F;&#x2F; 声明一个Bean,这个Bean将会被Spring容器所装配    public Producer kaptchaProducer() &#123;        Properties properties &#x3D; new Properties();        properties.setProperty(&quot;kaptcha.image.width&quot;, &quot;100&quot;);&#x2F;&#x2F; 宽        properties.setProperty(&quot;kaptcha.image.height&quot;, &quot;40&quot;);&#x2F;&#x2F; 高        properties.setProperty(&quot;kaptcha.textproducer.font.size&quot;, &quot;30&quot;);&#x2F;&#x2F; 字体大小        properties.setProperty(&quot;kaptcha.textproducer.font.color&quot;, &quot;0.0.0&quot;);&#x2F;&#x2F; 字体颜色        properties.setProperty(&quot;kaptcha.textproducer.char.string&quot;, &quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;);&#x2F;&#x2F; 字符范围        properties.setProperty(&quot;kaptcha.textproducer.char.length&quot;, &quot;4&quot;);&#x2F;&#x2F; 字符长度        properties.setProperty(&quot;kaptcha.noise.impl&quot;, &quot;com.google.code.kaptcha.impl.NoNoise&quot;);&#x2F;&#x2F; 验证码干扰因素        DefaultKaptcha kaptcha &#x3D; new DefaultKaptcha();        Config config &#x3D; new Config(properties);        &#x2F;&#x2F; 给kaptcha传入一些参数，参数封装进Config对象，Config对象传入Properties对象        &#x2F;&#x2F; Properties对象里存的都是key-value及Map,Map里存的就是参数        kaptcha.setConfig(config);        return kaptcha;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务启动 bean 被自动装配进容器里，通过容器得到一个Producer实例，实例有两个方法创建图片创建验证码</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116145842259.png" alt="image-20220116145842259"></p><p>getLoginPage方法的目的是给浏览器返回一个html，html里会包含一个图片的路径，浏览器会依据路径再次访问服务器，获得这个图片，因此要单独写一个请求，向浏览器返回验证码图片</p><p>在 LoginController.java 增加一个请求提供获取验证码的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(path &#x3D; &quot;&#x2F;kaptcha&quot;,method &#x3D; RequestMethod.GET)public void getKaptcha(HttpServletResponse response, HttpSession session)&#123;    &#x2F;&#x2F; 生成验证码    String text &#x3D; kaptchaProducer.createText(); &#x2F;&#x2F; 生成4位随机字符串    BufferedImage image &#x3D; kaptchaProducer.createImage(text); &#x2F;&#x2F; 利用字符串生成一个与之对应的图片    &#x2F;&#x2F; 将验证码存入session中    session.setAttribute(&quot;kaptcha&quot;,text);    &#x2F;&#x2F; 将图片输出给浏览器    response.setContentType(&quot;image&#x2F;png&quot;); &#x2F;&#x2F; 声明给浏览器返回的什么类型的数据    try &#123;        OutputStream os &#x3D; response.getOutputStream(); &#x2F;&#x2F; 从response中获取输出流        ImageIO.write(image,&quot;png&quot;,os);        &#x2F;&#x2F; 向浏览器输出图片的工具ImageIo，image:输出的图片，png:输出格式，os:输出流        &#x2F;&#x2F; 流不用关闭，整个response是由SpringMVC来维护的，会自动关闭    &#125; catch (IOException e) &#123;        logger.error(&quot;响应验证码失败&quot;+e.getMessage());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把验证码应用到 login.html 页面，并通过 js 来实现点击刷新验证码按钮来刷新验证码的功能（JS 部分知识）</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116143954545.png" alt="image-20220116143954545"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116145045619.png" alt="image-20220116145045619"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116145243941.png" alt="image-20220116145243941"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116145210414.png" alt="image-20220116145210414"></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话管理</title>
      <link href="/2022/01/15/niu-ke-xiang-mu-hui-hua-guan-li/"/>
      <url>/2022/01/15/niu-ke-xiang-mu-hui-hua-guan-li/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115113933803.png" alt="image-20220115113933803"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115083941854.png" alt="image-20220115083941854"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115084250343.png" alt="image-20220115084250343"></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115085041513.png" alt="image-20220115085041513"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115113707338.png" alt="image-20220115113707338"></p><h2 id="session-优点：数据存在服务端安全；缺点：有些内存上的压力"><a href="#session-优点：数据存在服务端安全；缺点：有些内存上的压力" class="headerlink" title="session 优点：数据存在服务端安全；缺点：有些内存上的压力"></a>session 优点：数据存在服务端安全；缺点：有些内存上的压力</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115115244393.png" alt="image-20220115115244393"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115152906928.png" alt="image-20220115152906928"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115155153663.png" alt="image-20220115155153663"></p><p>用户变多，服务器分布式部署</p><p>nginx：用于负载均衡</p><p>问题：第一次访问服务器①，生成session，第二次访问服务器③，就要重新生成session</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ol><li>设置负载均衡的策略：粘性session，根据 ip 固定访问某台服务器。问题：不能保证负载均衡</li><li>同步session，当一台服务器有了session 后，同步给其他的服务器，所有服务器的 session 都是统一的。问题：对服务器性能产生影响，服务器之间产生关联及耦合，对部署不友好</li><li>共享session ，多出一台服务器存储处理 session ，其他服务器向这台服务器获取 session 。问题：如果over ，其他服务器无法工作</li></ol><h2 id="主流方案："><a href="#主流方案：" class="headerlink" title="主流方案："></a>主流方案：</h2><p>会话数据存入数据库中，数据库作集群，传统关系型数据库是将数据存入硬盘里，没有存内存中性能好，因此用 nosql 数据库，使用Redis</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
            <tag> session </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发注册功能</title>
      <link href="/2022/01/15/niu-ke-xiang-mu-kai-fa-zhu-ce-gong-neng/"/>
      <url>/2022/01/15/niu-ke-xiang-mu-kai-fa-zhu-ce-gong-neng/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114130504396.png" alt="image-20220114130504396"></p><h2 id="访问注册页面：点击顶部区域内的链接，打开注册页面"><a href="#访问注册页面：点击顶部区域内的链接，打开注册页面" class="headerlink" title="访问注册页面：点击顶部区域内的链接，打开注册页面"></a>访问注册页面：点击顶部区域内的链接，打开注册页面</h2><h3 id="在controller包下新建LoginController"><a href="#在controller包下新建LoginController" class="headerlink" title="在controller包下新建LoginController"></a>在controller包下新建LoginController</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;&#x2F;** * @author giegie * @create 2022-01-14-13:41 *&#x2F;@Controllerpublic class LoginController &#123;    @RequestMapping(path &#x3D; &quot;&#x2F;register&quot;,method &#x3D; RequestMethod.GET) &#x2F;&#x2F; 设置访问路径和请求方式    public String getRegisterPage()&#123;        return &quot;&#x2F;site&#x2F;register&quot;; &#x2F;&#x2F; register是模板    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接着对register-html-模板进行设置，加入-thymeleaf-标签"><a href="#接着对register-html-模板进行设置，加入-thymeleaf-标签" class="headerlink" title="接着对register.html 模板进行设置，加入 thymeleaf 标签"></a>接着对register.html 模板进行设置，加入 thymeleaf 标签</h3><p>首先加入 thymeleaf 声明</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114135044987.png" alt="image-20220114135044987"></p><p>对头尾处的相对路径进行处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114135237723.png" alt="image-20220114135237723"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114135457763.png" alt="image-20220114135457763"></p><p>访问注册页面是通过首页 index页面的注册按钮点击跳转的，因此修改 index 页面的注册链接<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114140330315.png" alt="image-20220114140330315"></p><p>让首页顶部的代码在多个页面复用 </p><p>在header标签上增加一个属性及给这段代码起个名字，方便复用<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114140508490.png" alt="image-20220114140508490"></p><p>在另一个页面复用 index 页面的header<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114140902669.png" alt="image-20220114140902669"></p><h2 id="提交注册数据"><a href="#提交注册数据" class="headerlink" title="提交注册数据"></a>提交注册数据</h2><p>导包：用来判断字符串集合空值的情况（经常用到）<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114141840236.png" alt="image-20220114141840236"></p><p>配置文件里增加域名<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114142232050.png" alt="image-20220114142232050"></p><p>在 util 包下新建工具类 CommunityUtil<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114143842659.png" alt="image-20220114143842659"></p><h3 id="开始写Service-层业务"><a href="#开始写Service-层业务" class="headerlink" title="开始写Service 层业务"></a>开始写Service 层业务</h3><p>注入邮件的客户端（在注册的时候会发邮件），注入模板引擎<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114144222402.png" alt="image-20220114144222402"></p><p>发邮件时生成激活码，包含域名和项目名，因此要注入配置中的域名和项目名<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114145010787.png" alt="image-20220114145010787"></p><p>向controller返回map，包含处理的多个结果，若注册成功返回null，并发激活邮件给用户</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.service;import com.nowcoder.community.dao.UserMapper;import com.nowcoder.community.entity.User;import com.nowcoder.community.util.CommunityUtil;import com.nowcoder.community.util.MailClient;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.thymeleaf.TemplateEngine;import org.thymeleaf.context.Context;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.Random;&#x2F;** * @author giegie * @create 2022-01-12-9:52 *&#x2F;@Servicepublic class UserService &#123;    @Autowired    private UserMapper userMapper;    @Autowired    private MailClient mailClient;    @Autowired    private TemplateEngine templateEngine;    @Value(&quot;$&#123;community.path.domain&#125;&quot;) &#x2F;&#x2F; 通过表达式的方式取 key的值    private String domain;    @Value(&quot;$&#123;server.servlet.context-path&#125;&quot;)    private String contextPath;    public User findUserById(int id) &#123;        return userMapper.selectById(id);    &#125;    public Map&lt;String, Object&gt; register(User user) &#123; &#x2F;&#x2F; 将返回的多个结果封装到 Map中        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();        &#x2F;&#x2F; 空值处理        if (user &#x3D;&#x3D; null) &#123;            throw new IllegalArgumentException(&quot;参数不能为空&quot;);        &#125;        if (StringUtils.isBlank(user.getUsername())) &#123;            map.put(&quot;usernameMsg&quot;, &quot;账号不能为空&quot;);            return map;        &#125;        if (StringUtils.isBlank(user.getPassword())) &#123;            map.put(&quot;passwordMsg&quot;, &quot;密码不能为空&quot;);            return map;        &#125;        if (StringUtils.isBlank(user.getEmail())) &#123;            map.put(&quot;emailMsg&quot;, &quot;邮箱不能为空&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证账号        User u &#x3D; userMapper.selectByName(user.getUsername());        if (u !&#x3D; null)&#123;            map.put(&quot;usernameMsg&quot;,&quot;账号已存在&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证邮箱        u &#x3D; userMapper.selectByEmail(user.getEmail());        if (u !&#x3D; null)&#123;            map.put(&quot;emailMsg&quot;,&quot;该邮箱已被注册&quot;);            return map;        &#125;        &#x2F;&#x2F; 注册用户，将用户信息存到库里        user.setSalt(CommunityUtil.generateUUID().substring(0,5));        user.setPassword(CommunityUtil.md5(user.getPassword() + user.getSalt()));        user.setType(0);        user.setStatus(0);        user.setActivationCode(CommunityUtil.generateUUID());        user.setHeaderUrl(String.format(&quot;https:&#x2F;&#x2F;images.nowcoder.com&#x2F;head&#x2F;&amp;dt.png&quot;,new Random().nextInt(1000)));        user.setCreateTime(new Date());        userMapper.insertUser(user);        &#x2F;&#x2F; 激活邮件        Context context &#x3D; new Context();        context.setVariable(&quot;eamil&quot;,user.getEmail());        &#x2F;&#x2F; http:&#x2F;&#x2F;localhost:8080&#x2F;community&#x2F;activation&#x2F;101&#x2F;code        String url &#x3D; domain + contextPath + &quot;&#x2F;activation&#x2F;&quot;+user.getId() + &quot;&#x2F;&quot; + user.getActivationCode();        context.setVariable(&quot;url&quot;,url);        String content &#x3D; templateEngine.process(&quot;&#x2F;mail&#x2F;activation&quot;,context);        mailClient.sendMail(user.getEmail(),&quot;激活账号&quot;,content);                return map;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>邮件发送内容的 html 模板 activation.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://static.nowcoder.com/images/logo_87_87.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>牛客网-激活账号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;email&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxx@xxx.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>您好!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>您正在注册牛客网, 这是一封激活邮件, 请点击 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>此链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>,激活您的牛客账号!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller;import com.nowcoder.community.entity.User;import com.nowcoder.community.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import java.util.Map;&#x2F;** * @author giegie * @create 2022-01-14-13:41 *&#x2F;@Controllerpublic class LoginController &#123;    @Autowired    private UserService userService;    @RequestMapping(path &#x3D; &quot;&#x2F;register&quot;, method &#x3D; RequestMethod.GET)    public String getRegisterPage() &#123;        return &quot;&#x2F;site&#x2F;register&quot;;    &#125;    @RequestMapping(path &#x3D; &quot;register&quot;, method &#x3D; RequestMethod.POST)    public String register(Model model, User user) &#123;        Map&lt;String, Object&gt; map &#x3D; userService.register(user);        if (map &#x3D;&#x3D; null || map.isEmpty()) &#123;            model.addAttribute(&quot;msg&quot;,&quot;注册成功，我们已经向您的邮箱发送了一封激活邮件，请尽快激活&quot;);            model.addAttribute(&quot;target&quot;,&quot;&#x2F;index&quot;);            return &quot;&#x2F;site&#x2F;operate-result&quot;;        &#125;else&#123;            model.addAttribute(&quot;usernameMsg&quot;,map.get(&quot;usernameMsg&quot;));            model.addAttribute(&quot;passwordMsg&quot;,map.get(&quot;passwordMsg&quot;));            model.addAttribute(&quot;emailMsg&quot;,map.get(&quot;emailMsg&quot;));            return &quot;&#x2F;site&#x2F;register&quot;;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若注册成功跳转至 operate-result 页面，并在8秒后自动返回首页</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114233058282.png" alt="image-20220114233058282"></p><p>对 register.html页面作修改</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114233324477.png" alt="image-20220114233324477"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114233348793.png" alt="image-20220114233348793"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114233509371.png" alt="image-20220114233509371"></p><ol><li>判断账号是否存在，若已存在，提示：该账号已存在！，若不存在则不提示</li><li>若注册失败，输入框中仍显示输入的注册信息：用户名，密码，邮箱</li><li>注册失败，提示失败原因：用户已存在，邮箱已存在…</li></ol><h2 id="激活注册账号"><a href="#激活注册账号" class="headerlink" title="激活注册账号"></a>激活注册账号</h2><p>点击邮件中的链接，访问服务端的激活服务</p><p>在处理激活账号有三种情况：</p><ul><li>激活成功没有问题</li><li>链接点了多次，重复激活，要给个提示</li><li>激活码错误，失败</li></ul><h3 id="三种状态放到一个常量接口中"><a href="#三种状态放到一个常量接口中" class="headerlink" title="三种状态放到一个常量接口中"></a>三种状态放到一个常量接口中</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.util;&#x2F;** * @author giegie * @create 2022-01-14-23:49 *&#x2F;public interface CommunityConstant &#123;    &#x2F;**     * 激活成功     *&#x2F;    int ACTIVATION_SUCCESS &#x3D; 0;    &#x2F;**     * 重复激活     *&#x2F;    int ACTIVATION_PETEAT &#x3D; 1;    &#x2F;**     * 激活失败     *&#x2F;    int ACTIVATION_FAILURE &#x3D; 2;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="service-实现接口"><a href="#service-实现接口" class="headerlink" title="service 实现接口"></a>service 实现接口</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115002611171.png" alt="image-20220115002611171"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115002626723.png" alt="image-20220115002626723"></p><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115002837821.png" alt="image-20220115002837821"></p><p>引入路径<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115002936651.png" alt="image-20220115002936651"></p><h3 id="对登录页面作模板修改"><a href="#对登录页面作模板修改" class="headerlink" title="对登录页面作模板修改"></a>对登录页面作模板修改</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115003059394.png" alt="image-20220115003059394"></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/2022/01/14/git-shi-yong/"/>
      <url>/2022/01/14/git-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220113082458327.png" alt="image-20220113082458327"></p><p>进入目录</p><p>git init</p><p>git add 增加</p><p>git commit -m “注释语句” 提交</p><p>git status 看状态</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识spring</title>
      <link href="/2022/01/14/chu-shi-spring/"/>
      <url>/2022/01/14/chu-shi-spring/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220113195429108.png" alt="image-20220113195429108"></p><p>spring 管理的对象称为 bean</p><p> 若不用 IoC 自己管理对象，new对象A,对象B，A.set 使A和B产生联系，A调用B，缺点：A和B产生了耦合，项目规模变大，不易维护</p><p>Spring Container是IoC容器要装两份数据：① 需要向其提供bean的类型 ② 配置文件，配置描述bean之间的关系<br>会自动实例化Bean 然后被调用，bean 之间不会产生直接关系，它们之间的关系体现在配置文件的配置中，降低了耦合度</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220113195809413.png" alt="image-20220113195809413"></p><p>spring 应用运行启动，底层自动启动了tomcat，并创建了spring容器，容器会自动扫描某些包下的某些类，将这些Bean自动装配到容器中</p><p>CommunityApplication 这个类就是配置文件，注解@SpringBootApplication 标识的类就是配置文件</p><p><strong>进到@SpringBootApplication 底层</strong></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114080336197.png" alt="image-20220114080336197"></p><p>@SpringBootConfiguration 表示这个类是个配置文件</p><p>@EnableAutoConfiguration 表示启用自动配置</p><p>@ComponentScan 表示主键扫描，会自动扫描某些包下的某些bean，装配到容器里，扫描配置类所在的包以及子包下的bean，并且<br>这些bean上需要有像@Controller这样的注解，才能被扫描<br>和@Controller等价的注解有@Service@Repository@Component，都是由@Component 来实现的</p><p>如果开发业务组件用@Service标明，如果开发处理请求的组件用@Controller标识，如果开发数据库访问的组件用@Repository<br>如果开发的类在任何地方都能用，用@Component 通用</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114082620382.png" alt="image-20220114082620382"></p><p>①：加注解 @ContextConfiguration 使测试类启用 CommunityApplication 作为配置类</p><p>②：哪个类要得到容器，就实现 ApplicationContextAware 这个接口</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114083153895.png" alt="image-20220114083153895"></p><p>BeanFactory是容器的顶层接口</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114085343478.png" alt="image-20220114085343478"></p><p>@Autowired 注入<br>spring 容器将AlphaDao 注入到 alphaDao 属性中，直接使用这个属性就可以</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目（发送邮件）</title>
      <link href="/2022/01/14/niu-ke-xiang-mu-1/"/>
      <url>/2022/01/14/niu-ke-xiang-mu-1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114102208602.png" alt="image-20220114102208602"></p><h2 id="开启SMTP服务"><a href="#开启SMTP服务" class="headerlink" title="开启SMTP服务"></a>开启SMTP服务</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114122601574.png" alt="image-20220114122601574"></p><h2 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114122812314.png" alt="image-20220114122812314"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114123950892.png" alt="image-20220114123950892"></p><h2 id="邮箱参数配置"><a href="#邮箱参数配置" class="headerlink" title="邮箱参数配置"></a>邮箱参数配置</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114122954538.png" alt="image-20220114122954538"></p><p>password 处填写授权码</p><h2 id="使用-JavaMailSender-发送邮件"><a href="#使用-JavaMailSender-发送邮件" class="headerlink" title="使用 JavaMailSender 发送邮件"></a>使用 JavaMailSender 发送邮件</h2><p>community 包下 新建包util ，建类MailClient</p><p>JavaMailSender 是 Spring Email 的核心组件，负责发送邮件<br>MimeMessage 用于封装邮件的相关信息<br>MimeMessageHelper 用于辅助构建 MimeMessage 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.util;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMessageHelper;import org.springframework.stereotype.Component;import javax.mail.MessagingException;import javax.mail.internet.MimeMessage;&#x2F;** * @author giegie * @create 2022-01-14-10:23 *&#x2F;@Componentpublic class MailClient &#123;    private static final Logger logger &#x3D; LoggerFactory.getLogger(MailClient.class);    @Autowired    private JavaMailSender mailSender;    @Value(&quot;$&#123;spring.mail.username&#125;&quot;)    private String from;    public void sendMail(String to,String subject,String content)&#123;        try &#123;            MimeMessage message &#x3D; mailSender.createMimeMessage();            MimeMessageHelper helper &#x3D; new MimeMessageHelper(message);            helper.setFrom(from);            helper.setTo(to);            helper.setSubject(subject);            helper.setText(content,true);            mailSender.send(helper.getMimeMessage());        &#125; catch (MessagingException e) &#123;            logger.error(&quot;发送邮件失败&quot;+e.getMessage());        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建测试类 MailTests，使用 Thymeleaf 模板发送 HTML 邮件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community;import com.nowcoder.community.util.MailClient;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.ContextConfiguration;import org.thymeleaf.TemplateEngine;import org.thymeleaf.context.Context;&#x2F;** * @author giegie * @create 2022-01-14-10:41 *&#x2F;@SpringBootTest@ContextConfiguration(classes &#x3D; CommunityApplication.class)public class MailTests &#123;    @Autowired    private MailClient mailClient;    @Autowired    private TemplateEngine templateEngine;    @Test    public void testTextMail()&#123;        mailClient.sendMail(&quot;2075314587@qq.com&quot;,&quot;TEST&quot;,&quot;HELLO.&quot;);    &#125;    @Test    public void testHtmlMail()&#123;        Context context &#x3D; new Context();        context.setVariable(&quot;username&quot;,&quot;sunday&quot;);        String content &#x3D; templateEngine.process(&quot;&#x2F;mail&#x2F;demo&quot;, context);        System.out.println(content);        mailClient.sendMail(&quot;2075314587@qq.com&quot;,&quot;HTML&quot;,content);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114125012558.png" alt="image-20220114125012558"></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目调试技巧</title>
      <link href="/2022/01/12/xiang-mu-diao-shi-ji-qiao/"/>
      <url>/2022/01/12/xiang-mu-diao-shi-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112214338461.png" alt="image-20220112214338461"></p><h2 id="状态码："><a href="#状态码：" class="headerlink" title="状态码："></a>状态码：</h2><p>200：成功了</p><p>302：重定向</p><p>404：路径写错了</p><p>500：服务器在处理的过程中发生了问题</p><h2 id="打断点"><a href="#打断点" class="headerlink" title="打断点"></a>打断点</h2><p>F8：程序逐行向下执行</p><p>F7：进入当前行所调方法的内部</p><p>F9：程序向下执行直到执行到下一个断点为止</p><p>客户端断点调试</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112220911302.png" alt="image-20220112220911302"></p><p>F10：向下执行一行</p><p>F11：进入代码</p><p>F8：执行到底</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初学mybatis</title>
      <link href="/2022/01/12/mybatis/"/>
      <url>/2022/01/12/mybatis/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220111123249192.png" alt="image-20220111123249192"></p><h2 id="Mapper接口：UserMapper-java"><a href="#Mapper接口：UserMapper-java" class="headerlink" title="Mapper接口：UserMapper.java"></a>Mapper接口：UserMapper.java</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220111213801345.png" alt="image-20220111213801345"></p><h2 id="mapper映射器：user-mapper-xml"><a href="#mapper映射器：user-mapper-xml" class="headerlink" title="mapper映射器：user-mapper.xml"></a>mapper映射器：user-mapper.xml</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.nowcoder.community.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!--写UserMapper的权限定名，这个配置文件是为UserMapper服务的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        username,password,salt,email,type,status,activation_code,header_url,create_time <span class="token comment">&lt;!--定义查询的字段--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id,username,password,salt,email,type,status,activation_code,header_url,create_time    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--id:写对应的方法的名  resultType:返回类型--></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--引用的sql是selectFields--></span>        from user        where id = #&#123;id&#125; <span class="token comment">&lt;!--#&#123;id&#125; 引用方法的参数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from user        where username = #&#123;username&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByEmail<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from user        where email = #&#123;email&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--parameterType写插入的类型--></span>        insert into user (<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>)        values (#&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;,#&#123;email&#125;,#&#123;type&#125;,#&#123;status&#125;,#&#123;activationCode&#125;,#&#123;headerUrl&#125;,#&#123;createTime&#125;) <span class="token comment">&lt;!--对应的参数从User中来--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateStatus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user set status = #&#123;status&#125; where id = #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateHeader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user set header_Url = #&#123;headerUrl&#125; where id = #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updatePassword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user set password = #&#123;password&#125; where id = #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目</title>
      <link href="/2022/01/12/niu-ke-xiang-mu/"/>
      <url>/2022/01/12/niu-ke-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112082629721.png" alt="image-20220112082629721"></p><h1 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h1><h2 id="实体类（DiscussPost-java）"><a href="#实体类（DiscussPost-java）" class="headerlink" title="实体类（DiscussPost.java）"></a>实体类（DiscussPost.java）</h2><h2 id="entity包"><a href="#entity包" class="headerlink" title="entity包"></a>entity包</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112082907145.png" alt="image-20220112082907145"></p><h2 id="DAO接口（DiscussPostMapper-java）写方法"><a href="#DAO接口（DiscussPostMapper-java）写方法" class="headerlink" title="DAO接口（DiscussPostMapper.java）写方法"></a>DAO接口（DiscussPostMapper.java）写方法</h2><h2 id="dao包"><a href="#dao包" class="headerlink" title="dao包"></a>dao包</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.dao;import com.nowcoder.community.entity.DiscussPost;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Param;import java.util.List;&#x2F;** * @author giegie * @create 2022-01-11-22:24 *&#x2F;@Mapperpublic interface DiscussPostMapper &#123;    List&lt;DiscussPost&gt; selectDiscussPosts(int userId,int offset,int limit);    &#x2F;&#x2F; userId 首页查找时用不上，在个人主页中查找时使用    &#x2F;&#x2F;动态sql有时拼userId,有时不拼userId。考虑未来分页的可能    int selectDiscussPostRows(@Param(&quot;userId&quot;) int userId);&#x2F;&#x2F; 为了将来显示页码，查寻一共多少条数据    &#x2F;&#x2F; @Param(&quot;&quot;)注解用于给后面的参数取一个别名    &#x2F;&#x2F; 如果需要动态的拼一个条件，并且这个方法有且只有一个条件，这时这个参数之前就必须取别名    &#x2F;&#x2F; 如果只有一个参数，并且在&lt;if&gt;里使用，则必须加别名。&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mapper映射器（discusspost-mapper-xml）写对应方法的-sql-语句"><a href="#Mapper映射器（discusspost-mapper-xml）写对应方法的-sql-语句" class="headerlink" title="Mapper映射器（discusspost-mapper.xml）写对应方法的 sql 语句"></a>Mapper映射器（discusspost-mapper.xml）写对应方法的 sql 语句</h2><h2 id="resources资源包下的mapper包"><a href="#resources资源包下的mapper包" class="headerlink" title="resources资源包下的mapper包"></a>resources资源包下的mapper包</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.nowcoder.community.dao.DiscussPostMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id,user_id,title,content,type,status,create_time,comment_count,score    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectDiscussPosts<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DiscussPost<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from discuss_post        where status != 2 <span class="token comment">&lt;!--拉黑的不看--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId!=0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and user_id = #&#123;userId&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        order by type desc,create_time desc        limit #&#123;offset&#125;,#&#123;limit&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectDiscussPostRows<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select count(id)        from discuss_post        where status != 2        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId!=0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and user_id = #&#123;userId&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h1><h2 id="service包下DiscussPostService-java"><a href="#service包下DiscussPostService-java" class="headerlink" title="service包下DiscussPostService.java"></a>service包下DiscussPostService.java</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.service;import com.nowcoder.community.dao.DiscussPostMapper;import com.nowcoder.community.entity.DiscussPost;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;&#x2F;** * @author giegie * @create 2022-01-12-9:13 *&#x2F;@Servicepublic class DiscussPostService &#123;    @Autowired    private DiscussPostMapper discussPostMapper;    public List&lt;DiscussPost&gt; findDiscussPosts(int userId,int offset,int limit)&#123;        return discussPostMapper.selectDiscussPosts(userId,offset,limit);    &#125;    public int findDiscussPostRows(int userId)&#123;        return discussPostMapper.selectDiscussPostRows(userId);    &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="service包下UserService-java"><a href="#service包下UserService-java" class="headerlink" title="service包下UserService.java"></a>service包下UserService.java</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.service;import com.nowcoder.community.dao.UserMapper;import com.nowcoder.community.entity.User;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;&#x2F;** * @author giegie * @create 2022-01-12-9:52 *&#x2F;@Servicepublic class UserService &#123;    @Autowired    private UserMapper userMapper;    public User findUserById(int id)&#123;        return userMapper.selectById(id);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h1><h2 id="不支持分页"><a href="#不支持分页" class="headerlink" title="不支持分页"></a>不支持分页</h2><h3 id="controller包下HomeController"><a href="#controller包下HomeController" class="headerlink" title="controller包下HomeController"></a>controller包下HomeController</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller;import com.nowcoder.community.entity.DiscussPost;import com.nowcoder.community.entity.User;import com.nowcoder.community.service.DiscussPostService;import com.nowcoder.community.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;&#x2F;** * @author giegie * @create 2022-01-12-10:06 *&#x2F;@Controllerpublic class HomeController &#123;    @Autowired    private DiscussPostService discussPostService;    @Autowired    private UserService userService;    &#x2F;&#x2F;处理请求的方法，设置访问路径主页index，请求方式get    @RequestMapping(path&#x3D;&quot;&#x2F;index&quot;,method &#x3D; RequestMethod.GET)    public String getIndexPage(Model model)&#123;        &#x2F;&#x2F; 对象中的userId只是id,不是用户名        List&lt;DiscussPost&gt; list &#x3D; discussPostService.findDiscussPosts(0, 0, 10);        &#x2F;&#x2F; 根据userId查到user，再将数据组装一下，放到新的集合，返回给页面        &#x2F;&#x2F; 新的集合对象能够封装post和user对象        List&lt;Map&lt;String,Object&gt;&gt; discussPosts &#x3D; new ArrayList&lt;&gt;();        if (list!&#x3D;null)&#123;            for (DiscussPost post : list)&#123; &#x2F;&#x2F; 遍历，将两份数据都装到discussPosts中                Map&lt;String ,Object&gt; map &#x3D; new HashMap&lt;&gt;(); &#x2F;&#x2F; 实例化map对象                map.put(&quot;post&quot;,post); &#x2F;&#x2F; 装帖子                User user &#x3D; userService.findUserById(post.getUserId()); &#x2F;&#x2F; 从帖子中找用户id，再根据id查找用户                map.put(&quot;user&quot;,user); &#x2F;&#x2F; 装用户                discussPosts.add(map); &#x2F;&#x2F; 把map装到新的集合里            &#125;        &#125;        &#x2F;&#x2F; 将样本页面展现的结果装到model里        model.addAttribute(&quot;discussPosts&quot;,discussPosts);        return &quot;&#x2F;index&quot;; &#x2F;&#x2F; 返回的路径：templates下的index    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--指定使用的模板引擎--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, shrink-to-fit=no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://static.nowcoder.com/images/logo_87_87.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/css/global.css&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token comment">&lt;!--href里引用的文件通过thymeleaf模板帮助找的，固定到static下面找资源--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>牛客网-首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 帖子列表 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-unstyled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media pb-3 pt-3 mb-3 border-bottom<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map:$&#123;discussPosts&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--通过thymeleaf模板引擎循环输出li 每次循环得到一个map --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>site/profile.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.user.headerUrl&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-4 rounded-circle<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户头像<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-0 mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.post.title&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>备战春招，面试刷题跟他复习，一个月全搞定！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-secondary bg-primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.post.type==1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>置顶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-secondary bg-danger<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.post.status==1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>精华<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-muted font-size-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-3<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>寒江雪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span> 发布于 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#dates.format(map.post.createTime,<span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2019-04-15 15:32:18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>                                 <span class="token comment">&lt;!--#是引用工具--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline float-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline ml-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>赞 11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline ml-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline ml-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>回帖 7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="支持分页"><a href="#支持分页" class="headerlink" title="支持分页"></a>支持分页</h2><h3 id="在entity包下建一个实体类-Page-封装分页的相关信息"><a href="#在entity包下建一个实体类-Page-封装分页的相关信息" class="headerlink" title="在entity包下建一个实体类 Page 封装分页的相关信息"></a>在entity包下建一个实体类 Page 封装分页的相关信息</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.entity;&#x2F;** * @author giegie * @create 2022-01-12-14:00 *&#x2F;&#x2F;** * 封装分页相关的信息 *&#x2F;public class Page &#123;    &#x2F;&#x2F; 当前页码    private int current &#x3D; 1;    &#x2F;&#x2F; 显示上限    private int limit &#x3D; 10;    &#x2F;&#x2F; 数据总数(用于计算总页数)    private int rows;    &#x2F;&#x2F; 查询路径(用于复用分页链接)    private String path;&#x2F;&#x2F;省略get set方法    &#x2F;**     * 获取当前页的起始行     * @return     *&#x2F;    public int getOffset()&#123;        &#x2F;&#x2F; current * limit - limit 当前页*每页显示多少条数据 - 当前页数据条数        return (current - 1) * limit;    &#125;    &#x2F;**     * 获取总页数     * @return     *&#x2F;    public int getTotal()&#123;        &#x2F;&#x2F; rows &#x2F; limit [+1]总的行数&#x2F;每页显示多少条数据        if (rows % limit &#x3D;&#x3D; 0)&#123;            return rows &#x2F; limit;        &#125; else &#123;            return rows &#x2F; limit + 1;        &#125;    &#125;    &#x2F;**     * 获取起始页码     * @return     *&#x2F;    public int getFrom()&#123;        int from &#x3D; current - 2;        return from &lt; 1 ? 1 : from;    &#125;    &#x2F;**     * 获取结束页码     * @return     *&#x2F;    public int getTo()&#123;        int to &#x3D; current + 2;        int total &#x3D; getTotal();        return to &gt; total ? total : to;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HomeController-java增加分页相关的内容"><a href="#HomeController-java增加分页相关的内容" class="headerlink" title="HomeController.java增加分页相关的内容"></a>HomeController.java增加分页相关的内容</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112144726954.png" alt="image-20220112144726954"></p><h3 id="index-html-1"><a href="#index-html-1" class="headerlink" title="index.html"></a>index.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 分页 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-5<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;page.rows>0&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pagination justify-content-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;$&#123;page.path&#125;(current=1)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|page-item $&#123;page.current==1?<span class="token punctuation">'</span>disabled<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span>&#125;|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--如果是第一页,上一页就不可点 disabled--></span><span class="token comment">&lt;!--固定数据再拼上一个变量,静态值拼上一个动态值 用 |xxx|--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;$&#123;page.path&#125;(current=$&#123;page.current-1&#125;)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|page-item $&#123;i==page.current?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span>&#125;|<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i:$&#123;#numbers.sequence(page.from,page.to)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--生成一个从from到to的连续的数组,i变量引用每一个数字--></span><span class="token comment">&lt;!--页码点亮用active--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;i&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--i显示页码--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|page-item $&#123;page.current==page.total?<span class="token punctuation">'</span>disabled<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span>&#125;|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;$&#123;page.path&#125;(current=$&#123;page.current+1&#125;)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;$&#123;page.path&#125;(current=$&#123;page.total&#125;)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>末页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左神讲数据结构与算法</title>
      <link href="/2022/01/01/zuo-shen-jiang-shu-ju-jie-gou-yu-suan-fa/"/>
      <url>/2022/01/01/zuo-shen-jiang-shu-ju-jie-gou-yu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="左神讲解数据结构与算法基础（1）"><a href="#左神讲解数据结构与算法基础（1）" class="headerlink" title="左神讲解数据结构与算法基础（1）"></a>左神讲解数据结构与算法基础（1）</h1><h2 id="认识复杂度与简单排序"><a href="#认识复杂度与简单排序" class="headerlink" title="认识复杂度与简单排序"></a>认识复杂度与简单排序</h2><p><strong>异或</strong>运算-交换 a和b （运用<strong>交换律</strong>与<strong>结合律</strong>，相同为0，不同为1）</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220101085534503.png" alt="image-20220101085534503"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;一个数组中有两个数是奇数个，其余数是偶数个，求奇数个数的两数分别是多少int eor &#x3D; 0;for(int i &#x3D; 0 ; i &lt; arr.length ; i++)&#123;    eor ^&#x3D; arr[i];&#125;&#x2F;&#x2F;eor &#x3D; a ^ b&#x2F;&#x2F;eor !&#x3D; 0&#x2F;&#x2F;eor必然有一个位置上是1int rightOne &#x3D; eor &amp; (~eor + 1); &#x2F;&#x2F;提取出最右的1，常用的方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">int onlyOne &#x3D; 0;&#x2F;&#x2F;eor&#39;for(int cur : arr)&#123;    if((cur &amp; rightOne) &#x3D;&#x3D; 1)&#123;&#x2F;&#x2F;0或1都可        onlyOne ^&#x3D; cur;    &#125;&#125;System.out.println(&quot;一个数是：&quot;+onlyOne+&quot;另一个数是：&quot;+(onlyOne^eor));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="冒泡排序（O（n平方））"><a href="#冒泡排序（O（n平方））" class="headerlink" title="冒泡排序（O（n平方））"></a>冒泡排序（O（n平方））</h2><p><a href="http://javainterview.gitee.io/luffy/2021/09/01/11-%E7%AE%97%E6%B3%95/01.%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/">参考1</a>，<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.md">参考2</a>，<a href="https://www.runoob.com/w3cnote/bubble-sort.html">参考3</a></p><p>思路：从左往右，两两比较，大(小)放后面，第一次排序结束最大值(最小值)已经在数组末尾，n个数需要n-1趟</p><p>实现：两层for循环，外层控制比较的趟数，内层是比较的次数，每比较一趟后，比较次数-1</p><h2 id="选择排序（O（n平方））"><a href="#选择排序（O（n平方））" class="headerlink" title="选择排序（O（n平方））"></a>选择排序（O（n平方））</h2><p><a href="http://javainterview.gitee.io/luffy/2021/09/01/11-%E7%AE%97%E6%B3%95/01.%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/">参考1</a>，<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.md">参考2</a>，<a href="https://www.runoob.com/w3cnote/selection-sort.html">参考3</a></p><p>思路：从数组中选择最小元素，将它与数组的第一个元素交换位置。再从数组剩下的元素中选择出最小的元素，将它与数组的第二个元素交换位置。不断进行这样的操作，直到将整个数组排序。</p><p>实现：设第一个数是最小值，两层for循环，外层控制比较的趟数，内层找到当前趟数的最小值，与第一个数作比较，小于则进行交换</p><h2 id="插入排序（时间复杂度按最差情况来估计）"><a href="#插入排序（时间复杂度按最差情况来估计）" class="headerlink" title="插入排序（时间复杂度按最差情况来估计）"></a>插入排序（时间复杂度按最差情况来估计）</h2><p><a href="http://javainterview.gitee.io/luffy/2021/09/01/11-%E7%AE%97%E6%B3%95/01.%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/">参考1</a>，<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.md">参考2</a>，<a href="https://www.runoob.com/w3cnote/insertion-sort.html">参考3</a></p><p>思路：每次都将当前元素插入到左侧已经排序的数组中，使得插入之后左侧数组依然有序。</p><p>举例：数组 {3, 5, 2, 4, 1}，从小到大排序，3先不动，从5开始与3比较（5&gt;3不动）：3,5,2,4,1；</p><p>2与5比较（2&lt;5），5和2交换位置，2再与3比较（2&lt;3），3和2交换位置：2,3,5,4,1；</p><p>4与5比较（4&lt;5），5和4交换位置，3再与4比较（4&gt;3），4不再与前面数字比较：2,3,4,5,1;</p><p>1与5比较（1&lt;5），5和1交换位置，1再与4比较（1&lt;4），4和1交换位置，1再与3比较（1&lt;3），3和1交换为位置，1再与2比较（1&lt;2），2和1交换位置：1,2,3,4,5</p><h2 id="二分法：O（logN）"><a href="#二分法：O（logN）" class="headerlink" title="二分法：O（logN）"></a>二分法：O（logN）</h2><p><a href="https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">示例</a></p><p>一组有序数中查找一个数；一组有序数中查找最左侧&gt;=num的；一组有序数中查找最右侧&gt;=num的</p><p><strong>注意</strong>：并非有序才能二分</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql 用法</title>
      <link href="/2021/12/28/sql-yong-fa/"/>
      <url>/2021/12/28/sql-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>尝试通过typro来写博客，试试水，检查看看有没有什么问题</p><h2 id="sql-语句"><a href="#sql-语句" class="headerlink" title="sql 语句"></a>sql 语句</h2><ul><li><p>column_name as 别名</p></li><li><p>ROUND(colum_name,decimals) #ROUND()函数用于把数值字段舍入为指定的小数位</p></li><li><p>LIMIT N OFFSET M #limit 设定返回的记录数，offset指定select语句查询的数据偏移量</p></li><li><p>group by 后面有多个条件用 ”, “ 隔开，搭配 having 使用 而不是 where</p></li><li><p>order by 按什么顺序排序</p></li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20211228181259946.png"></p><ul><li>inner join 与 join一样</li></ul><pre class="line-numbers language-none"><code class="language-none">select column_name(s)FROM table1INNER JOIN table2ON table1.column_name&#x3D;table2.column_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不去重：union all</li></ul><h2 id="mysql-高级函数"><a href="#mysql-高级函数" class="headerlink" title="mysql 高级函数"></a>mysql 高级函数</h2><pre class="line-numbers language-none"><code class="language-none">if(expr,v1,v2)#如果表达式expr成立，返回结果v1;否做，返回结果v2.&#x2F;&#x2F; 牛客sql 26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">case expressionwhen condition then resultwhen 条件 then 结果...else 其他结果 #描述与输出不一致，以输出为准 end#牛客sql 27<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>附：<a href="https://www.cnblogs.com/chenduzizhong/p/9590741.html">case when用法</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">system.out.println(&quot;hello&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>123</p><p>456</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
