<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>牛客项目-网站数据统计</title>
      <link href="/2022/02/25/niu-ke-xiang-mu-wang-zhan-shu-ju-tong-ji/"/>
      <url>/2022/02/25/niu-ke-xiang-mu-wang-zhan-shu-ju-tong-ji/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220225102631675.png" alt="image-20220225102631675"></p><p>在 RedisKeyUtil 中补充 UV与DAU相关的 key </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">private static final String PREFIX_UV &#x3D; &quot;uv&quot;;private static final String PREFIX_DAU &#x3D; &quot;dau&quot;;&#x2F;&#x2F; 单日UVpublic static String getUVKey(String date)&#123;    return PREFIX_UV + SPLIT + date;&#125;&#x2F;&#x2F; 区间UV：将多日的UV合并public static String getUVKey(String startDate,String endDate)&#123;    return PREFIX_UV + SPLIT + startDate + SPLIT + endDate;&#125;&#x2F;&#x2F; 单日活跃用户public static String getDAUKey(String date)&#123;    return PREFIX_DAU + SPLIT + date;&#125;&#x2F;&#x2F; 区间活跃用户public static String getDAUKey(String startDate,String endDate)&#123;    return PREFIX_DAU + SPLIT + startDate + SPLIT + endDate;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class DataService &#123;    @Autowired    private RedisTemplate redisTemplate;    &#x2F;&#x2F; 日期格式化为：年月日    private SimpleDateFormat df &#x3D; new SimpleDateFormat(&quot;yyyyMMdd&quot;);    &#x2F;&#x2F; 统计数据有两个方面：（记录数据） 和 （查询数据）    &#x2F;&#x2F; 记录数据：在每次请求中，截获这个请求，并将相关数据记录到 Redis中    &#x2F;&#x2F; 将指定的IP计入UV    public void recordUV(String ip) &#123;        String redisKey &#x3D; RedisKeyUtil.getUVKey(df.format(new Date()));        redisTemplate.opsForHyperLogLog().add(redisKey, ip);    &#125;    &#x2F;&#x2F; 统计指定日期范围内的UV    public long calculateUV(Date start, Date end) &#123;        if (start &#x3D;&#x3D; null || end &#x3D;&#x3D; null) &#123;            throw new IllegalArgumentException(&quot;参数不能为空!&quot;);        &#125;        &#x2F;&#x2F; 整理该日期范围内的 key        List&lt;String&gt; keyList &#x3D; new ArrayList&lt;&gt;();        Calendar calendar &#x3D; Calendar.getInstance();        calendar.setTime(start);        while (!calendar.getTime().after(end)) &#123; &#x2F;&#x2F; 日期不大于end            String key &#x3D; RedisKeyUtil.getUVKey(df.format(calendar.getTime())); &#x2F;&#x2F; 获取key            keyList.add(key); &#x2F;&#x2F; 将key存入集合里            calendar.add(Calendar.DATE, 1); &#x2F;&#x2F; 日期向后移一位        &#125;        &#x2F;&#x2F; 合并这些数据        String redisKey &#x3D; RedisKeyUtil.getUVKey(df.format(start), df.format(end));        redisTemplate.opsForHyperLogLog().union(redisKey, keyList.toArray());        &#x2F;&#x2F; 返回统计结果        return redisTemplate.opsForHyperLogLog().size(redisKey);    &#125;    &#x2F;&#x2F; 将指定用户计入DAU    public void recordDAU(int userId) &#123;        String redisKey &#x3D; RedisKeyUtil.getDAUKey(df.format(new Date()));        redisTemplate.opsForValue().setBit(redisKey, userId, true);    &#125;    &#x2F;&#x2F; 统计指定日期范围内的DAU    public long calculateDAU(Date start, Date end) &#123;        if (start &#x3D;&#x3D; null || end &#x3D;&#x3D; null) &#123;            throw new IllegalArgumentException(&quot;参数不能为空!&quot;);        &#125;        &#x2F;&#x2F; 整理该日期范围内的 key        List&lt;byte[]&gt; keyList &#x3D; new ArrayList&lt;&gt;();        Calendar calendar &#x3D; Calendar.getInstance();        calendar.setTime(start);        while (!calendar.getTime().after(end)) &#123; &#x2F;&#x2F; 日期不大于end            String key &#x3D; RedisKeyUtil.getDAUKey(df.format(calendar.getTime()));            keyList.add(key.getBytes());            calendar.add(Calendar.DATE, 1); &#x2F;&#x2F; 日期向后移一位        &#125;        &#x2F;&#x2F; 进行OR运算        return (long) redisTemplate.execute(new RedisCallback() &#123;            @Override            public Object doInRedis(RedisConnection connection) throws DataAccessException &#123;                String redisKey &#x3D; RedisKeyUtil.getDAUKey(df.format(start), df.format(end));                connection.bitOp(RedisStringCommands.BitOperation.OR, &#x2F;&#x2F; 做OR运算                        redisKey.getBytes(), keyList.toArray(new byte[0][0]));                return connection.bitCount(redisKey.getBytes());            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为每次请求都要记录这个值，所以在拦截器里写，在 Interceptor 包下<strong>新建一个拦截器 DateInterceptor</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class DataInterceptor implements HandlerInterceptor &#123;    @Autowired    private DataService dataService;    @Autowired    private HostHolder hostHolder;    &#x2F;&#x2F; 在请求之初统计    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;        &#x2F;&#x2F; 统计UV        String ip &#x3D; request.getRemoteUser();        dataService.recordUV(ip);        &#x2F;&#x2F; 统计DAU        User user &#x3D; hostHolder.getUser();        if (user !&#x3D; null) &#123;            dataService.recordDAU(user.getId());        &#125;        return true;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 WebMvcConfig 中<strong>配置拦截器</strong></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220225142027107.png" alt="image-20220225142027107"></p><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><p>展现数据 在 Controller 包下新建一个类 DateController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class DateController &#123;    @Autowired    private DataService dataService;    &#x2F;&#x2F; 统计页面    @RequestMapping(path &#x3D; &quot;&#x2F;data&quot;, method &#x3D; &#123;RequestMethod.GET, RequestMethod.POST&#125;)    public String getDatePage() &#123;        return &quot;&#x2F;site&#x2F;admin&#x2F;data&quot;;    &#125;    &#x2F;&#x2F; 统计网站UV    @RequestMapping(path &#x3D; &quot;&#x2F;data&#x2F;uv&quot;, method &#x3D; RequestMethod.POST)    &#x2F;&#x2F; 页面上传的是一个日期的字符串，默认是不好转的，服务器也不知道传的是什么格式    &#x2F;&#x2F; 所以需要通过注解 @DateTimeFormat(pattern &#x3D; &quot;yyyy-MM-dd&quot;) 告诉服务器传的是什么日期格式    public String getUV(@DateTimeFormat(pattern &#x3D; &quot;yyyy-MM-dd&quot;) Date start,                        @DateTimeFormat(pattern &#x3D; &quot;yyyy-MM-dd&quot;) Date end, Model model) &#123;        long uv &#x3D; dataService.calculateUV(start, end); &#x2F;&#x2F; 计算统计结果        model.addAttribute(&quot;uvResult&quot;,uv); &#x2F;&#x2F; 将统计的结果传个模板        &#x2F;&#x2F; 显示统计结果时，依然显示日期，因此要将日期再传给模板        model.addAttribute(&quot;uvStartDate&quot;,start);        model.addAttribute(&quot;uvEndDate&quot;,end);        &#x2F;&#x2F; 可以直接返回模板，模板返回给 DispatcherServlet,DispatcherServlet让模板做后续处理&#x2F;&#x2F;        return &quot;&#x2F;site&#x2F;admin&#x2F;date&quot;;        &#x2F;&#x2F; 也可以转发,forward方法声明当前方法只能把整个请求处理一半，还需要另外一个方法继续处理请求        &#x2F;&#x2F; 另外一个方法也是和它平级的能够处理请求的，而不是模板        return &quot;forward:&#x2F;data&quot;;    &#125;    &#x2F;&#x2F; 统计活跃用户    @RequestMapping(path &#x3D; &quot;&#x2F;data&#x2F;dau&quot;, method &#x3D; RequestMethod.POST)    &#x2F;&#x2F; 页面上传的是一个日期的字符串，默认是不好转的，服务器也不知道传的是什么格式    &#x2F;&#x2F; 所以需要通过注解 @DateTimeFormat(pattern &#x3D; &quot;yyyy-MM-dd&quot;) 告诉服务器传的是什么日期格式    public String getDAU(@DateTimeFormat(pattern &#x3D; &quot;yyyy-MM-dd&quot;) Date start,                        @DateTimeFormat(pattern &#x3D; &quot;yyyy-MM-dd&quot;) Date end, Model model) &#123;        long dau &#x3D; dataService.calculateDAU(start, end); &#x2F;&#x2F; 计算统计结果        model.addAttribute(&quot;dauResult&quot;,dau); &#x2F;&#x2F; 将统计的结果传个模板        &#x2F;&#x2F; 显示统计结果时，依然显示日期，因此要将日期再传给模板        model.addAttribute(&quot;dauStartDate&quot;,start);        model.addAttribute(&quot;dauEndDate&quot;,end);        &#x2F;&#x2F; 可以直接返回模板，模板返回给 DispatcherServlet,DispatcherServlet让模板做后续处理&#x2F;&#x2F;        return &quot;&#x2F;site&#x2F;admin&#x2F;date&quot;;        &#x2F;&#x2F; 也可以转发,forward方法声明当前方法只能把整个请求处理一半，还需要另外一个方法继续处理请求        &#x2F;&#x2F; 另外一个方法也是和它平级的能够处理请求的，而不是模板        return &quot;forward:&#x2F;data&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="页面处理"><a href="#页面处理" class="headerlink" title="页面处理"></a>页面处理</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220225195723223.png" alt="image-20220225195723223"></p><h2 id="权限处理"><a href="#权限处理" class="headerlink" title="权限处理"></a>权限处理</h2><p>只有管理员能操作，在SecurityConfig中增加对应的权限管理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220225195914362.png" alt="image-20220225195914362"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UV </tag>
            
            <tag> DAU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-置顶、加精、删除</title>
      <link href="/2022/02/25/niu-ke-xiang-mu-zhi-ding-jia-jing-shan-chu/"/>
      <url>/2022/02/25/niu-ke-xiang-mu-zhi-ding-jia-jing-shan-chu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220224164457653.png" alt="image-20220224164457653"></p><p>导包,thymeleaf security </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-springsecurity5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h2><p>在 DiscussPostMapper 中增加两个方法，更改帖子的类型和状态</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">int updateType(int id,int type);int updateStatus(int id,int status);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 discusspost-mapper 中增加对应的 sql 处理</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update discuss_post set type = #&#123;type&#125; where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateStatus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update discuss_post set status = #&#123;status&#125; where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><p>在 DiscussPostService 中增加对应的处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public int updateType(int id,int type)&#123;    return discussPostMapper.updateType(id,type);&#125;public int updateStatus(int id,int status)&#123;    return discussPostMapper.updateStatus(id,status);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><p>在 DiscussPostController 中增加 置顶、加精、删除的处理请求</p><h3 id="置顶操作"><a href="#置顶操作" class="headerlink" title="置顶操作"></a>置顶操作</h3><p>更改帖子类型后，要触发发帖事件，将帖子存入ES服务器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 置顶@RequestMapping(path &#x3D; &quot;&#x2F;top&quot;,method &#x3D; RequestMethod.POST)@ResponseBodypublic String setTop(int id)&#123;    discussPostService.updateType(id,1);    &#x2F;&#x2F; 触发发帖事件，将新发布的帖子存到ES服务器里    Event event &#x3D; new Event()            .setTopic(TOPIC_PUBLISH) &#x2F;&#x2F; 设置主题            .setUserId(hostHolder.getUser().getId()) &#x2F;&#x2F; 谁触发了这个事件            .setEntityType(ENTITY_TYPE_POST) &#x2F;&#x2F; 事件是关于哪个实体类型的            .setEntityId(id); &#x2F;&#x2F; 帖子的id    eventProducer.fireEvent(event); &#x2F;&#x2F; 触发这个事件    return CommunityUtil.getJSONString(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加精操作（同上操作）"><a href="#加精操作（同上操作）" class="headerlink" title="加精操作（同上操作）"></a>加精操作（同上操作）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 加精@RequestMapping(path &#x3D; &quot;&#x2F;wonderful&quot;,method &#x3D; RequestMethod.POST)@ResponseBodypublic String setWonderful(int id)&#123;    discussPostService.updateStatus(id,1);    &#x2F;&#x2F; 触发发帖事件，将新发布的帖子存到ES服务器里    Event event &#x3D; new Event()            .setTopic(TOPIC_PUBLISH) &#x2F;&#x2F; 设置主题            .setUserId(hostHolder.getUser().getId()) &#x2F;&#x2F; 谁触发了这个事件            .setEntityType(ENTITY_TYPE_POST) &#x2F;&#x2F; 事件是关于哪个实体类型的            .setEntityId(id); &#x2F;&#x2F; 帖子的id    eventProducer.fireEvent(event); &#x2F;&#x2F; 触发这个事件    return CommunityUtil.getJSONString(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>更改帖子状态后，要触发删帖事件，将帖子从ES服务器中删除</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 删帖@RequestMapping(path &#x3D; &quot;&#x2F;delete&quot;,method &#x3D; RequestMethod.POST)@ResponseBodypublic String setDelete(int id)&#123;    discussPostService.updateStatus(id,2);    &#x2F;&#x2F; 触发删帖事件，将帖子从ES服务器中删除    Event event &#x3D; new Event()            .setTopic(TOPIC_DELETE) &#x2F;&#x2F; 设置主题            .setUserId(hostHolder.getUser().getId()) &#x2F;&#x2F; 谁触发了这个事件            .setEntityType(ENTITY_TYPE_POST) &#x2F;&#x2F; 事件是关于哪个实体类型的            .setEntityId(id); &#x2F;&#x2F; 帖子的id    eventProducer.fireEvent(event); &#x2F;&#x2F; 触发这个事件    return CommunityUtil.getJSONString(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于之前没有删帖事件，所以先在 CommunityConstant 中增加一个删帖的主题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * 主题：删帖 *&#x2F;String TOPIC_DELETE &#x3D; &quot;delete&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为删帖事件是新加的事件，之前没有处理过，所以要在消费者里，将这个事件做消费处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 消费删帖事件@KafkaListener(topics &#x3D; &#123;TOPIC_DELETE)public void handleDeleteMessage(ConsumerRecord record)&#123;    if (record &#x3D;&#x3D; null || record.value() &#x3D;&#x3D; null) &#123;        logger.error(&quot;消息的内容为空！&quot;);        return;    &#125;    Event event &#x3D; JSONObject.parseObject(record.value().toString(), Event.class); &#x2F;&#x2F; 接收json字符串，以及对应的具体类型    if (event &#x3D;&#x3D; null) &#123;        logger.error(&quot;消息的格式错误！&quot;);        return;    &#125;        elasticsearchService.deleteDiscussPost(event.getEntityId());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="页面处理"><a href="#页面处理" class="headerlink" title="页面处理"></a>页面处理</h2><p>在 discuss-detail 中对置顶、加精、删除做处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220224212648526.png" alt="image-20220224212648526"></p><p>异步请求，对JS 做处理</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 页面加载完以后，调用该函数</span>    <span class="token comment">// 声明了点这三个按钮，分别调用这三个方法</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#topBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>setTop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#wonderfulBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>setWonderful<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#deleteBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>setDelete<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">like</span><span class="token punctuation">(</span><span class="token parameter">btn<span class="token punctuation">,</span> entityType<span class="token punctuation">,</span> entityId<span class="token punctuation">,</span> entityUserId<span class="token punctuation">,</span> postId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//第一个参代表超链接(按钮)</span>    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span> <span class="token comment">// 向服务器发送异步请求</span>        <span class="token constant">CONTEXT_PATH</span> <span class="token operator">+</span> <span class="token string">"/like"</span><span class="token punctuation">,</span> <span class="token comment">// 功能的访问路径</span>        <span class="token punctuation">&#123;</span><span class="token string">"entityType"</span><span class="token operator">:</span> entityType<span class="token punctuation">,</span> <span class="token string">"entityId"</span><span class="token operator">:</span> entityId<span class="token punctuation">,</span> <span class="token string">"entityUserId"</span><span class="token operator">:</span> entityUserId<span class="token punctuation">,</span> <span class="token string">"postId"</span><span class="token operator">:</span> postId<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 携带的参数</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回的字符串转为js对象</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 判断code==0表示成功</span>                <span class="token comment">// 通过传进来的按钮可以得到下级的b标签和i标签，获取子节点</span>                <span class="token function">$</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>likeCount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 改变赞里面的数量，改字,赞还是已赞</span>                <span class="token function">$</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>likeStatus <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'已赞'</span> <span class="token operator">:</span> <span class="token string">'赞'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 置顶</span><span class="token keyword">function</span> <span class="token function">setTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 发出异步的post请求访问服务器传参</span>    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>        <span class="token constant">CONTEXT_PATH</span> <span class="token operator">+</span> <span class="token string">"/discuss/top"</span><span class="token punctuation">,</span> <span class="token comment">// 路径</span>        <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#postId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 参数</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 处理响应过来的结果</span>            data <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结果是一个普通的字符串，但是满足JSON格式，可以解析成JS对象</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 置顶按钮点过后，要设置成不可用，不能再点第二次</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#topBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span><span class="token string">"disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// attr：按钮属性</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 失败了给个提示</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 加精</span><span class="token keyword">function</span> <span class="token function">setWonderful</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 发出异步的post请求访问服务器传参</span>    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>        <span class="token constant">CONTEXT_PATH</span> <span class="token operator">+</span> <span class="token string">"/discuss/wonderful"</span><span class="token punctuation">,</span> <span class="token comment">// 路径</span>        <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#postId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 参数</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 处理响应过来的结果</span>            data <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结果是一个普通的字符串，但是满足JSON格式，可以解析成JS对象</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 加精按钮点过后，要设置成不可用，不能再点第二次</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#wonderfulBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span><span class="token string">"disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// attr：按钮属性</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 失败了给个提示</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除</span><span class="token keyword">function</span> <span class="token function">setDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 发出异步的post请求访问服务器传参</span>    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>        <span class="token constant">CONTEXT_PATH</span> <span class="token operator">+</span> <span class="token string">"/discuss/delete"</span><span class="token punctuation">,</span> <span class="token comment">// 路径</span>        <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#postId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 参数</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 处理响应过来的结果</span>            data <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结果是一个普通的字符串，但是满足JSON格式，可以解析成JS对象</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 删除按钮点过后，跳转到首页</span>                location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">CONTEXT_PATH</span> <span class="token operator">+</span> <span class="token string">"/index"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 失败了给个提示</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小处理，如果已经 置顶、加精或删除，要使其按钮状态为不可用</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220224213131692.png" alt="image-20220224213131692"></p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p>在 SecurityConfig 中增加权限处理</p><p>只有版主有置顶和加精的权限，只有管理员有删除的权限</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220224215044575.png" alt="image-20220224215044575"></p><h2 id="按钮显示"><a href="#按钮显示" class="headerlink" title="按钮显示"></a>按钮显示</h2><p>在页面头部增加 xmlns:sec….，只有版主才能看到置顶和加精，只有管理员才能看到删除，没有对应权限的看不见</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220224215659783.png" alt="image-20220224215659783"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220224215546166.png" alt="image-20220224215546166"></p><h2 id="思考：权限管理包括两个层面"><a href="#思考：权限管理包括两个层面" class="headerlink" title="思考：权限管理包括两个层面"></a>思考：权限管理包括两个层面</h2><ol><li>服务端层面，能够真正过滤掉没有权限的用户，不让其访问这个功能</li><li>页面上，友好点，不能访问就别看见</li></ol>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-权限控制</title>
      <link href="/2022/02/24/niu-ke-xiang-mu-quan-xian-kong-zhi/"/>
      <url>/2022/02/24/niu-ke-xiang-mu-quan-xian-kong-zhi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220223110930576.png" alt="image-20220223110930576"></p><p>1.导包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.使原来的拦截器不生效，在配置中注释掉原来的配置</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220223105917945.png" alt="image-20220223105917945"></p><p>3.设置常量</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220223111403564.png" alt="image-20220223111403564"></p><p>4.配置 security (与授权有关)</p><p>新增配置类 SecurityConfig 继承 父类WebSecurityConfigurerAdapter 并实现常量接口</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220223111726741.png" alt="image-20220223111726741"></p><p>重写父类的三个方法</p><p>绕过第二个方法认证规则，因为之前已经写过相关的认证方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter implements CommunityConstant &#123;    &#x2F;&#x2F; 忽略对静态资源的拦截    @Override    public void configure(WebSecurity web) throws Exception &#123;        web.ignoring().antMatchers(&quot;&#x2F;resources&#x2F;**&quot;);    &#125;    @Override    protected void configure(HttpSecurity http) throws Exception &#123;        &#x2F;&#x2F; 授权        http.authorizeRequests()                .antMatchers(                        &quot;&#x2F;user&#x2F;setting&quot;,                        &quot;&#x2F;user&#x2F;upload&quot;,                        &quot;&#x2F;discuss&#x2F;add&quot;,                        &quot;&#x2F;comment&#x2F;add&#x2F;**&quot;,                        &quot;&#x2F;letter&#x2F;**&quot;,                        &quot;&#x2F;notice&#x2F;**&quot;,                        &quot;&#x2F;like&quot;,                        &quot;&#x2F;follow&quot;,                        &quot;&#x2F;unfollow&quot;                )                .hasAnyAuthority(                        AUTHORITY_USER,                        AUTHORITY_ADMIN,                        AUTHORITY_MODERATOR                )                .anyRequest().permitAll()                .and().csrf().disable();        &#x2F;&#x2F; 权限不够时的处理        http.exceptionHandling()                .authenticationEntryPoint(new AuthenticationEntryPoint() &#123;                    &#x2F;&#x2F; 没有登录时的处理                    &#x2F;&#x2F; 普通请求，跳转登录页面；异步请求，返回JSON字符串给个提示                    @Override                    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException e) throws IOException, ServletException &#123;                        String xRequestedWith &#x3D; request.getHeader(&quot;x-requested-with&quot;);                        if (&quot;XMLHttpRequest&quot;.equals(xRequestedWith))&#123; &#x2F;&#x2F; 判断是不是异步请求                            response.setContentType(&quot;application&#x2F;plain;charset&#x3D;utf-8&quot;); &#x2F;&#x2F; 给浏览器响应JSON字符串                            PrintWriter writer &#x3D; response.getWriter();                            writer.write(CommunityUtil.getJSONString(403,&quot;你还没有登录！&quot;)); &#x2F;&#x2F; 向前台返回字符串                        &#125; else &#123;                            response.sendRedirect(request.getContextPath() + &quot;&#x2F;login&quot;); &#x2F;&#x2F; 普通请求，重定向到登录页面                        &#125;                    &#125;                &#125;)                .accessDeniedHandler(new AccessDeniedHandler() &#123;                    &#x2F;&#x2F; 登录权限不足时的处理                    @Override                    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException &#123;                        String xRequestedWith &#x3D; request.getHeader(&quot;x-requested-with&quot;);                        if (&quot;XMLHttpRequest&quot;.equals(xRequestedWith))&#123; &#x2F;&#x2F; 判断是不是异步请求                            response.setContentType(&quot;application&#x2F;plain;charset&#x3D;utf-8&quot;); &#x2F;&#x2F; 给浏览器响应JSON字符串                            PrintWriter writer &#x3D; response.getWriter();                            writer.write(CommunityUtil.getJSONString(403,&quot;你没有访问此功能的权限！&quot;)); &#x2F;&#x2F; 向前台返回字符串                        &#125; else &#123;                            response.sendRedirect(request.getContextPath() + &quot;&#x2F;denied&quot;); &#x2F;&#x2F; 普通请求，重定向到登录页面                        &#125;                    &#125;                &#125;);        &#x2F;&#x2F; Security底层默认会拦截&#x2F;logout请求，进行退出管理        &#x2F;&#x2F; 覆盖它默认的逻辑，才能执行我们自己的退出代码        http.logout().logoutUrl(&quot;&#x2F;securitylogout&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在HomeController中增加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 拒绝访问时的提示页面@RequestMapping(path &#x3D; &quot;&#x2F;denied&quot;, method &#x3D; RequestMethod.GET)public String getDeniedPage() &#123;    return &quot;&#x2F;error&#x2F;404&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在UserService中补充方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 返回用户的权限，因为一个用户可能有多个权限，所以返回的是一个集合&#x2F;&#x2F; GrantedAuthority 是一个接口，集合中装它的实现类public Collection&lt;? extends GrantedAuthority&gt; getAuthorities(int userId)&#123;    User user &#x3D; this.findUserById(userId);    List&lt;GrantedAuthority&gt; list &#x3D; new ArrayList&lt;&gt;();    list.add(new GrantedAuthority() &#123; &#x2F;&#x2F; 实现接口里带的方法        @Override        public String getAuthority() &#123; &#x2F;&#x2F; 每一个 GrantedAuthority 通过这个方法封装一个权限，多个GrantedAuthority 代表多个权限            switch (user.getType()) &#123;                case 1:                    return AUTHORITY_ADMIN;                case 2:                    return AUTHORITY_MODERATOR;                default:                    return AUTHORITY_USER;            &#125;        &#125;    &#125;);    return list;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 LoginTicketInterceptor 中补充，将认证结果添加到了SecurityContextHolder里</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220223193628990.png" alt="image-20220223193628990"></p><p>清理保存权限</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220223193954083.png" alt="image-20220223193954083"></p><p>退出时，在LoginController中清理认证的结果</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220223194354194.png" alt="image-20220223194354194"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Spring Security</title>
      <link href="/2022/02/23/chu-shi-spring-security/"/>
      <url>/2022/02/23/chu-shi-spring-security/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220221211029884.png" alt="image-20220221211029884"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220221214732504.png" alt="image-20220221214732504"></p><h1 id="Springsecuritydemo"><a href="#Springsecuritydemo" class="headerlink" title="Springsecuritydemo"></a>Springsecuritydemo</h1><p>已引入security包，权限控制就生效</p><p>先对 user 实体类做处理，用户具备哪些权限（type字段），这里一个用户具备一个权限，比较简单</p><p>将来用 security 做授权时，需要的不是 type ，是一个字符串，字符串能明确表达权限的含义，需要定义这个字符串，让 User 实现 UserDetails 接口，并实现相应的方法</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220222194035818.png" alt="image-20220222194035818"></p><h2 id="基本准备工作"><a href="#基本准备工作" class="headerlink" title="基本准备工作"></a>基本准备工作</h2><p>对 user 实体类做处理，实现 UserDetails 接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; true:账号未过期@Overridepublic boolean isAccountNonExpired() &#123;    return true;&#125;&#x2F;&#x2F; true:账号未锁定@Overridepublic boolean isAccountNonLocked() &#123;    return true;&#125;&#x2F;&#x2F; true:凭证未过期，凭证（登录后认证的一个结果）@Overridepublic boolean isCredentialsNonExpired() &#123;    return true;&#125;&#x2F;&#x2F; true:账号可用@Overridepublic boolean isEnabled() &#123;    return true;&#125;&#x2F;&#x2F; 返回用户的权限，因为一个用户可能有多个权限，所以返回的是一个集合&#x2F;&#x2F; GrantedAuthority 是一个接口，集合中装它的实现类@Overridepublic Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;    List&lt;GrantedAuthority&gt; list &#x3D; new ArrayList&lt;&gt;();    list.add(new GrantedAuthority()&#123; &#x2F;&#x2F; 实现接口里带的方法        @Override        public String getAuthority() &#123; &#x2F;&#x2F; 每一个 GrantedAuthority 通过这个方法封装一个权限，多个GrantedAuthority 代表多个权限            switch (type) &#123;                case 1:                    return &quot;ADMIN&quot;;                default:                    return &quot;USER&quot;;            &#125;        &#125;    &#125;);    return list;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对 UserService 做处理，实现 UserDetailsService 接口，实现它的方法 loadUserByUsername 根据 username 查用户</p><p>该接口是Security底层的一个接口，Security 在做认证、检查登录情况时，需要用到这个接口，自己做也一样 findByName</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class UserService implements UserDetailsService &#123;    @Autowired    private UserMapper userMapper;    public User findUserByName(String username) &#123;        return userMapper.selectByName(username);    &#125;    @Override    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;        return this.findUserByName(username);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写配置类"><a href="#写配置类" class="headerlink" title="写配置类"></a>写配置类</h2><p>SpringSecurity 底层依赖 Filter 拦截大量请求</p><p>继承 WebSecurityConfigurerAdapter 父类，重写它的方法</p><p>一点登录按钮，security 就能捕获到这个请求，能够拦截到这个请求，当发现它是一个登录的请求，就会调用  AuthenticationProvider 接口及方法去做登录认证，认证结果会存到 UsernamePasswordAuthenticationToken 对象里，相关信息在授权时会用到</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;    @Autowired    private UserService userService;    @Override    public void configure(WebSecurity web) throws Exception &#123;        &#x2F;&#x2F; 忽略 resources 路径下所有的资源，静态资源不需要拦截        web.ignoring().antMatchers(&quot;&#x2F;resources&#x2F;**&quot;);    &#125;    &#x2F;&#x2F; 该方法内部主要做认证    &#x2F;&#x2F; AuthenticationManager:认证的核心接口    &#x2F;&#x2F; AuthenticationManagerBuilder:是一个工具类用来构造这个接口AuthenticationManager的实例    &#x2F;&#x2F; ProviderManager:AuthenticationManager接口的默认实现类    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;        &#x2F;&#x2F; 内置的认证规则        &#x2F;&#x2F; auth.userDetailsService(userService).passwordEncoder(new Pbkdf2PasswordEncoder(&quot;12345&quot;)); &#x2F;&#x2F; 与当前系统不匹配，salt不是固定一个值        &#x2F;&#x2F; 自定义认证规则        &#x2F;&#x2F; AuthenticationProvider：ProviderManager持有一组AuthenticationProvider,每个AuthenticationProvider负责一种认证        &#x2F;&#x2F; 委托模式：ProviderManager将认证委托给AuthenticationProvider.        auth.authenticationProvider(new AuthenticationProvider() &#123; &#x2F;&#x2F; 给builder对象传入一个 AuthenticationProvider主键，在这个接口里实现一些逻辑            &#x2F;&#x2F; Authentication:用于封装认证信息的接口,不同的实现类代表不同类型的认证信息            @Override            public Authentication authenticate(Authentication authentication) throws AuthenticationException &#123;                String username &#x3D; authentication.getName();                String password &#x3D; (String) authentication.getCredentials();                User user &#x3D; userService.findUserByName(username);                if (user &#x3D;&#x3D; null) &#123;                    throw new UsernameNotFoundException(&quot;账号不存在&quot;);                &#125;                password &#x3D; CommunityUtil.md5(password + user.getSalt());                if (!user.getPassword().equals(password)) &#123;                    throw new BadCredentialsException(&quot;密码不正确&quot;);                &#125;                &#x2F;&#x2F; 源码解读                &#x2F;&#x2F; principal:主要信息（一般是user）; credentials:证书（账号密码模式下，一般填密码）; authorities:权限                return new UsernamePasswordAuthenticationToken(user, user.getPassword(), user.getAuthorities());            &#125;            &#x2F;&#x2F; 当前的AuthenticationProvider支持哪种类型的认证            @Override            public boolean supports(Class&lt;?&gt; aClass) &#123;                &#x2F;&#x2F; UsernamePasswordAuthenticationToken：Authentication接口的常用的实现类                return UsernamePasswordAuthenticationToken.class.equals(aClass);            &#125;        &#125;);    &#125;    &#x2F;&#x2F; 做授权处理    @Override    protected void configure(HttpSecurity http) throws Exception &#123;        &#x2F;&#x2F; 登录相关的配置        http.formLogin()                .loginPage(&quot;&#x2F;loginpage&quot;)                .loginProcessingUrl(&quot;&#x2F;login&quot;)                .successHandler(new AuthenticationSuccessHandler() &#123;                    @Override                    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException &#123;                        response.sendRedirect(request.getContextPath() + &quot;&#x2F;index&quot;);                    &#125;                &#125;)                .failureHandler(new AuthenticationFailureHandler() &#123;                    @Override                    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException e) throws IOException, ServletException &#123;                        request.setAttribute(&quot;error&quot;, e.getMessage());                        request.getRequestDispatcher(&quot;&#x2F;loginpage&quot;).forward(request, response);                    &#125;                &#125;);        &#x2F;&#x2F; 退出相关配置        http.logout()                .logoutUrl(&quot;&#x2F;logout&quot;)                .logoutSuccessHandler(new LogoutSuccessHandler() &#123;                    @Override                    public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException &#123;                        response.sendRedirect(request.getContextPath() + &quot;&#x2F;index&quot;);                    &#125;                &#125;);        &#x2F;&#x2F; 授权配置        http.authorizeRequests()                .antMatchers(&quot;&#x2F;letter&quot;).hasAnyAuthority(&quot;USER&quot;,&quot;ADMIN&quot;)                .antMatchers(&quot;&#x2F;admin&quot;).hasAnyAuthority(&quot;ADMIN&quot;)                .and().exceptionHandling().accessDeniedPage(&quot;&#x2F;denied&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>security 要求退出必须产生post请求</p><h2 id="登录页面的表单处理"><a href="#登录页面的表单处理" class="headerlink" title="登录页面的表单处理"></a>登录页面的表单处理</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220222222649263.png" alt="image-20220222222649263"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220222223944391.png" alt="image-20220222223944391"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>社区首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--欢迎信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;loginUser!=null&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        欢迎你，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;loginUser.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/discuss&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>帖子详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/letter&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>私信列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/loginpage&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        &lt;li>&lt;a th:href="@&#123;/loginpage&#125;">退出&lt;/a>&lt;/li>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/logout&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:document.forms[0].submit();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-开发社区搜索功能</title>
      <link href="/2022/02/23/niu-ke-xiang-mu-kai-fa-she-qu-sou-suo-gong-neng/"/>
      <url>/2022/02/23/niu-ke-xiang-mu-kai-fa-she-qu-sou-suo-gong-neng/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220218174239454.png" alt="image-20220218174239454"></p><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class ElasticsearchService &#123;    @Autowired    private DiscussPostRepository discussRepository;    @Autowired    private ElasticsearchTemplate elasticTemplate;    public void saveDiscussPost(DiscussPost post)&#123;        discussRepository.save(post);    &#125;    public void deleteDiscussPost(int id)&#123;        discussRepository.deleteById(id);    &#125;    public Page&lt;DiscussPost&gt; searchDiscussPost(String keyword,int current,int limit)&#123;        SearchQuery searchQuery &#x3D; new NativeSearchQueryBuilder()                .withQuery(QueryBuilders.multiMatchQuery(keyword,&quot;title&quot;,&quot;content&quot;))                .withSort(SortBuilders.fieldSort(&quot;type&quot;).order(SortOrder.DESC))                .withSort(SortBuilders.fieldSort(&quot;score&quot;).order(SortOrder.DESC))                .withSort(SortBuilders.fieldSort(&quot;createTime&quot;).order(SortOrder.DESC))                .withPageable(PageRequest.of(current,limit))                .withHighlightFields(                        new HighlightBuilder.Field(&quot;title&quot;).preTags(&quot;&lt;em&gt;&quot;).postTags(&quot;&lt;&#x2F;em&gt;&quot;),                        new HighlightBuilder.Field(&quot;content&quot;).preTags(&quot;&lt;em&gt;&quot;).postTags(&quot;&lt;&#x2F;em&gt;&quot;)                ).build();        return elasticTemplate.queryForPage(searchQuery, DiscussPost.class, new SearchResultMapper() &#123;            @Override            public &lt;T&gt; AggregatedPage&lt;T&gt; mapResults(SearchResponse response, Class&lt;T&gt; aClass, Pageable pageable) &#123;                SearchHits hits &#x3D; response.getHits();                if (hits.getTotalHits() &lt;&#x3D; 0)&#123;                    return null;                &#125;                List&lt;DiscussPost&gt; list &#x3D; new ArrayList&lt;&gt;();                for (SearchHit hit : hits)&#123;                    DiscussPost post &#x3D; new DiscussPost();                    String id &#x3D; hit.getSourceAsMap().get(&quot;id&quot;).toString();                    post.setId(Integer.valueOf(id));                    String userId &#x3D; hit.getSourceAsMap().get(&quot;userId&quot;).toString();                    post.setUserId(Integer.valueOf(userId));                    String title &#x3D; hit.getSourceAsMap().get(&quot;title&quot;).toString();                    post.setTitle(title);                    String content &#x3D; hit.getSourceAsMap().get(&quot;content&quot;).toString();                    post.setContent(content);                    String status &#x3D; hit.getSourceAsMap().get(&quot;status&quot;).toString();                    post.setStatus(Integer.valueOf(status));                    String createTime &#x3D; hit.getSourceAsMap().get(&quot;createTime&quot;).toString();                    post.setCreateTime(new Date(Long.valueOf(createTime)));                    String commentCount &#x3D; hit.getSourceAsMap().get(&quot;commentCount&quot;).toString();                    post.setCommentCount(Integer.valueOf(commentCount));                    &#x2F;&#x2F; 处理高亮显示的结果                    HighlightField titelField &#x3D; hit.getHighlightFields().get(&quot;title&quot;);                    if (titelField !&#x3D; null)&#123;                        post.setTitle(titelField.getFragments()[0].toString());                    &#125;                    HighlightField contentField &#x3D; hit.getHighlightFields().get(&quot;content&quot;);                    if (contentField !&#x3D; null)&#123;                        post.setContent(contentField.getFragments()[0].toString());                    &#125;                    list.add(post);                &#125;                return new AggregatedPageImpl(list,pageable,                        hits.getTotalHits(),response.getAggregations(),response.getScrollId(),hits.getMaxScore());            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>在发帖操作后增加触发事件处理DiscussPostController</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220219164626679.png" alt="image-20220219164626679"></p><p>对帖子评论后，增加触发事件</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220219165218629.png" alt="image-20220219165218629"></p><p>消费事件（EventConsumer），增加一个新的主题</p><p>注入service</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220219171211404.png" alt="image-20220219171211404"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220219171407369.png" alt="image-20220219171407369"></p><h2 id="做展现"><a href="#做展现" class="headerlink" title="做展现"></a>做展现</h2><p>Controller包下新增类 SearchController</p><p>注入 UserService 和 LikeService，因为在搜到帖子后，还要展现帖子的作者和点赞的数量在页面上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class SearchController implements CommunityConstant &#123;    @Autowired    private ElasticsearchService elasticsearchService;    @Autowired    private UserService userService;    @Autowired    private LikeService likeService;    &#x2F;&#x2F; search?keyword&#x3D;xxx    @RequestMapping(path &#x3D; &quot;&#x2F;search&quot;,method &#x3D; RequestMethod.GET)    public String search(String keyword, Page page, Model model)&#123;        &#x2F;&#x2F; 搜索帖子        org.springframework.data.domain.Page&lt;DiscussPost&gt; searchResult &#x3D; &#x2F;&#x2F; search方法里要求page从0开始，因此在封装的自然的顺序上-1                elasticsearchService.searchDiscussPost(keyword,page.getCurrent() - 1,page.getLimit());        &#x2F;&#x2F; 聚合数据        List&lt;Map&lt;String,Object&gt;&gt; discussPosts &#x3D; new ArrayList&lt;&gt;();        if (searchResult !&#x3D; null)&#123;            for (DiscussPost post : searchResult)&#123;                Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();                &#x2F;&#x2F; 帖子                map.put(&quot;post&quot;,post);                &#x2F;&#x2F; 作者                map.put(&quot;user&quot;,userService.findUserById(post.getUserId()));                &#x2F;&#x2F; 点赞数量                map.put(&quot;likeCount&quot;,likeService.findEntityLikeCount(ENTITY_TYPE_POST,post.getId()));                discussPosts.add(map);            &#125;        &#125;        model.addAttribute(&quot;discussPosts&quot;,discussPosts);        model.addAttribute(&quot;keyword&quot;,keyword);        &#x2F;&#x2F; 分页信息        page.setPath(&quot;&#x2F;search?keyword&#x3D;&quot; + keyword);        page.setRows(searchResult &#x3D;&#x3D; null ? 0 : (int) searchResult.getTotalElements());        return &quot;&#x2F;site&#x2F;search&quot;;    &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="页面处理"><a href="#页面处理" class="headerlink" title="页面处理"></a>页面处理</h2><p>index页面搜索处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220221192610505.png" alt="image-20220221192610505"></p><p>search页面处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220221205734861.png" alt="image-20220221205734861"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring整合ES</title>
      <link href="/2022/02/23/spring-zheng-he-es/"/>
      <url>/2022/02/23/spring-zheng-he-es/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220130094957489.png" alt="image-20220130094957489"></p><p>导包</p><p>配置</p><p>处理 netty 启动冲突问题</p><p>在对应的实体类上作处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220218174749557.png" alt="image-20220218174749557"></p><p>实现接口</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220218174825287.png" alt="image-20220218174825287"></p><p>Test</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RunWith(SpringRunner.class)@SpringBootTest@ContextConfiguration(classes &#x3D; CommunityApplication.class)public class ElasticsearchTests &#123;    @Autowired    private DiscussPostMapper discussMapper;    @Autowired    private DiscussPostRepository discussRepository;    @Autowired    private ElasticsearchTemplate elasticTemplate;    @Test    public void  testInsert() &#123;        discussRepository.save(discussMapper.selectDiscussPostById(241));        discussRepository.save(discussMapper.selectDiscussPostById(242));        discussRepository.save(discussMapper.selectDiscussPostById(243));    &#125;    @Test    public void testInsertList()&#123;        discussRepository.saveAll(discussMapper.selectDiscussPosts(101,0,100));        discussRepository.saveAll(discussMapper.selectDiscussPosts(102,0,100));        discussRepository.saveAll(discussMapper.selectDiscussPosts(103,0,100));        discussRepository.saveAll(discussMapper.selectDiscussPosts(111,0,100));        discussRepository.saveAll(discussMapper.selectDiscussPosts(112,0,100));        discussRepository.saveAll(discussMapper.selectDiscussPosts(131,0,100));        discussRepository.saveAll(discussMapper.selectDiscussPosts(132,0,100));        discussRepository.saveAll(discussMapper.selectDiscussPosts(133,0,100));        discussRepository.saveAll(discussMapper.selectDiscussPosts(134,0,100));    &#125;    @Test    public void testUpdate()&#123;        DiscussPost post &#x3D; discussMapper.selectDiscussPostById(231);        post.setContent(&quot;我是新人，使劲灌水&quot;);        discussRepository.save(post);    &#125;    @Test    public void testDelete()&#123;        discussRepository.deleteById(231);    &#125;    @Test    public void testSearchByRepository()&#123;        SearchQuery searchQuery &#x3D; new NativeSearchQueryBuilder()                .withQuery(QueryBuilders.multiMatchQuery(&quot;互联网寒冬&quot;,&quot;title&quot;,&quot;content&quot;))                .withSort(SortBuilders.fieldSort(&quot;type&quot;).order(SortOrder.DESC))                .withSort(SortBuilders.fieldSort(&quot;score&quot;).order(SortOrder.DESC))                .withSort(SortBuilders.fieldSort(&quot;createTime&quot;).order(SortOrder.DESC))                .withPageable(PageRequest.of(0,10))                .withHighlightFields(                        new HighlightBuilder.Field(&quot;title&quot;).preTags(&quot;&lt;em&gt;&quot;).postTags(&quot;&lt;&#x2F;em&gt;&quot;),                        new HighlightBuilder.Field(&quot;content&quot;).preTags(&quot;&lt;em&gt;&quot;).postTags(&quot;&lt;&#x2F;em&gt;&quot;)                ).build();        &#x2F;&#x2F; 底层获取得到了高亮显示的值，但是没有返回        Page&lt;DiscussPost&gt; page &#x3D; discussRepository.search(searchQuery);        System.out.println(page.getTotalElements());        System.out.println(page.getTotalPages());        System.out.println(page.getNumber());        System.out.println(page.getSize());        for(DiscussPost post : page)&#123;            System.out.println(post);        &#125;    &#125;    @Test    public void testSearchByTemplate()&#123;        SearchQuery searchQuery &#x3D; new NativeSearchQueryBuilder()                .withQuery(QueryBuilders.multiMatchQuery(&quot;互联网寒冬&quot;,&quot;title&quot;,&quot;content&quot;))                .withSort(SortBuilders.fieldSort(&quot;type&quot;).order(SortOrder.DESC))                .withSort(SortBuilders.fieldSort(&quot;score&quot;).order(SortOrder.DESC))                .withSort(SortBuilders.fieldSort(&quot;createTime&quot;).order(SortOrder.DESC))                .withPageable(PageRequest.of(0,10))                .withHighlightFields(                        new HighlightBuilder.Field(&quot;title&quot;).preTags(&quot;&lt;em&gt;&quot;).postTags(&quot;&lt;&#x2F;em&gt;&quot;),                        new HighlightBuilder.Field(&quot;content&quot;).preTags(&quot;&lt;em&gt;&quot;).postTags(&quot;&lt;&#x2F;em&gt;&quot;)                ).build();        Page&lt;DiscussPost&gt; page &#x3D; elasticTemplate.queryForPage(searchQuery, DiscussPost.class, new SearchResultMapper() &#123;            @Override            public &lt;T&gt; AggregatedPage&lt;T&gt; mapResults(SearchResponse response, Class&lt;T&gt; aClass, Pageable pageable) &#123;                SearchHits hits &#x3D; response.getHits();                if (hits.getTotalHits() &lt;&#x3D; 0)&#123;                    return null;                &#125;                List&lt;DiscussPost&gt; list &#x3D; new ArrayList&lt;&gt;();                for (SearchHit hit : hits)&#123;                    DiscussPost post &#x3D; new DiscussPost();                    String id &#x3D; hit.getSourceAsMap().get(&quot;id&quot;).toString();                    post.setId(Integer.valueOf(id));                    String userId &#x3D; hit.getSourceAsMap().get(&quot;userId&quot;).toString();                    post.setUserId(Integer.valueOf(userId));                    String title &#x3D; hit.getSourceAsMap().get(&quot;title&quot;).toString();                    post.setTitle(title);                    String content &#x3D; hit.getSourceAsMap().get(&quot;content&quot;).toString();                    post.setContent(content);                    String status &#x3D; hit.getSourceAsMap().get(&quot;status&quot;).toString();                    post.setStatus(Integer.valueOf(status));                    String createTime &#x3D; hit.getSourceAsMap().get(&quot;createTime&quot;).toString();                    post.setCreateTime(new Date(Long.valueOf(createTime)));                    String commentCount &#x3D; hit.getSourceAsMap().get(&quot;commentCount&quot;).toString();                    post.setCommentCount(Integer.valueOf(commentCount));                    &#x2F;&#x2F; 处理高亮显示的结果                    HighlightField titelField &#x3D; hit.getHighlightFields().get(&quot;title&quot;);                    if (titelField !&#x3D; null)&#123;                        post.setTitle(titelField.getFragments()[0].toString());                    &#125;                    HighlightField contentField &#x3D; hit.getHighlightFields().get(&quot;content&quot;);                    if (contentField !&#x3D; null)&#123;                        post.setContent(contentField.getFragments()[0].toString());                    &#125;                    list.add(post);                &#125;                return new AggregatedPageImpl(list,pageable,                        hits.getTotalHits(),response.getAggregations(),response.getScrollId(),hits.getMaxScore());            &#125;        &#125;);        System.out.println(page.getTotalElements());        System.out.println(page.getTotalPages());        System.out.println(page.getNumber());        System.out.println(page.getSize());        for(DiscussPost post : page)&#123;            System.out.println(post);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初始Elasticsearch</title>
      <link href="/2022/02/23/chu-shi-elasticsearch/"/>
      <url>/2022/02/23/chu-shi-elasticsearch/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220129223933845.png" alt="image-20220129223933845"></p><ul><li>索引：相当于数据库里的库 database</li><li>类型：相当于数据库里的表 table</li><li>文档：相当于表里的一行(条)数据，数据结构通常采用 json</li><li>字段：json 中的每一个属性，相当于表中的一列</li></ul><p>最新：索引对应表，文档对应行，字段对应列，类型逐渐废弃</p><p>把索引分片来存储，提高并发能力</p><p>副本是对分片的备份，一个分片可以包含多个副本</p>]]></content>
      
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-显示系统通知</title>
      <link href="/2022/02/23/niu-ke-xiang-mu-xian-shi-xi-tong-tong-zhi/"/>
      <url>/2022/02/23/niu-ke-xiang-mu-xian-shi-xi-tong-tong-zhi/</url>
      
        <content type="html"><![CDATA[<p>拦截器</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220129134342732.png" alt="image-20220129134342732"></p><h1 id="通知列表"><a href="#通知列表" class="headerlink" title="通知列表"></a>通知列表</h1><h2 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220129141212209.png" alt="image-20220129141212209"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectLatestNotice<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    from message    where id in &#123;        select max(id) from message        where status != 2        and from_id = 1        and to_id = #&#123;userId&#125;        and conversation_id = #&#123;topic&#125;    &#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectNoticeCount<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select count(id) from message    where status != 2    and from_id = 1    and to_id = #&#123;userId&#125;    and conversation_id = #&#123;topic&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectNoticeUnreadCount<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select count(id) from message    where status = 0    and from_id = 1    and to_id = #&#123;userId&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>topic!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and conversation_id = #&#123;topic&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Message findLatestNotice(int userId,String topic)&#123;    return messageMapper.selectLatestNotice(userId,topic);&#125;public int findNoticeCount(int userId,String topic)&#123;    return messageMapper.selectNoticeCount(userId,topic);&#125;public int findNoticeUnreadCount(int userId,String topic)&#123;    return messageMapper.selectNoticeUnreadCount(userId,topic);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(path &#x3D; &quot;&#x2F;notice&#x2F;list&quot;, method &#x3D; RequestMethod.GET)public String getNoticeList(Model model) &#123;    User user &#x3D; hostHolder.getUser();    &#x2F;&#x2F; 查询评论类通知    Message message &#x3D; messageService.findLatestNotice(user.getId(), TOPIC_COMMENT);    if (message !&#x3D; null) &#123;        Map&lt;String, Object&gt; messageVO &#x3D; new HashMap&lt;&gt;();        messageVO.put(&quot;message&quot;, message);        String content &#x3D; HtmlUtils.htmlUnescape(message.getContent());        Map&lt;String, Object&gt; data &#x3D; JSONObject.parseObject(content, HashMap.class); &#x2F;&#x2F; 将字符串转为map类型对象        messageVO.put(&quot;user&quot;, userService.findUserById((Integer) data.get(&quot;userId&quot;)));        messageVO.put(&quot;entityType&quot;, data.get(&quot;entityType&quot;));        messageVO.put(&quot;entityId&quot;, data.get(&quot;entityId&quot;));        messageVO.put(&quot;postId&quot;, data.get(&quot;postId&quot;));        int count &#x3D; messageService.findNoticeCount(user.getId(), TOPIC_COMMENT);        messageVO.put(&quot;count&quot;, count);        int unread &#x3D; messageService.findNoticeUnreadCount(user.getId(), TOPIC_COMMENT);        messageVO.put(&quot;unread&quot;, unread);        model.addAttribute(&quot;commentNotice&quot;, messageVO);    &#125;    &#x2F;&#x2F; 查询点赞类通知    message &#x3D; messageService.findLatestNotice(user.getId(), TOPIC_LIKE);    if (message !&#x3D; null) &#123;        Map&lt;String, Object&gt; messageVO &#x3D; new HashMap&lt;&gt;();        messageVO.put(&quot;message&quot;, message);        String content &#x3D; HtmlUtils.htmlUnescape(message.getContent());        Map&lt;String, Object&gt; data &#x3D; JSONObject.parseObject(content, HashMap.class); &#x2F;&#x2F; 将字符串转为map类型对象        messageVO.put(&quot;user&quot;, userService.findUserById((Integer) data.get(&quot;userId&quot;)));        messageVO.put(&quot;entityType&quot;, data.get(&quot;entityType&quot;));        messageVO.put(&quot;entityId&quot;, data.get(&quot;entityId&quot;));        messageVO.put(&quot;postId&quot;, data.get(&quot;postId&quot;));        int count &#x3D; messageService.findNoticeCount(user.getId(), TOPIC_LIKE);        messageVO.put(&quot;count&quot;, count);        int unread &#x3D; messageService.findNoticeUnreadCount(user.getId(), TOPIC_LIKE);        messageVO.put(&quot;unread&quot;, unread);        model.addAttribute(&quot;likeNotice&quot;, messageVO);    &#125;    &#x2F;&#x2F; 查询关注类通知    message &#x3D; messageService.findLatestNotice(user.getId(), TOPIC_FOLLOW);    if (message !&#x3D; null) &#123;        Map&lt;String, Object&gt; messageVO &#x3D; new HashMap&lt;&gt;();        messageVO.put(&quot;message&quot;, message);        String content &#x3D; HtmlUtils.htmlUnescape(message.getContent());        Map&lt;String, Object&gt; data &#x3D; JSONObject.parseObject(content, HashMap.class); &#x2F;&#x2F; 将字符串转为map类型对象        messageVO.put(&quot;user&quot;, userService.findUserById((Integer) data.get(&quot;userId&quot;)));        messageVO.put(&quot;entityType&quot;, data.get(&quot;entityType&quot;));        messageVO.put(&quot;entityId&quot;, data.get(&quot;entityId&quot;));        int count &#x3D; messageService.findNoticeCount(user.getId(), TOPIC_FOLLOW);        messageVO.put(&quot;count&quot;, count);        int unread &#x3D; messageService.findNoticeUnreadCount(user.getId(), TOPIC_FOLLOW);        messageVO.put(&quot;unread&quot;, unread);        model.addAttribute(&quot;followNotice&quot;, messageVO);    &#125;    &#x2F;&#x2F; 查询未读的私信消息数量    int letterUnreadCount &#x3D; messageService.findLetterUnreadCount(user.getId(), null);    model.addAttribute(&quot;letterUnreadCount&quot;, letterUnreadCount);    &#x2F;&#x2F; 查询未读的通知的消息数量    int noticeUnreadCount &#x3D; messageService.findNoticeUnreadCount(user.getId(), null);    model.addAttribute(&quot;noticeUnreadCount&quot;, noticeUnreadCount);    return &quot;&#x2F;site&#x2F;notice&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="页面处理"><a href="#页面处理" class="headerlink" title="页面处理"></a>页面处理</h2><p>notice.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 选项 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav nav-tabs mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link position-relative<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/letter/list&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         朋友私信<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-danger<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;letterUnreadCount&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;letterUnreadCount!=0&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link position-relative active<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/notice/list&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         系统通知<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-danger<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;noticeUnreadCount&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;noticeUnreadCount!=0&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 通知列表 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-unstyled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--评论类通知--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media pb-3 pt-3 mb-3 border-bottom position-relative<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;commentNotice!=null&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-danger<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;commentNotice.unread!=0?commentNotice.unread:<span class="token punctuation">'</span><span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://static.nowcoder.com/images/head/reply.png<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-4 user-header<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知图标<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-0 mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>评论<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>float-right text-muted font-size-12<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#dates.format(commentNotice.message.createTime,<span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2019-04-28 14:13:25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/notice/detail/comment&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               用户               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;commentNotice.user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>nowcoder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>               评论了你的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;commentNotice.entityType==1?<span class="token punctuation">'</span>帖子<span class="token punctuation">'</span>:<span class="token punctuation">'</span>回复<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>帖子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> ...            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline font-size-12 float-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline ml-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>共 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;commentNotice.count&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 条会话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--点赞类通知--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media pb-3 pt-3 mb-3 border-bottom position-relative<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;likeNotice!=null&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-danger<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;likeNotice.unread!=0?likeNotice.unread:<span class="token punctuation">'</span><span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://static.nowcoder.com/images/head/like.png<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-4 user-header<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知图标<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-0 mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>float-right text-muted font-size-12<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#dates.format(likeNotice.message.createTime,<span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2019-04-28 14:13:25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/notice/detail/like&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               用户               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;likeNotice.user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>nowcoder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>               点赞了你的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;likeNotice.entityType==1?<span class="token punctuation">'</span>帖子<span class="token punctuation">'</span>:<span class="token punctuation">'</span>回复<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>帖子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> ...            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline font-size-12 float-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline ml-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>共 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;likeNotice.count&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 条会话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--关注类通知--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media pb-3 pt-3 mb-3 border-bottom position-relative<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;followNotice.messag!=null&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-danger<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;followNotice.unread!=0?followNotice.unread:<span class="token punctuation">'</span><span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://static.nowcoder.com/images/head/follow.png<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-4 user-header<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通知图标<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-0 mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>关注<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>float-right text-muted font-size-12<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#dates.format(followNotice.message.createTime,<span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2019-04-28 14:13:25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/notice/detail/follow&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               用户               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;followNotice.user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>nowcoder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>               关注了你 ...            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline font-size-12 float-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline ml-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>共 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;followNotice.count&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 条会话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="通知详情"><a href="#通知详情" class="headerlink" title="通知详情"></a>通知详情</h1><h2 id="Dao层-1"><a href="#Dao层-1" class="headerlink" title="Dao层"></a>Dao层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 查询某个主题所包含的通知列表List&lt;Message&gt; selectNotices(int userId, String topic, int offset, int limit);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectNotices<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    from message    where status != 2    and from_id = 1    and to_id = #&#123;userId&#125;    and conversation_id = #&#123;topic&#125;    order by create_time desc    limit #&#123;offset&#125;,#&#123;limit&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service层-1"><a href="#Service层-1" class="headerlink" title="Service层"></a>Service层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">public List&lt;Message&gt; findNotices(int userId, String topic, int offset, int limit) &#123;    return messageMapper.selectNotices(userId, topic, offset, limit);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Controller层-1"><a href="#Controller层-1" class="headerlink" title="Controller层"></a>Controller层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(path &#x3D; &quot;&#x2F;notice&#x2F;detail&#x2F;&#123;topic&#125;&quot;, method &#x3D; RequestMethod.GET)public String getNoticeDetail(@PathVariable(&quot;topic&quot;) String topic, Page page, Model model) &#123;    User user &#x3D; hostHolder.getUser();    page.setLimit(5);    page.setPath(&quot;&#x2F;notice&#x2F;detail&#x2F;&quot; + topic);    page.setRows(messageService.findNoticeCount(user.getId(), topic));    List&lt;Message&gt; noticeList &#x3D; messageService.findNotices(user.getId(), topic, page.getOffset(), page.getLimit());    List&lt;Map&lt;String, Object&gt;&gt; noticeVoList &#x3D; new ArrayList&lt;&gt;();    if (noticeList !&#x3D; null) &#123;        for (Message notice : noticeList) &#123;            Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();            &#x2F;&#x2F; 通知            map.put(&quot;notice&quot;, notice);            &#x2F;&#x2F; 内容            String content &#x3D; HtmlUtils.htmlUnescape(notice.getContent());            Map&lt;String, Object&gt; data &#x3D; JSONObject.parseObject(content, HashMap.class);            map.put(&quot;user&quot;, userService.findUserById((Integer) data.get(&quot;userId&quot;)));            map.put(&quot;entityType&quot;, data.get(&quot;entityType&quot;));            map.put(&quot;entityId&quot;, data.get(&quot;entityId&quot;));            map.put(&quot;postId&quot;, data.get(&quot;postId&quot;)); &#x2F;&#x2F; 如果是关注就是null，不会报错            &#x2F;&#x2F; 通知的作者            map.put(&quot;fromUser&quot;, userService.findUserById(notice.getFromId()));            noticeVoList.add(map);        &#125;    &#125;    model.addAttribute(&quot;notices&quot;, noticeVoList);    &#x2F;&#x2F; 设置已读    List&lt;Integer&gt; ids &#x3D; getLetterIds(noticeList);    if (!ids.isEmpty()) &#123;        messageService.readMessage(ids);    &#125;    return &quot;&#x2F;site&#x2F;notice-detail&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="页面处理-1"><a href="#页面处理-1" class="headerlink" title="页面处理"></a>页面处理</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220129213411237.png" alt="image-20220129213411237"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220129213426675.png" alt="image-20220129213426675"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 通知列表 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-unstyled mt-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media pb-3 pt-3 mb-2<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map:$&#123;notices&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.fromUser.headerUrl&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-4 rounded-circle user-header<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>系统图标<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toast show d-lg-block<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert<span class="token punctuation">"</span></span> <span class="token attr-name">aria-live</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>assertive<span class="token punctuation">"</span></span> <span class="token attr-name">aria-atomic</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toast-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-auto<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.fromUser.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>落基山脉下的闲人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#dates.format(map.notice.createTime,<span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2019-04-25 15:49:32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ml-2 mb-1 close<span class="token punctuation">"</span></span> <span class="token attr-name">data-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toast<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&times;">&amp;times;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toast-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;topic.equals(<span class="token punctuation">'</span>comment<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               用户               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>nowcoder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>               评论了你的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.entityType==1?<span class="token punctuation">'</span>帖子<span class="token punctuation">'</span>:<span class="token punctuation">'</span>回复<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>帖子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>,               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;|/discuss/detail/$&#123;map.postId&#125;|&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击查看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> !            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;topic.equals(<span class="token punctuation">'</span>like<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               用户               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>nowcoder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>               点赞了你的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.entityType==1?<span class="token punctuation">'</span>帖子<span class="token punctuation">'</span>:<span class="token punctuation">'</span>回复<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>帖子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>,               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;|/discuss/detail/$&#123;map.postId&#125;|&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击查看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> !            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;topic.equals(<span class="token punctuation">'</span>follow<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               用户               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>nowcoder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>               关注了你,               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;|/user/profile/$&#123;map.user.id&#125;|&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击查看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> !            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="未读消息"><a href="#未读消息" class="headerlink" title="未读消息"></a>未读消息</h2><p>在interceptor包下新增拦截器 MessageInterceptor</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class MessageInterceptor implements HandlerInterceptor &#123;    @Autowired    private HostHolder hostHolder;    @Autowired    private MessageService messageService;    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;        User user &#x3D; hostHolder.getUser();        if (user !&#x3D; null &amp;&amp; modelAndView !&#x3D; null) &#123;            int letterUnreadCount &#x3D; messageService.findLetterUnreadCount(user.getId(), null);            int noticeUnreadCount &#x3D; messageService.findNoticeUnreadCount(user.getId(), null);            modelAndView.addObject(&quot;allUnreadCount&quot;, letterUnreadCount + noticeUnreadCount);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在WebMvcConfig中配置拦截器</p><p>注入对应的拦截器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Autowiredprivate MessageInterceptor messageInterceptor;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 addInterceptors 方法里增加对应的处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">registry.addInterceptor(messageInterceptor)        .excludePathPatterns(&quot;&#x2F;**&#x2F;*.css&quot;,&quot;&#x2F;**&#x2F;*.js&quot;,&quot;&#x2F;**&#x2F;*.png&quot;,&quot;&#x2F;**&#x2F;*.jpg&quot;,&quot;&#x2F;**&#x2F;*.jpeg&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再 index 页面做消息数量的处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220129221418998.png" alt="image-20220129221418998"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-发送系统通知</title>
      <link href="/2022/01/29/niu-ke-xiang-mu-fa-song-xi-tong-tong-zhi/"/>
      <url>/2022/01/29/niu-ke-xiang-mu-fa-song-xi-tong-tong-zhi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220128170044168.png" alt="image-20220128170044168"></p><p>在评论、点赞、关注以后，需要发通知，将消息放到队列里，之后不用管继续处理别的事，然后由专门的消费者线程去处理，称这种并发的方式为异步的方式(同时进行)</p><p>具体来说，消费者线程要从队列里取到消息，往message里存一条数据</p><p>技术角度：用的 kafka 消息队列来解决问题，不同的操作用不同的(topic)主题来解决</p><p>业务角度：称解决问题的方式是事件驱动的方式，称评论是一个事件，点赞是一个事件，关注是一个事件；在解决问题的时候，是以事件为目标，以事件为主体来解决的，所以在开发时，是基于事件对代码的逻辑再进一步的封装，在 kafka 框架的基础上以事件为主体进行封装，而不是消息，这是通常解决这类问题的一种习惯。</p><p>具体开发：</p><p>需要把事件对象定义出来，对事件发生的时候，所需的数据进行封装，而不是发一个消息拼一个字符串。拼一个事件对象，这个对象中包含了这条消息所需要的所有数据。</p><p>封装了一个事件对象以后，因为采用消息队列解决问题，所以要开发生产者、消费者，生产的是事件、消费的也是事件，消费的事件最终是要把消息插入到数据库里</p><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p><em><strong>更改set方法，后面慢慢悟</strong></em></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220128200729558.png" alt="image-20220128200729558"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220128200800338.png" alt="image-20220128200800338"></p><p>新建包 envet ，新建类 EventProducer（生产者）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class EventProducer &#123;    @Autowired    private KafkaTemplate kafkaTemplate; &#x2F;&#x2F; 调用KafkaTemplate发送消息    &#x2F;&#x2F; 处理事件（本质：发送消息）    public void fireEvent(Event event)&#123;        &#x2F;&#x2F; 将事件发布到指定的主题,发送内容一个是主题，另一个是字符串(包含事件对象所有数据)将event转换为json字符串        &#x2F;&#x2F; 消费者得到json字符串后，能把它还原为event,这样就得到了event中所有数据，可以做进一步处理        kafkaTemplate.send(event.getTopic(), JSONObject.toJSONString(event));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建类 EventConsumer ，<a href="https://blog.csdn.net/yaomingyang/article/details/78748130">java中Map及Map.Entry详解</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class EventConsumer implements CommunityConstant &#123;    &#x2F;&#x2F; 处理事件过程中可能会有隐含的问题，要记日志    private static final Logger logger &#x3D; LoggerFactory.getLogger(EventConsumer.class);    &#x2F;&#x2F; 处理事件要干什么？    &#x2F;&#x2F; 处理一个事件最终是给某一个人发送一条消息，发消息是要往message表里插入一条数据    @Autowired    private MessageService messageService; &#x2F;&#x2F; 发消息依赖MessageService    &#x2F;&#x2F; 一个方法可以消费多个主题，一个主题可以被多个方法消费（多对多关系）    @KafkaListener(topics &#x3D; &#123;TOPIC_COMMENT, TOPIC_LIKE, TOPIC_FOLLOW&#125;)    public void handleCommentMessage(ConsumerRecord record) &#123;        if (record &#x3D;&#x3D; null || record.value() &#x3D;&#x3D; null) &#123;            logger.error(&quot;消息的内容为空！&quot;);            return;        &#125;        Event event &#x3D; JSONObject.parseObject(record.value().toString(), Event.class); &#x2F;&#x2F; 接收json字符串，以及对应的具体类型        if (event &#x3D;&#x3D; null) &#123;            logger.error(&quot;消息的格式错误！&quot;);            return;        &#125;        &#x2F;&#x2F; 发送站内通知        Message message &#x3D; new Message();        message.setFromId(SYSTEM_USER_ID);        message.setToId(event.getEntityUserId());        message.setConversationId(event.getTopic());        message.setCreateTime(new Date());        &#x2F;&#x2F; 设置content内容，包含了拼页面上&lt;用户xxyy了你的zz&gt;的数据        Map&lt;String, Object&gt; content &#x3D; new HashMap&lt;&gt;();        content.put(&quot;userId&quot;, event.getUserId()); &#x2F;&#x2F; 事件是谁触发的        content.put(&quot;entityType&quot;, event.getEntityType()); &#x2F;&#x2F; 实体的类型        content.put(&quot;entityId&quot;, event.getEntityId());        &#x2F;&#x2F; 其它额外数据存到content里        if (!event.getData().isEmpty()) &#123; &#x2F;&#x2F; 如果event的map不为空，就把数据拿出来放到content里            for (Map.Entry&lt;String, Object&gt; entry : event.getData().entrySet()) &#123;                content.put(entry.getKey(),entry.getValue());            &#125;        &#125;        message.setContent(JSONObject.toJSONString(content)); &#x2F;&#x2F; 把content内容转变为JSON字符串存进message中        messageService.addMessage(message);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CommentController(原先)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controller@RequestMapping(&quot;&#x2F;comment&quot;)public class CommentController &#123;    @Autowired    private CommentService commentService;    @Autowired    private HostHolder hostHolder;    @RequestMapping(path &#x3D; &quot;&#x2F;add&#x2F;&#123;discussPostId&#125;&quot;,method &#x3D; RequestMethod.POST)    public String addComment(@PathVariable(&quot;discussPostId&quot;) int discussPostId, Comment comment)&#123;        comment.setUserId(hostHolder.getUser().getId());        comment.setStatus(0);        comment.setCreateTime(new Date());        commentService.addComment(comment);        return &quot;redirect:&#x2F;discuss&#x2F;detail&#x2F;&quot;+discussPostId;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理后</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controller@RequestMapping(&quot;&#x2F;comment&quot;)public class CommentController implements CommunityConstant &#123;    @Autowired    private CommentService commentService;    @Autowired    private HostHolder hostHolder;    @Autowired    private EventProducer eventProducer;    @Autowired    private DiscussPostService discussPostService;    @RequestMapping(path &#x3D; &quot;&#x2F;add&#x2F;&#123;discussPostId&#125;&quot;,method &#x3D; RequestMethod.POST)    public String addComment(@PathVariable(&quot;discussPostId&quot;) int discussPostId, Comment comment)&#123;        comment.setUserId(hostHolder.getUser().getId());        comment.setStatus(0);        comment.setCreateTime(new Date());        commentService.addComment(comment);        &#x2F;&#x2F; 触发评论事件        Event event &#x3D; new Event()                .setTopic(TOPIC_COMMENT)                .setUserId(hostHolder.getUser().getId())                .setEntityType(comment.getEntityType())                .setEntityId(comment.getEntityId())                .setData(&quot;postId&quot;,discussPostId); &#x2F;&#x2F; content里有个帖子的超链接需要帖子id        if (comment.getEntityType() &#x3D;&#x3D; ENTITY_TYPE_POST)&#123; &#x2F;&#x2F; 判断一下实体作者是帖子还是评论            DiscussPost target &#x3D; discussPostService.findDiscussPostById(comment.getEntityId());            event.setEntityUserId(target.getUserId());        &#125; else if (comment.getEntityType() &#x3D;&#x3D; ENTITY_TYPE_COMMENT)&#123;            Comment target &#x3D; commentService.findCommentById(comment.getEntityId());            event.setEntityUserId(target.getUserId());        &#125;        eventProducer.fireEvent(event);        return &quot;redirect:&#x2F;discuss&#x2F;detail&#x2F;&quot;+discussPostId;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LikeController 处理前</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class LikeController &#123;    @Autowired    private LikeService likeService;    @Autowired    private HostHolder hostHolder;    @RequestMapping(path &#x3D; &quot;&#x2F;like&quot;, method &#x3D; RequestMethod.POST)    @ResponseBody    public String like(int entityType, int entityId, int entityUserId) &#123;        User user &#x3D; hostHolder.getUser();        &#x2F;&#x2F; 点赞        likeService.like(user.getId(), entityType, entityId, entityUserId);        &#x2F;&#x2F; 数量        long likeCount &#x3D; likeService.findEntityLikeCount(entityType, entityId);        &#x2F;&#x2F; 状态        int likeStatus &#x3D; likeService.findEntityLikeStatus(user.getId(), entityType, entityId);        &#x2F;&#x2F; 返回的结果        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;likeCount&quot;, likeCount);        map.put(&quot;likeStatus&quot;, likeStatus);        return CommunityUtil.getJSONString(0, null, map);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理后,增加一个帖子id 的参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class LikeController implements CommunityConstant &#123;    @Autowired    private LikeService likeService;    @Autowired    private HostHolder hostHolder;    @Autowired    private EventProducer eventProducer;    @RequestMapping(path &#x3D; &quot;&#x2F;like&quot;, method &#x3D; RequestMethod.POST)    @ResponseBody    public String like(int entityType, int entityId, int entityUserId, int postId) &#123;        User user &#x3D; hostHolder.getUser();        &#x2F;&#x2F; 点赞        likeService.like(user.getId(), entityType, entityId, entityUserId);        &#x2F;&#x2F; 数量        long likeCount &#x3D; likeService.findEntityLikeCount(entityType, entityId);        &#x2F;&#x2F; 状态        int likeStatus &#x3D; likeService.findEntityLikeStatus(user.getId(), entityType, entityId);        &#x2F;&#x2F; 返回的结果        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;likeCount&quot;, likeCount);        map.put(&quot;likeStatus&quot;, likeStatus);        &#x2F;&#x2F; 触发点赞事件        if (likeStatus &#x3D;&#x3D; 1) &#123; &#x2F;&#x2F; 判断一下是点赞还是取消点赞            Event event &#x3D; new Event()                    .setTopic(TOPIC_LIKE)                    .setUserId(hostHolder.getUser().getId())                    .setEntityType(entityType)                    .setEntityId(entityId)                    .setEntityUserId(entityUserId)                    .setData(&quot;postId&quot;, postId);            eventProducer.fireEvent(event);        &#125;        return CommunityUtil.getJSONString(0, null, map);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FollowController处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220129095526663.png" alt="image-20220129095526663"></p><p>针对点赞，处理帖子详情页 discuss-detail 增加postId</p><p>帖子的点赞</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220129103809629.png" alt="image-20220129103809629"></p><p>评论的点赞</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220129103956629.png" alt="image-20220129103956629"></p><p>评论回复的点赞</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220129104019653.png" alt="image-20220129104019653"></p><p>处理discuss.js页面，增加postId</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220129104204786.png" alt="image-20220129104204786"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-Kafka入门</title>
      <link href="/2022/01/29/niu-ke-xiang-mu-kafka-ru-men/"/>
      <url>/2022/01/29/niu-ke-xiang-mu-kafka-ru-men/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220128111601532.png" alt="image-20220128111601532"></p><p>导包，父pom中已经声明了对应的版本，可以去除版本号</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220128112252437.png" alt="image-20220128112252437"></p><p>配置</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220128162613965.png" alt="image-20220128162613965"></p><p>生产者发消息是主动去调，去发的。消费者处理消息是被动的，一旦队列中有消息，就自动处理</p><p>测试</p><p>开启 zookeeper 和 kafka</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootTest@ContextConfiguration(classes &#x3D; CommunityApplication.class)public class KafkaTests &#123;    @Autowired    private KafkaProducer kafkaProducer;    @Test    public void testKafka()&#123;        kafkaProducer.sendMessage(&quot;test&quot;,&quot;你好&quot;);        kafkaProducer.sendMessage(&quot;test&quot;,&quot;在吗&quot;);        kafkaProducer.sendMessage(&quot;test&quot;,&quot;hello&quot;);        try &#123;            Thread.sleep(10*1000);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;@Componentclass KafkaProducer&#123;    @Autowired    private KafkaTemplate kafkaTemplate;    public void sendMessage(String topic,String content)&#123;        kafkaTemplate.send(topic,content);    &#125;&#125;@Componentclass KafkaConsumer&#123;    @KafkaListener(topics &#x3D; &#123;&quot;test&quot;&#125;)    public void handleMessage(ConsumerRecord record)&#123;        System.out.println(record.value());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-个人主页补充</title>
      <link href="/2022/01/27/niu-ke-xiang-mu-ge-ren-zhu-ye-bu-chong/"/>
      <url>/2022/01/27/niu-ke-xiang-mu-ge-ren-zhu-ye-bu-chong/</url>
      
        <content type="html"><![CDATA[<h2 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127225838306.png" alt="image-20220127225838306"></p><h3 id="对应方法的-sql-语句"><a href="#对应方法的-sql-语句" class="headerlink" title="对应方法的 sql 语句"></a>对应方法的 sql 语句</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectCommentById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    from comment    where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectCommentsByUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    from comment    where status != 1    and user_id = #&#123;userId&#125;    and entity_type = 1    and exists (    select id from discuss_post where id = comment.entity_id and status != 2    )    order by create_time desc    limit #&#123;offset&#125;, #&#123;limit&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectCountByUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select count(id) from comment    where status != 1    and user_id = #&#123;userId&#125;      and entity_type = 1      and exists (        select id from discuss_post where id = comment.entity_id and status != 2        )<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Comment findCommentById(int id) &#123;    return commentMapper.selectCommentById(id);&#125;public List&lt;Comment&gt; findUserComments(int userId, int offset, int limit) &#123;    return commentMapper.selectCommentsByUser(userId, offset, limit);&#125;public int findUserCount(int userId) &#123;    return commentMapper.selectCountByUser(userId);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><p>在 UserController 中补充</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 我的帖子@RequestMapping(path &#x3D; &quot;&#x2F;mypost&#x2F;&#123;userId&#125;&quot;, method &#x3D; RequestMethod.GET)public String getMyPost(@PathVariable(&quot;userId&quot;) int userId, Page page, Model model) &#123;    User user &#x3D; userService.findUserById(userId);    if (user &#x3D;&#x3D; null) &#123;        throw new RuntimeException(&quot;该用户不存在！&quot;);    &#125;    model.addAttribute(&quot;user&quot;, user);    &#x2F;&#x2F; 分页信息    page.setPath(&quot;&#x2F;user&#x2F;mypost&#x2F;&quot; + userId);    page.setRows(discussPostService.findDiscussPostRows(userId));    &#x2F;&#x2F; 帖子列表    List&lt;DiscussPost&gt; discussList &#x3D; discussPostService            .findDiscussPosts(userId, page.getOffset(), page.getLimit());    List&lt;Map&lt;String, Object&gt;&gt; discussVOList &#x3D; new ArrayList&lt;&gt;();    if (discussList !&#x3D; null) &#123;        for (DiscussPost post : discussList) &#123;            Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();            map.put(&quot;discussPost&quot;, post);            map.put(&quot;likeCount&quot;, likeService.findEntityLikeCount(ENTITY_TYPE_POST, post.getId()));            discussVOList.add(map);        &#125;    &#125;    model.addAttribute(&quot;discussPosts&quot;, discussVOList);    return &quot;&#x2F;site&#x2F;my-post&quot;;&#125;&#x2F;&#x2F; 我的回复@RequestMapping(path &#x3D; &quot;&#x2F;myreply&#x2F;&#123;userId&#125;&quot;, method &#x3D; RequestMethod.GET)public String getMyReply(@PathVariable(&quot;userId&quot;) int userId, Page page, Model model) &#123;    User user &#x3D; userService.findUserById(userId);    if (user &#x3D;&#x3D; null) &#123;        throw new RuntimeException(&quot;该用户不存在！&quot;);    &#125;    model.addAttribute(&quot;user&quot;, user);    &#x2F;&#x2F; 分页信息    page.setPath(&quot;&#x2F;user&#x2F;myreply&#x2F;&quot; + userId);    page.setRows(commentService.findUserCount(userId));    &#x2F;&#x2F; 回复列表    List&lt;Comment&gt; commentList &#x3D; commentService.findUserComments(userId, page.getOffset(), page.getLimit());    List&lt;Map&lt;String, Object&gt;&gt; commentVOList &#x3D; new ArrayList&lt;&gt;();    if (commentList !&#x3D; null) &#123;        for (Comment comment : commentList) &#123;            Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();            map.put(&quot;comment&quot;, comment);            DiscussPost post &#x3D; discussPostService.findDiscussPostById(comment.getEntityId());            map.put(&quot;discussPost&quot;, post);            commentVOList.add(map);        &#125;    &#125;    model.addAttribute(&quot;comments&quot;, commentVOList);    return &quot;&#x2F;site&#x2F;my-reply&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改页面"><a href="#修改页面" class="headerlink" title="修改页面"></a>修改页面</h2><h3 id="profile页面"><a href="#profile页面" class="headerlink" title="profile页面"></a>profile页面</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127230455970.png" alt="image-20220127230455970"></p><h3 id="myreply页面"><a href="#myreply页面" class="headerlink" title="myreply页面"></a>myreply页面</h3><ul><li>做 thymeleaf 模板处理</li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127230645034.png" alt="image-20220127230645034"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127230626893.png" alt="image-20220127230626893"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127230754268.png" alt="image-20220127230754268"></p><h3 id="mypost页面"><a href="#mypost页面" class="headerlink" title="mypost页面"></a>mypost页面</h3><ul><li>做模板处理，与myreply相似</li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127231006469.png" alt="image-20220127231006469"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127231030141.png" alt="image-20220127231030141"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127231101355.png" alt="image-20220127231101355"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-优化登录模块</title>
      <link href="/2022/01/27/niu-ke-xiang-mu-you-hua-deng-lu-mo-kuai/"/>
      <url>/2022/01/27/niu-ke-xiang-mu-you-hua-deng-lu-mo-kuai/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127144715171.png" alt="image-20220127144715171"></p><h2 id="使用Redis存储验证码"><a href="#使用Redis存储验证码" class="headerlink" title="使用Redis存储验证码"></a>使用Redis存储验证码</h2><h3 id="增加key的定义及方法"><a href="#增加key的定义及方法" class="headerlink" title="增加key的定义及方法"></a>增加key的定义及方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">private static final String RPEFIX_KAPTCHA &#x3D; &quot;kaptcha&quot;;&#x2F;&#x2F; 登录验证码&#x2F;&#x2F; 用户打开登录页面看到验证码，还没有登录，不知道userId,需要识别用户是谁&#x2F;&#x2F; 在用户访问登录页面时，给他发一个凭证（随机生成的字符串），存到Cookie里，以这个字符串来标识这个用户，之后很快过期public static String getKapthchaKey(String owner) &#123;    return RPEFIX_KAPTCHA + SPLIT + owner;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><ul><li><p>在LoginController 中将获取验证码的方法进行重构，原来是将验证码存进 Session 中</p></li><li><p>将验证码存进 Redis 中，将生成的随机凭证装进cookie里并发送给客户端，cookie有效时间为 60s</p></li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127153314654.png" alt="image-20220127153314654"></p><ul><li>从客户端得到的 cookie 中取到用户的凭证，根据凭证生成 key，通过key 获取 redis 中的验证码</li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127153821240.png" alt="image-20220127153821240"></p><h2 id="使用Redis存储登录凭证"><a href="#使用Redis存储登录凭证" class="headerlink" title="使用Redis存储登录凭证"></a>使用Redis存储登录凭证</h2><h3 id="增加key的定义及方法-1"><a href="#增加key的定义及方法-1" class="headerlink" title="增加key的定义及方法"></a>增加key的定义及方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">private static final String RPEFIX_TICKET &#x3D; &quot;ticket&quot;;&#x2F;&#x2F; 登录的凭证public static String getTicketKey(String ticket) &#123;    return RPEFIX_TICKET + SPLIT + ticket;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>因为要将凭证存进 redis 中，之前的 LoginTicketMapper 就废弃了</li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127155555866.png" alt="image-20220127155555866"></p><h3 id="重构-1"><a href="#重构-1" class="headerlink" title="重构"></a>重构</h3><p>重构之前使用这个 bean 的地方</p><ul><li>保存 ticket 凭证</li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127160938740.png" alt="image-20220127160938740"></p><ul><li>退出登录，修改 ticket 凭证的状态</li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127161521396.png" alt="image-20220127161521396"></p><ul><li>查找凭证</li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127161720846.png" alt="image-20220127161720846"></p><h2 id="使用Redis缓存用户信息"><a href="#使用Redis缓存用户信息" class="headerlink" title="使用Redis缓存用户信息"></a>使用Redis缓存用户信息</h2><p>缓存步骤：</p><ul><li><p>在查询user 的时候，先尝试从缓存中取值，取到就用，取不到说明缓存中的数据没有初始化进去，就做初始化；这两件事就把 findUserById 重构了</p></li><li><p>有些地方会改变用户的数据，需要将缓存更新有两种做法，一种更新缓存，另一种删除缓存。常用删除方式，删除后，再访问用户就又重查了一遍，如果更新数据会比较麻烦、可能有并发的问题（两人同时更新）</p></li></ul><h3 id="增加key的定义及方法-2"><a href="#增加key的定义及方法-2" class="headerlink" title="增加key的定义及方法"></a>增加key的定义及方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">private static final String RPEFIX_USER &#x3D; &quot;user&quot;;&#x2F;&#x2F; 用户public static String getUserKey(int userId) &#123;    return RPEFIX_USER + SPLIT + userId;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="redis缓存相关方法"><a href="#redis缓存相关方法" class="headerlink" title="redis缓存相关方法"></a>redis缓存相关方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 1.优先从缓存中取值private User getCache(int userId) &#123;    String redisKey &#x3D; RedisKeyUtil.getUserKey(userId);    return (User) redisTemplate.opsForValue().get(userId);&#125;&#x2F;&#x2F; 2.取不到时初始化缓存数据private User initCache(int userId) &#123;    User user &#x3D; userMapper.selectById(userId); &#x2F;&#x2F; 从mysql中查到user    String redisKey &#x3D; RedisKeyUtil.getUserKey(userId);    redisTemplate.opsForValue().set(redisKey, user, 3600, TimeUnit.SECONDS); &#x2F;&#x2F; 保存1h    return user;&#125;&#x2F;&#x2F; 3.数据变更时清除缓存数据private void clearCache(int userId) &#123;    String redisKey &#x3D; RedisKeyUtil.getUserKey(userId);    redisTemplate.delete(redisKey);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重构-2"><a href="#重构-2" class="headerlink" title="重构"></a>重构</h3><ul><li>查找用户方法</li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127170434584.png" alt="image-20220127170434584"></p><ul><li>激活方法</li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127170904633.png" alt="image-20220127170904633"></p><ul><li>更新头像</li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127171527449.png" alt="image-20220127171527449"></p><ul><li>修改密码</li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127185808109.png" alt="image-20220127185808109"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-关注列表/粉丝列表</title>
      <link href="/2022/01/27/niu-ke-xiang-mu-guan-zhu-lie-biao-fen-si-lie-biao/"/>
      <url>/2022/01/27/niu-ke-xiang-mu-guan-zhu-lie-biao-fen-si-lie-biao/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126201728514.png" alt="image-20220126201728514"></p><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 查询某用户关注的人&#x2F;&#x2F; 集合中存的是关注的人或粉丝的id,但传给页面的不能只是id,需要有user和关注的时间,是user对象和时间整合在一起的数据public List&lt;Map&lt;String, Object&gt;&gt; findFollowees(int userId, int offset, int limit) &#123;    String followeeKey &#x3D; RedisKeyUtil.getFolloweeKey(userId, ENTITY_TYPE_USER);    &#x2F;&#x2F; 查多条数据按范围来查，按倒叙查，最新的时间在前面    Set&lt;Integer&gt; targetIds &#x3D; redisTemplate.opsForZSet().reverseRange(followeeKey, offset, offset + limit - 1);    &#x2F;&#x2F; 查到数据后，对集合作判断是否为空    if (targetIds &#x3D;&#x3D; null) &#123;        return null;    &#125;    &#x2F;&#x2F; 实例化List    List&lt;Map&lt;String, Object&gt;&gt; list &#x3D; new ArrayList&lt;&gt;(); &#x2F;&#x2F; 将更详细的数据存到集合里    for (Integer targetId:targetIds)&#123; &#x2F;&#x2F; 遍历targetIds,把每个用户和相关数据取到        &#x2F;&#x2F; 实例化map        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;(); &#x2F;&#x2F; 查到对应用户后，封装进map里        User user &#x3D; userService.findUserById(targetId);        map.put(&quot;user&quot;,user);        Double score &#x3D; redisTemplate.opsForZSet().score(followeeKey,targetId); &#x2F;&#x2F; 取分数，得到的是小数        map.put(&quot;followTime&quot;,new Date(score.longValue())); &#x2F;&#x2F; 毫秒数转化为时间        list.add(map);    &#125;    return list;&#125;&#x2F;&#x2F; 查询某用户的粉丝public List&lt;Map&lt;String,Object&gt;&gt; findFollowers(int userId,int offset,int limit)&#123;    String followerKey &#x3D; RedisKeyUtil.getFollowerKey(ENTITY_TYPE_USER,userId);    Set&lt;Integer&gt; targetIds &#x3D; redisTemplate.opsForZSet().reverseRange(followerKey,offset,offset+limit-1);    if (targetIds &#x3D;&#x3D; null)&#123;        return null;    &#125;    List&lt;Map&lt;String,Object&gt;&gt; list &#x3D; new ArrayList&lt;&gt;();    for (Integer targetId:targetIds)&#123;        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();        User user &#x3D; userService.findUserById(targetId);        map.put(&quot;user&quot;,user);        Double score &#x3D; redisTemplate.opsForZSet().score(followerKey,targetId);        map.put(&quot;followTime&quot;,new Date(score.longValue()));        list.add(map);    &#125;    return list;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><p>在FollowerController里增加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(path &#x3D; &quot;&#x2F;followees&#x2F;&#123;userId&#125;&quot;,method &#x3D; RequestMethod.GET)public String getFollowees(@PathVariable(&quot;userId&quot;) int userId, Page page, Model model)&#123;    User user &#x3D; userService.findUserById(userId);    if (user &#x3D;&#x3D; null)&#123;        throw new RuntimeException(&quot;该用户不存在！&quot;);    &#125;    model.addAttribute(&quot;user&quot;,user);    page.setLimit(5);    page.setPath(&quot;&#x2F;followees&#x2F;&quot;+userId);    page.setRows((int) followService.findFolloweeCount(userId,ENTITY_TYPE_USER));    List&lt;Map&lt;String,Object&gt;&gt; userList &#x3D; followService.findFollowees(userId,page.getOffset(),page.getLimit());    if (userList !&#x3D; null)&#123;        for (Map&lt;String,Object&gt; map : userList)&#123;            User u &#x3D; (User) map.get(&quot;user&quot;);            map.put(&quot;hasFollowed&quot;,hasFollowed(u.getId()));        &#125;    &#125;    model.addAttribute(&quot;users&quot;,userList);    return &quot;&#x2F;site&#x2F;followee&quot;;&#125;@RequestMapping(path &#x3D; &quot;&#x2F;followers&#x2F;&#123;userId&#125;&quot;,method &#x3D; RequestMethod.GET)public String getFollowers(@PathVariable(&quot;userId&quot;) int userId, Page page, Model model)&#123;    User user &#x3D; userService.findUserById(userId);    if (user &#x3D;&#x3D; null)&#123;        throw new RuntimeException(&quot;该用户不存在！&quot;);    &#125;    model.addAttribute(&quot;user&quot;,user);    page.setLimit(5);    page.setPath(&quot;&#x2F;followers&#x2F;&quot;+userId);    page.setRows((int) followService.findFollowerCount(ENTITY_TYPE_USER,userId));    List&lt;Map&lt;String,Object&gt;&gt; userList &#x3D; followService.findFollowers(userId,page.getOffset(),page.getLimit());    if (userList !&#x3D; null)&#123;        for (Map&lt;String,Object&gt; map : userList)&#123;            User u &#x3D; (User) map.get(&quot;user&quot;);            map.put(&quot;hasFollowed&quot;,hasFollowed(u.getId()));        &#125;    &#125;    model.addAttribute(&quot;users&quot;,userList);    return &quot;&#x2F;site&#x2F;follower&quot;;&#125;&#x2F;&#x2F; 工具，判断当前用户是否为空，当前用户是否是已关注的实体private boolean hasFollowed(int userId)&#123;    if (hostHolder.getUser() &#x3D;&#x3D; null)&#123;        return false;    &#125;    return followService.hasFollowed(hostHolder.getUser().getId(),ENTITY_TYPE_USER,userId);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="页面处理"><a href="#页面处理" class="headerlink" title="页面处理"></a>页面处理</h2><p>followee和follower</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>position-relative<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 选项 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav nav-tabs mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link position-relative<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;|/followees/$&#123;user.id&#125;|&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-info<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Nowcoder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 关注的人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link position-relative active<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;|/followers/$&#123;user.id&#125;|&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            关注 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-info<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Nowcoder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 的人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;|/user/profile/$&#123;user.id&#125;|&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-muted position-absolute rt-0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回个人主页<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 粉丝列表 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-unstyled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media pb-3 pt-3 mb-3 border-bottom position-relative<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map:$&#123;users&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;|/user/profile/$&#123;map.user.id&#125;|&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.user.headerUrl&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-4 rounded-circle user-header<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户头像<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-0 mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-success<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>落基山脉下的闲人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>float-right text-muted font-size-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>关注于               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#dates.format(map.followTime,<span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2019-04-28 14:13:25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>entityId<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.user.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|btn $&#123;map.hasFollowed?<span class="token punctuation">'</span>btn-secondary<span class="token punctuation">'</span>:<span class="token punctuation">'</span>btn-info<span class="token punctuation">'</span>&#125; btn-sm float-right follow-btn|<span class="token punctuation">"</span></span>                  <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;loginUser!=null &amp;&amp; loginUser.id!=map.user.id&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.hasFollowed?<span class="token punctuation">'</span>已关注<span class="token punctuation">'</span>:<span class="token punctuation">'</span>关注他<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>关注TA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-关注/取消关注</title>
      <link href="/2022/01/26/niu-ke-xiang-mu-guan-zhu-qu-xiao-guan-zhu/"/>
      <url>/2022/01/26/niu-ke-xiang-mu-guan-zhu-qu-xiao-guan-zhu/</url>
      
        <content type="html"><![CDATA[<p><img src="C:\Users\QX\AppData\Roaming\Typora\typora-user-images\image-20220126151251930.png" alt="image-20220126151251930"></p><p>声明两个前缀，意味着要存两份数据，与点赞类似，一个是存与业务相关的数据，一个是为了统计方便</p><p>我关注了某人，要把这个目标存下来，另一方面，我关注的那个人，以他为 key 把我作为粉丝存进去</p><p>我的角度：followee，他的粉丝：follower</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126154439375.png" alt="image-20220126154439375"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126154456415.png" alt="image-20220126154456415"></p><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class FollowService &#123;    @Autowired    private RedisTemplate redisTemplate;    &#x2F;&#x2F; 两个操作同时进行，用事务管理    public void follow(int userId, int entityType, int entityId) &#123;        redisTemplate.execute(new SessionCallback() &#123;            @Override            public Object execute(RedisOperations operations) throws DataAccessException &#123;                String followeeKey &#x3D; RedisKeyUtil.getFolloweeKey(userId, entityType);                String followerKey &#x3D; RedisKeyUtil.getFollowerKey(entityType, entityId);                operations.multi(); &#x2F;&#x2F; 启动事务                operations.opsForZSet().add(followeeKey, entityId, System.currentTimeMillis());                operations.opsForZSet().add(followerKey, userId, System.currentTimeMillis());                return operations.exec();            &#125;        &#125;);    &#125;    public void unfollow(int userId, int entityType, int entityId) &#123;        redisTemplate.execute(new SessionCallback() &#123;            @Override            public Object execute(RedisOperations operations) throws DataAccessException &#123;                String followeeKey &#x3D; RedisKeyUtil.getFolloweeKey(userId, entityType);                String followerKey &#x3D; RedisKeyUtil.getFollowerKey(entityType, entityId);                operations.multi();                operations.opsForZSet().remove(followeeKey, entityId);                operations.opsForZSet().remove(followerKey, userId);                return operations.exec();            &#125;        &#125;);    &#125;    &#x2F;&#x2F; 查询某用户关注的实体的数量    public long findFolloweeCount(int userId, int entityType) &#123;        String followeeKey &#x3D; RedisKeyUtil.getFolloweeKey(userId, entityType);        return redisTemplate.opsForZSet().zCard(followeeKey);    &#125;    &#x2F;&#x2F; 查询实体的粉丝数量    public long findFollowerCount(int entityType, int entityId) &#123;        String followerKey &#x3D; RedisKeyUtil.getFollowerKey(entityType, entityId);        return redisTemplate.opsForZSet().zCard(followerKey);    &#125;    &#x2F;&#x2F; 查询当前用户是否已关注该实体    public boolean hasFollowed(int userId, int entityType, int entityId) &#123;        String followeeKey &#x3D; RedisKeyUtil.getFolloweeKey(userId, entityType);        return redisTemplate.opsForZSet().score(followeeKey, entityId) !&#x3D; null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><p>异步请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class FollowController &#123;    @Autowired    private FollowService followService;    @Autowired    private HostHolder hostHolder;    @RequestMapping(path &#x3D; &quot;&#x2F;follow&quot;, method &#x3D; RequestMethod.POST)    @ResponseBody    public String follow(int entityType, int entityId) &#123;        User user &#x3D; hostHolder.getUser(); &#x2F;&#x2F; 如果没登录，用拦截器做一个检查，强制登录才能访问        followService.follow(user.getId(), entityType, entityId);        return CommunityUtil.getJSONString(0, &quot;已关注！&quot;);    &#125;    @RequestMapping(path &#x3D; &quot;&#x2F;unfollow&quot;, method &#x3D; RequestMethod.POST)    @ResponseBody    public String unfollow(int entityType, int entityId) &#123;        User user &#x3D; hostHolder.getUser(); &#x2F;&#x2F; 如果没登录，用拦截器做一个检查，强制登录才能访问        followService.unfollow(user.getId(), entityType, entityId);        return CommunityUtil.getJSONString(0, &quot;已取消关注！&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理异步请求"><a href="#处理异步请求" class="headerlink" title="处理异步请求"></a>处理异步请求</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".follow-btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>follow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">follow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> btn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">"btn-info"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果当前按钮的样式是这个样式(蓝色),没关注</span>      <span class="token comment">// 关注TA</span>      $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>         <span class="token constant">CONTEXT_PATH</span><span class="token operator">+</span><span class="token string">"/follow"</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span><span class="token string">"entityType"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"entityId"</span><span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            data <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// $(btn).text("已关注").removeClass("btn-info").addClass("btn-secondary");</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 灰色样式，可以取消关注</span>      <span class="token comment">// 取消关注</span>      $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>         <span class="token constant">CONTEXT_PATH</span><span class="token operator">+</span><span class="token string">"/unfollow"</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span><span class="token string">"entityType"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"entityId"</span><span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            data <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// $(btn).text("关注TA").removeClass("btn-secondary").addClass("btn-info");</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h2><p>增加用户主页的设置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 个人主页@RequestMapping(path &#x3D; &quot;&#x2F;profile&#x2F;&#123;userId&#125;&quot;, method &#x3D; RequestMethod.GET)public String getProfilePage(@PathVariable(&quot;userId&quot;) int userId, Model model) &#123;    User user &#x3D; userService.findUserById(userId);    if (user &#x3D;&#x3D; null) &#123;        throw new RuntimeException(&quot;该用户不存在！&quot;);    &#125;    &#x2F;&#x2F; 用户    model.addAttribute(&quot;user&quot;, user);    &#x2F;&#x2F; 点赞数量    int likeCount &#x3D; likeService.findUserLikeCount(userId);    model.addAttribute(&quot;likeCount&quot;, likeCount);    &#x2F;&#x2F; 关注数量    long followeeCount &#x3D; followService.findFolloweeCount(userId, ENTITY_TYPE_USER);    model.addAttribute(&quot;followeeCount&quot;, followeeCount);    &#x2F;&#x2F; 粉丝数量    long followerCount &#x3D; followService.findFollowerCount(ENTITY_TYPE_USER, userId);    model.addAttribute(&quot;followerCount&quot;, followerCount);    &#x2F;&#x2F; 是否已关注    boolean hasFollowed &#x3D; false;    if (hostHolder.getUser() !&#x3D; null) &#123;        hasFollowed &#x3D; followService.hasFollowed(hostHolder.getUser().getId(), ENTITY_TYPE_USER, userId);    &#125;    model.addAttribute(&quot;hasFollowed&quot;, hasFollowed);    return &quot;&#x2F;site&#x2F;profile&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="页面模板设置"><a href="#页面模板设置" class="headerlink" title="页面模板设置"></a>页面模板设置</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126201133795.png" alt="image-20220126201133795"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 异步请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-我收到的赞</title>
      <link href="/2022/01/26/niu-ke-xiang-mu-wo-shou-dao-de-zan/"/>
      <url>/2022/01/26/niu-ke-xiang-mu-wo-shou-dao-de-zan/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126095802924.png" alt="image-20220126095802924"></p><p>通过点赞的数据可以把点赞数统计出来，但麻烦，要统计这个人发布多少帖子多少评论，将帖子和评论的赞的数量加起来，<br>因此常用另外一种方式：在用户点赞的时候，再增加一个维度，把这个赞记录下来，再加一份数据，以用户为 key ，把这个数记下<br>将之前的点赞功能进行一个重构。</p><p>在RedisKeyUtil 中增加一个 key</p><p><strong><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126103255851.png" alt="image-20220126103255851"></strong></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126103315808.png" alt="image-20220126103315808"></p><h2 id="重构Service"><a href="#重构Service" class="headerlink" title="重构Service"></a>重构Service</h2><p>之后，改造点赞的业务方法 LikeService<br>需要传入用户的 id ，不是方法上的 usrId，这个点赞的那个人，而要的是被赞的那个人的 id，即实体的拥有者。<br>获取方式：通过实体去查，但得判断实体的类型，是帖子还是评论，查的话还得访问数据库，拉低了性能<br>因此加一个参数：实体的作者，entityUserId<br>查询一定要放到事务之外，redis事务里的命令不会立刻执行，而是将这些命令放到了队列里，提交时统一提交</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126130826656.png" alt="image-20220126130826656"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126130845244.png" alt="image-20220126130845244"></p><h2 id="重构Controller"><a href="#重构Controller" class="headerlink" title="重构Controller"></a>重构Controller</h2><p>增加参数 实体对象的 id</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126135904390.png" alt="image-20220126135904390"></p><h2 id="重构-js"><a href="#重构-js" class="headerlink" title="重构 js"></a>重构 js</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126140020278.png" alt="image-20220126140020278"></p><h2 id="重构帖子详情页"><a href="#重构帖子详情页" class="headerlink" title="重构帖子详情页"></a>重构帖子详情页</h2><p>增加参数 实体对象的 id</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126141125651.png" alt="image-20220126141125651"></p><h2 id="开发个人主页"><a href="#开发个人主页" class="headerlink" title="开发个人主页"></a>开发个人主页</h2><h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><p>点击用户头像跳转至个人主页</p><p>在 UserController 中增加个人主页的处理，处理点赞数</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126140411868.png" alt="image-20220126140411868"></p><h3 id="页面模板处理"><a href="#页面模板处理" class="headerlink" title="页面模板处理"></a>页面模板处理</h3><h4 id="首页处理"><a href="#首页处理" class="headerlink" title="首页处理"></a>首页处理</h4><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126140559149.png" alt="image-20220126140559149"></p><h4 id="帖子详情页处理"><a href="#帖子详情页处理" class="headerlink" title="帖子详情页处理"></a>帖子详情页处理</h4><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126141906908.png" alt="image-20220126141906908"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126141929314.png" alt="image-20220126141929314"></p><h3 id="消息页面处理"><a href="#消息页面处理" class="headerlink" title="消息页面处理"></a>消息页面处理</h3><p>letter页面</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126144349096.png" alt="image-20220126144349096"></p><p>letter-detail 页面</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126144657988.png" alt="image-20220126144657988"></p><h4 id="个人主页做模板处理"><a href="#个人主页做模板处理" class="headerlink" title="个人主页做模板处理"></a>个人主页做模板处理</h4><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126140701918.png" alt="image-20220126140701918"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126140804958.png" alt="image-20220126140804958"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-点赞</title>
      <link href="/2022/01/26/niu-ke-xiang-mu-dian-zan/"/>
      <url>/2022/01/26/niu-ke-xiang-mu-dian-zan/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125210802161.png" alt="image-20220125210802161"></p><p>将数据存到 Redis 中来提升性能</p><p>在向 Redis 中存数据、取数据和操作数据的过程中，是以 key 为关键的，面向 key 编程，为了让 key 方便复用，给 Redis 写一个工具，专门用来生成 key </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class RedisKeyUtil &#123;    private static final String SPLIT &#x3D; &quot;:&quot;;    &#x2F;&#x2F; 帖子和评论统称为实体，要存实体的赞    private static final String PREFIX_ENTITY_LIKE &#x3D; &quot;like:entity&quot;;    &#x2F;&#x2F; 某个实体的赞,实体的赞对应的是一个集合，方便以后有其它需求如：看谁点的赞，存int就实现不了    &#x2F;&#x2F; like:entity:entityType:entityId -&gt; set(userId)    public static String getEntityLikeKey(int entityType, int entityId) &#123;        return PREFIX_ENTITY_LIKE + SPLIT + entityType + SPLIT + entityId; &#x2F;&#x2F; 返回key    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * @author giegie * @create 2022-01-25-21:40 *&#x2F;@Servicepublic class LikeService &#123;    @Autowired    private RedisTemplate redisTemplate;    &#x2F;&#x2F; 点赞    public void like(int userId, int entityType, int entityId) &#123;        &#x2F;&#x2F; 生成key        String entityLikeKey &#x3D; RedisKeyUtil.getEntityLikeKey(entityType, entityId);        &#x2F;&#x2F; 查看集合中是否有用户的id,以此作为点赞还是取消已赞的判断        Boolean isMember &#x3D; redisTemplate.opsForSet().isMember(entityLikeKey, userId);        if (isMember) &#123;            &#x2F;&#x2F; 如果已经有这个用户的id，就实现取消点赞的功能,将这个用户移除集合            redisTemplate.opsForSet().remove(entityLikeKey, userId);        &#125; else &#123;            &#x2F;&#x2F; 如果没有用户id，就添加这个用户            redisTemplate.opsForSet().add(entityLikeKey, userId);        &#125;    &#125;    &#x2F;&#x2F; 查询某实体点赞的数量    public long findEntityLikeCount(int entityType, int entityId) &#123;        String entityLikeKey &#x3D; RedisKeyUtil.getEntityLikeKey(entityType, entityId);        return redisTemplate.opsForSet().size(entityLikeKey);    &#125;    &#x2F;&#x2F; 查询某人对某个实体的点赞状态    public int findEntityLikeStatus(int userId, int entityType, int entityId) &#123;        String entityLikeKey &#x3D; RedisKeyUtil.getEntityLikeKey(entityType, entityId);        return redisTemplate.opsForSet().isMember(entityLikeKey, userId) ? 1 : 0;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class LikeController &#123;    @Autowired    private LikeService likeService;    @Autowired    private HostHolder hostHolder;    @RequestMapping(path &#x3D; &quot;&#x2F;like&quot;, method &#x3D; RequestMethod.POST)    @ResponseBody    public String like(int entityType, int entityId) &#123;        User user &#x3D; hostHolder.getUser();        &#x2F;&#x2F; 点赞        likeService.like(user.getId(), entityType, entityId);        &#x2F;&#x2F; 数量        long likeCount &#x3D; likeService.findEntityLikeCount(entityType, entityId);        &#x2F;&#x2F; 状态        int likeStatus &#x3D; likeService.findEntityLikeStatus(user.getId(), entityType, entityId);        &#x2F;&#x2F; 返回的结果        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;likeCount&quot;, likeCount);        map.put(&quot;likeStatus&quot;, likeStatus);        return CommunityUtil.getJSONString(0, null, map);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理异步请求"><a href="#处理异步请求" class="headerlink" title="处理异步请求"></a>处理异步请求</h3><p>点击超链接时访问服务器，因为是异步请求，要提供一个 js 方法来实现点赞提交请求的逻辑，在超链接上写 js 目前为空，定义一个单击事件，将超链接当一个按钮来用，onclick 里面调 js 方法来发送请求，这个方法需要传一些变量，因此在 onclick 前加上 th ，方法名 like() 是静态的，this：是超链接，因为当前页面有三个赞，点击任何一个赞调的方法都是 like() 用于复用，传 this 知道当前点的是哪个 a </p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125231510444.png" alt="image-20220125231510444"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126093813033.png" alt="image-20220126093813033"></p><p>增加一个discuss.js文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">like</span><span class="token punctuation">(</span><span class="token parameter">btn<span class="token punctuation">,</span>entityType<span class="token punctuation">,</span>entityId</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//第一个参代表超链接(按钮)</span>    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span> <span class="token comment">// 向服务器发送异步请求</span>        <span class="token constant">CONTEXT_PATH</span> <span class="token operator">+</span> <span class="token string">"/like"</span><span class="token punctuation">,</span> <span class="token comment">// 功能的访问路径</span>        <span class="token punctuation">&#123;</span><span class="token string">"entityType"</span><span class="token operator">:</span>entityType<span class="token punctuation">,</span><span class="token string">"entityId"</span><span class="token operator">:</span>entityId<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 携带的参数</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            data <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回的字符串转为js对象</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 判断code==0表示成功</span>                <span class="token comment">// 通过传进来的按钮可以得到下级的b标签和i标签，获取子节点</span>                <span class="token function">$</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>likeCount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 改变赞里面的数量，改字赞还是已赞</span>                <span class="token function">$</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>likeStatus<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token string">'已赞'</span><span class="token operator">:</span><span class="token string">'赞'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p>显示帖子点赞数</p><p>Controller层添加处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126094005327.png" alt="image-20220126094005327"></p><p>处理首页页面</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126094240991.png" alt="image-20220126094240991"></p><h2 id="帖子详情页"><a href="#帖子详情页" class="headerlink" title="帖子详情页"></a>帖子详情页</h2><p>增加相应的点赞数量和状态的处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126094441697.png" alt="image-20220126094441697"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126094458249.png" alt="image-20220126094458249"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126094515321.png" alt="image-20220126094515321"></p><p>处理帖子详情页，显示赞的数量，赞还是已赞的状态</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126094617854.png" alt="image-20220126094617854"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126094653270.png" alt="image-20220126094653270"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220126094713199.png" alt="image-20220126094713199"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 异步请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring整合Redis</title>
      <link href="/2022/01/25/spring-zheng-he-redis/"/>
      <url>/2022/01/25/spring-zheng-he-redis/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125103935501.png" alt="image-20220125103935501"></p><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125105200040.png" alt="image-20220125105200040"></p><h2 id="配置数据库参数"><a href="#配置数据库参数" class="headerlink" title="配置数据库参数"></a>配置数据库参数</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125105229831.png" alt="image-20220125105229831"></p><h2 id="编写配置类"><a href="#编写配置类" class="headerlink" title="编写配置类"></a>编写配置类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class RedisConfig &#123;    @Bean &#x2F;&#x2F;定义第三方的bean,要把哪个对象装配到容器中,就返回这个对象，返回的是RedisTemplate,方法名    &#x2F;&#x2F; 当在定义bean时，方法上声明了这样的参数，spring容器会自动的将这个bean注入进来    public RedisTemplate&lt;String,Object&gt; redisTemplate(RedisConnectionFactory factory)&#123;        &#x2F;&#x2F; 通过template连接数据库，连接是由连接工厂提供的        RedisTemplate&lt;String,Object&gt; template &#x3D; new RedisTemplate&lt;&gt;();&#x2F;&#x2F; 实例化这个bean        template.setConnectionFactory(factory); &#x2F;&#x2F; 将工厂设置给这个template,template有了工厂以后，具备了访问数据库的能力        &#x2F;&#x2F; 配template主要配的是序列化的方式        &#x2F;&#x2F; 因为写的程序是java程序，得到的数据是java类型的数据，最终要把数据存到Redis数据库里，要指定序列化方式即数据转换方式        &#x2F;&#x2F; 设置key的序列化方式        template.setKeySerializer(RedisSerializer.string()); &#x2F;&#x2F; 方法返回一个能够序列化字符串的序列化器        &#x2F;&#x2F; 设置普通的value的序列化方式        template.setValueSerializer(RedisSerializer.json()); &#x2F;&#x2F; value有普通的值、集合、列表，通常将这些值序列化为json，因为json格式的数据是结构化的        &#x2F;&#x2F; hash的value比较特殊，这个value本省就是个hash,hash又分为key-value        &#x2F;&#x2F; 设置hash的key的序列化方式        template.setHashKeySerializer(RedisSerializer.string());        &#x2F;&#x2F; 设置hash的value的序列化方式        template.setHashValueSerializer(RedisSerializer.json());        template.afterPropertiesSet(); &#x2F;&#x2F; 为了让template中的数据生效，做完设置后，触发生效        return template;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：通过 template 去访问 Redis</p><p><strong>重点注意</strong>：隐含问题：事务之内的命令不会立刻执行，而是提交时，统一批量的执行，如果在事务中执行了查询，查询不会立刻返回结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.dao.DataAccessException;import org.springframework.data.redis.core.BoundValueOperations;import org.springframework.data.redis.core.RedisOperations;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.SessionCallback;import org.springframework.test.context.ContextConfiguration;import java.util.concurrent.TimeUnit;&#x2F;** * @author giegie * @create 2022-01-25-15:01 *&#x2F;@SpringBootTest@ContextConfiguration(classes &#x3D; CommunityApplication.class)public class RedisTests &#123;    &#x2F;&#x2F; 哪里要访问Redis,就把template注入到哪里去    @Autowired    private RedisTemplate redisTemplate;    @Test &#x2F;&#x2F; 对String类型访问的方式    public void testString()&#123;        String redisKey &#x3D; &quot;test:count&quot;;        redisTemplate.opsForValue().set(redisKey,1);        System.out.println(redisTemplate.opsForValue().get(redisKey));        System.out.println(redisTemplate.opsForValue().increment(redisKey)); &#x2F;&#x2F; 增加        System.out.println(redisTemplate.opsForValue().decrement(redisKey)); &#x2F;&#x2F; 减少    &#125;    @Test &#x2F;&#x2F; 对hash类型的访问    public void testHashes()&#123;        String redisKey &#x3D; &quot;test:user&quot;;        redisTemplate.opsForHash().put(redisKey,&quot;id&quot;,1);        redisTemplate.opsForHash().put(redisKey,&quot;username&quot;,&quot;zhangsan&quot;);        System.out.println(redisTemplate.opsForHash().get(redisKey,&quot;id&quot;));        System.out.println(redisTemplate.opsForHash().get(redisKey,&quot;username&quot;));    &#125;    @Test &#x2F;&#x2F; 对List列表类型的访问    public void testLists()&#123;        String redisKey &#x3D; &quot;test:ids&quot;;        redisTemplate.opsForList().leftPush(redisKey,101);        redisTemplate.opsForList().leftPush(redisKey,102);        redisTemplate.opsForList().leftPush(redisKey,103);        System.out.println(redisTemplate.opsForList().size(redisKey)); &#x2F;&#x2F; 获取列表中一共有多少数据        System.out.println(redisTemplate.opsForList().index(redisKey,0)); &#x2F;&#x2F; 获取0位置索引对应的值        System.out.println(redisTemplate.opsForList().range(redisKey,0,2)); &#x2F;&#x2F; 获取0~2范围上的数据,0和2是索引        System.out.println(redisTemplate.opsForList().leftPop(redisKey)); &#x2F;&#x2F; 从左边弹出数据        System.out.println(redisTemplate.opsForList().leftPop(redisKey));        System.out.println(redisTemplate.opsForList().leftPop(redisKey));    &#125;    @Test &#x2F;&#x2F; 对集合类型的访问    public void testSets()&#123;        String redisKey &#x3D; &quot;test:teachers&quot;;        redisTemplate.opsForSet().add(redisKey,&quot;刘备&quot;,&quot;关羽&quot;,&quot;张飞&quot;,&quot;赵云&quot;,&quot;诸葛亮&quot;);        System.out.println(redisTemplate.opsForSet().size(redisKey)); &#x2F;&#x2F; 查看数据量        System.out.println(redisTemplate.opsForSet().pop(redisKey)); &#x2F;&#x2F; 弹出一个数据(随机的)        System.out.println(redisTemplate.opsForSet().members(redisKey)); &#x2F;&#x2F; 统计集合中所有数据都是什么    &#125;    @Test &#x2F;&#x2F; 有序集合    public void testSortedSets()&#123;        String redisKey &#x3D; &quot;test:students&quot;;        redisTemplate.opsForZSet().add(redisKey,&quot;唐僧&quot;,80); &#x2F;&#x2F; 第一个是key 第二个是值 的三个是分数        redisTemplate.opsForZSet().add(redisKey,&quot;悟空&quot;,90);        redisTemplate.opsForZSet().add(redisKey,&quot;八戒&quot;,50);        redisTemplate.opsForZSet().add(redisKey,&quot;沙僧&quot;,70);        redisTemplate.opsForZSet().add(redisKey,&quot;白龙马&quot;,60);        System.out.println(redisTemplate.opsForZSet().zCard(redisKey)); &#x2F;&#x2F; 统计一共多少条数据        System.out.println(redisTemplate.opsForZSet().score(redisKey,&quot;八戒&quot;)); &#x2F;&#x2F; 统计某个人的分数        System.out.println(redisTemplate.opsForZSet().reverseRank(redisKey,&quot;八戒&quot;)); &#x2F;&#x2F; 统计某个人的排名(由大到小倒叙)        System.out.println(redisTemplate.opsForZSet().reverseRange(redisKey,0,2)); &#x2F;&#x2F; 查询某个排名范围内的数据(由大到小倒叙)    &#125;    @Test &#x2F;&#x2F; 除了访问5种类型以外，还有公共的命令，访问key    public void testKeys()&#123;        redisTemplate.delete(&quot;test:user&quot;);        System.out.println(redisTemplate.hasKey(&quot;test:user&quot;));        redisTemplate.expire(&quot;test:students&quot;,10, TimeUnit.SECONDS); &#x2F;&#x2F;设置多长时间过期    &#125;    &#x2F;&#x2F; 多次访问同一个key    @Test    public void testBoundOperations()&#123;        &#x2F;&#x2F; 将一个key绑定到一个对象上，产生的这个对象就叫绑定对象，BoundxxOperations        String redisKey &#x3D; &quot;test:count&quot;;        BoundValueOperations operations &#x3D; redisTemplate.boundValueOps(redisKey);        &#x2F;&#x2F; 通过operations对象访问Redis即访问这个key        operations.increment();        operations.increment();        operations.increment();        operations.increment();        operations.increment();        System.out.println(operations.get());    &#125;    &#x2F;&#x2F; Redis数据库不严格满足ACID特点，redis事务机制，在启用事务以后，当再去执行一个redis命令时，并不会立刻执行这个命令，    &#x2F;&#x2F; 而是将这个命令放到一个队列里，再执行一个命令，再放进队列里，直到操作完提交事务时，将其全部发给服务器一起执行    &#x2F;&#x2F; 隐含问题：事务之内的命令不会立刻执行，而是提交时，统一批量的执行，如果在事务中执行了查询，查询不会立刻返回结果    &#x2F;&#x2F; Redis数据库常用编程式事务,redis做事务时，不要在中间做查询（无效）    @Test    public void testTransactional()&#123;        Object obj &#x3D; redisTemplate.execute(new SessionCallback() &#123; &#x2F;&#x2F; 方法内部传一个接口实例，做一个匿名实现            @Override            public Object execute(RedisOperations operations) throws DataAccessException &#123;                String redisKey &#x3D; &quot;test:tx&quot;;                operations.multi(); &#x2F;&#x2F; 启用事务                operations.opsForSet().add(redisKey,&quot;zhangsan&quot;);                operations.opsForSet().add(redisKey,&quot;lisi&quot;);                operations.opsForSet().add(redisKey,&quot;wangwu&quot;);                System.out.println(operations.opsForSet().members(redisKey));                return operations.exec();            &#125;        &#125;);        System.out.println(obj);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Redis</title>
      <link href="/2022/01/25/chu-shi-redis/"/>
      <url>/2022/01/25/chu-shi-redis/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125084537778.png" alt="image-20220125084537778"><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125084537778.png" alt="image-20220125084537778"></p><p>RDB 是以快照的形式，将内存中的数据整体拷贝到硬盘上</p><p>执行RDB存储时会产生阻塞，因此RDB不适合实时备份，而适合定时备份</p><p><a href="https://github.com/microsoftarchive/redis">redis windows 安装</a></p><p>往 redis 库中添加 String 类型的数据 ：set，nosql 中的key 有两个单词相连用：key 的名字为 test:count</p><p>String 类型的存入取出加减</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125093823952.png" alt="image-20220125093823952"></p><p>hash 类型的存入取出</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125094052057.png" alt="image-20220125094052057"></p><p>list 列表类型左进右出式存取</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125094731620.png" alt="image-20220125094731620"></p><p>set 无序集合类型，弹出的值是随机的，可用于抽奖，scard：统计多少个数据，smembers key 查看剩余的内容</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125095116393.png" alt="image-20220125095116393"></p><p>有序集合，给每个值增加了一个附加的分数，按这个分数排序，</p><ul><li>zscore：查询某个值的分数，</li><li>zrank：返回某个值的排名，</li><li>zrange：取某个范围内的数据</li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125095923995.png" alt="image-20220125095923995"></p><p>全局命令(针对所有的类型都有效)：</p><p>keys *：查询当前库里有多少个 key </p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125100500346.png" alt="image-20220125100500346"></p><p>key test*：查询库里以 test 开头的key 有多少个</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125100520946.png" alt="image-20220125100520946"></p><p>type test:key：看某个 key 的类型</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125100649320.png" alt="image-20220125100649320"></p><p>exists test:user：看某个 key 是否存在 1：true，0：false</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125100813080.png" alt="image-20220125100813080"></p><p>设置过期时间，过 * 秒自动删除 key ，用于处理验证码，多少秒过期</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220125101109977.png" alt="image-20220125101109977"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统一记录日志</title>
      <link href="/2022/01/24/tong-yi-ji-lu-ri-zhi/"/>
      <url>/2022/01/24/tong-yi-ji-lu-ri-zhi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124095247250.png" alt="image-20220124095247250"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124095603189.png" alt="image-20220124095603189"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124095958948.png" alt="image-20220124095958948"></p><p>程序中已经开发好处理业务逻辑的一个一个 bean ，称之为目标对象</p><p>目标对象上有很多可以被织入代码的地方，这些地方统称为连接点：Joinpoint</p><p>aop 解决统一处理这些系统需求的方式是将代码定义到一个额外的Bean ，叫方面主键里</p><p>这个方面主键在程序运行的时候或之前就需要被框架织入到某些连接点之上</p><p>方面主键里需要通过 Pointcut：切点 声明代码到底需要织入到哪些对象的哪些位置，需要再写上通知 Advice 方法，来声明这个方面主键到底处理什么样的逻辑</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124103004028.png" alt="image-20220124103004028"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124103712521.png" alt="image-20220124103712521"></p><p>在 community 下新增一个包 aspect </p><p>示例：AlphaAspect 将方面主键声明为一个 Bean 加上一个 @Component 注解 再加一个 @Aspect 注解标明这是个方面主键</p><ul><li>@Pointcut 表明是切点 </li><li>execution：固定的关键字 </li><li>*：方法的返回值，</li><li>com.nowcoder.community.service：包名，</li><li>*：service 包下的所有的类，所有的业务组件</li><li>*：所有的 service 组件里的所有方法</li><li>. . ：所有的参数</li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124151929974.png" alt="image-20220124151929974"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124165631181.png" alt="image-20220124165631181"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常处理</title>
      <link href="/2022/01/24/yi-chang-chu-li/"/>
      <url>/2022/01/24/yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220123195909128.png" alt="image-20220123195909128"></p><p>错误异常从数据层到业务层再到表现层，层层往上抛，最终汇集到表现层。因此抓住表现层，对表现层捕获异常、处理异常，就能处理所有的异常，所以统一处理异常是针对表现层的</p><p>springboot 提供的处理方法：在项目的某个特定的路径下，加上对应特定状态的错误页面，在发现错误时，会自动的跳转到那个页面</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220123235935553.png" alt="image-20220123235935553"></p><p>spring 处理方式：服务器发生异常以后，统一处理，记录日志，因为是人为处理的需要手动重定向到 500 页面，提前在 HomeController 中配置它的请求的处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220123235747490.png" alt="image-20220123235747490"></p><p>在 Controller 包下新增一个 advice 包，并新建一个 ExceptionAdvice 类用来作 Controller 的配置类</p><p>声明的意思：这个注解只会扫描带有 Controller 注解的 Bean </p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220123220040768.png" alt="image-20220123220040768"></p><p>浏览器访问服务器可能是普通的请求，期望返回网页，重定向到 500 也可能是异步请求，需要的是 json ，需要区分处理，判断是普通请求还是异步请求，通过 request 判断</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller.advice;import com.nowcoder.community.util.CommunityUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;&#x2F;** * @author giegie * @create 2022-01-23-21:54 *&#x2F;@ControllerAdvice(annotations &#x3D; Controller.class)public class ExceptionAdvice &#123;    private static final Logger logger &#x3D; LoggerFactory.getLogger(ExceptionAdvice.class);    @ExceptionHandler(&#123;Exception.class&#125;)    public void handleException(Exception e, HttpServletRequest request, HttpServletResponse response) throws IOException &#123;        logger.error(&quot;服务器发生异常：&quot; + e.getMessage()); &#x2F;&#x2F; 异常的概括        for (StackTraceElement element : e.getStackTrace()) &#123; &#x2F;&#x2F; 遍历栈的信息            logger.error(element.toString()); &#x2F;&#x2F; 记录异常的详细的栈的信息        &#125;        String xRequestedWith &#x3D; request.getHeader(&quot;x-requested-with&quot;);        if (&quot;XMLHttpRequest&quot;.equals(xRequestedWith)) &#123;            response.setContentType(&quot;application&#x2F;plain;charset&#x3D;utf-8&quot;);            &#x2F;&#x2F; plain:返回一个普通的json字符串，需要人为转换为js对象            PrintWriter writer &#x3D; response.getWriter();            writer.write(CommunityUtil.getJSONString(1, &quot;服务器异常！&quot;));        &#125; else &#123;            response.sendRedirect(request.getContextPath() + &quot;&#x2F;error&quot;); &#x2F;&#x2F; 重定向到 error页面        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-发送私信</title>
      <link href="/2022/01/24/niu-ke-xiang-mu-fa-song-si-xin/"/>
      <url>/2022/01/24/niu-ke-xiang-mu-fa-song-si-xin/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220123153400719.png" alt="image-20220123153400719"></p><h2 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 新增消息int insertMessage(Message message);&#x2F;&#x2F; 修改消息的状态int updateStatus(List&lt;Integer&gt; ids, int status);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>from_id,to_id,conversation_id,content,status,create_time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertMessage<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into message(<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>)    values (#&#123;fromId&#125;,#&#123;toId&#125;,#&#123;conversationId&#125;,#&#123;content&#125;,#&#123;status&#125;,#&#123;createTime&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateStatus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update message set status = #&#123;status&#125;    where id in    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Autowiredprivate SensitiveFilter sensitiveFilter;public int addMessage(Message message) &#123;    message.setContent(HtmlUtils.htmlEscape(message.getContent()));    message.setContent(sensitiveFilter.filter(message.getContent()));    return messageMapper.insertMessage(message);&#125;public int readMessage(List&lt;Integer&gt; ids) &#123;    return messageMapper.updateStatus(ids, 1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><p>增加设置已读</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(path &#x3D; &quot;&#x2F;letter&#x2F;detail&#x2F;&#123;conversationId&#125;&quot;, method &#x3D; RequestMethod.GET)public String getLetterDetail(@PathVariable(&quot;conversationId&quot;) String conversationId, Page page, Model model) &#123;    &#x2F;&#x2F; 分页信息    page.setLimit(5);    page.setPath(&quot;&#x2F;letter&#x2F;detail&#x2F;&quot; + conversationId);    page.setRows(messageService.findLetterCount(conversationId));    &#x2F;&#x2F; 私信列表    List&lt;Message&gt; letterList &#x3D; messageService.findLetters(conversationId, page.getOffset(), page.getLimit());    List&lt;Map&lt;String, Object&gt;&gt; letters &#x3D; new ArrayList&lt;&gt;();    if (letterList !&#x3D; null) &#123;        for (Message message : letterList) &#123;            Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();            map.put(&quot;letter&quot;, message);            map.put(&quot;fromUser&quot;, userService.findUserById(message.getFromId()));            letters.add(map);        &#125;    &#125;    model.addAttribute(&quot;letters&quot;, letters);    &#x2F;&#x2F; 私信目标    model.addAttribute(&quot;target&quot;, getLetterTarget(conversationId));    &#x2F;&#x2F; 设置已读    List&lt;Integer&gt; ids &#x3D; getLetterIds(letterList);    if (!ids.isEmpty()) &#123;        messageService.readMessage(ids);    &#125;    return &quot;&#x2F;site&#x2F;letter-detail&quot;;&#125;private List&lt;Integer&gt; getLetterIds(List&lt;Message&gt; letterList) &#123;List&lt;Integer&gt; ids &#x3D; new ArrayList&lt;&gt;();if (letterList !&#x3D; null) &#123;for (Message message : letterList) &#123;if (hostHolder.getUser().getId() &#x3D;&#x3D; message.getToId() &amp;&amp; message.getStatus() &#x3D;&#x3D; 0) &#123;ids.add(message.getId());&#125;&#125;&#125;    return ids;&#125;@RequestMapping(path &#x3D; &quot;&#x2F;letter&#x2F;send&quot;, method &#x3D; RequestMethod.POST)@ResponseBodypublic String sendLetter(String toName, String content) &#123;    User target &#x3D; userService.findUserByName(toName);    if (target &#x3D;&#x3D; null) &#123;        return CommunityUtil.getJSONString(1, &quot;目标用户不存在！&quot;);    &#125;    Message message &#x3D; new Message();    message.setFromId(hostHolder.getUser().getId());    message.setToId(target.getId());    if (message.getFromId() &lt; message.getToId()) &#123;        message.setConversationId(message.getFromId() + &quot;_&quot; + message.getToId());    &#125; else &#123;        message.setConversationId(message.getToId() + &quot;_&quot; + message.getFromId());    &#125;    message.setContent(content);    message.setCreateTime(new Date());    messageService.addMessage(message);    return CommunityUtil.getJSONString(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置页面模板"><a href="#设置页面模板" class="headerlink" title="设置页面模板"></a>设置页面模板</h2><p>异步请求，服务器返回 json 字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#sendBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>send_letter<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".close"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>delete_msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 点击发送按钮后，发送框消失</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">send_letter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#sendModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"hide"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> toName <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#recipient-name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message-text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>        <span class="token constant">CONTEXT_PATH</span> <span class="token operator">+</span> <span class="token string">"/letter/send"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token string">"toName"</span><span class="token operator">:</span> toName<span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token operator">:</span> content<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#hintBody"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"发送成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#hintBody"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#hintModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 弹出提示框</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#hintModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"hide"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 提示框消失</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">delete_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO 删除数据</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token string">".media"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-私信列表(删除私信)</title>
      <link href="/2022/01/24/niu-ke-xiang-mu-si-xin-lie-biao-shan-chu-si-xin/"/>
      <url>/2022/01/24/niu-ke-xiang-mu-si-xin-lie-biao-shan-chu-si-xin/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220122195843689.png" alt="image-20220122195843689"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124212625275.png" alt="image-20220124212625275"></p><h2 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapperpublic interface MessageMapper &#123;    &#x2F;&#x2F; 查询当前用户的会话列表，针对每个会话只返回一条最新的私信    List&lt;Message&gt; selectConversations(int userId, int offset, int limit);    &#x2F;&#x2F; 查询当前用户的会话数量    int selectConversationCount(int userId);    &#x2F;&#x2F; 查询某个会话所包含的私信列表    List&lt;Message&gt; selectLetters(String conversationId, int offset, int limit);    &#x2F;&#x2F; 查询某个会话所包含的私信数量    int selectLetterCount(String conversationId);    &#x2F;&#x2F; 查询未读私信的数量    int selectLetterUnreadCount(int userId, String conversationId);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.nowcoder.community.dao.MessageMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id        ,from_id,to_id,conversation_id,content,status,create_time    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectConversations<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from message        where id in (        select max(id) from message        where status != 2        and from_id != 1        and (from_id = #&#123;userId&#125; or to_id = #&#123;userId&#125;)        group by conversation_id        )        order by id desc        limit #&#123;offset&#125;,#&#123;limit&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectConversationCount<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select count(m.maxid)        from (            select max(id) as maxid            from message            where status !=2            and from_id != 1            and (from_id = #&#123;userId&#125;            or to_id = #&#123;userId&#125;)            group by conversation_id             ) as m    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectLetters<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from message        where status != 2        and from_id != 1        and conversation_id = #&#123;conversationId&#125;        order by id desc        limit #&#123;offset&#125;,#&#123;limit&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectLetterCount<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select count(id)        from message        where status != 2        and from_id != 1        and conversation_id = #&#123;conversationId&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectLetterUnreadCount<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select count(id)        from message        where status = 0        and from_id != 1        and to_id = #&#123;userId&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversationId!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and conversation_id = #&#123;conversationId&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class MessageService &#123;    @Autowired    private MessageMapper messageMapper;    public List&lt;Message&gt; findConversations(int userId, int offset, int limit) &#123;        return messageMapper.selectConversations(userId, offset, limit);    &#125;    public int findConversationCount(int userId) &#123;        return messageMapper.selectConversationCount(userId);    &#125;    public List&lt;Message&gt; findLetters(String conversationId, int offset, int limit) &#123;        return messageMapper.selectLetters(conversationId, offset, limit);    &#125;    public int findLetterCount(String conversationId) &#123;        return messageMapper.selectLetterCount(conversationId);    &#125;    public int findLetterUnreadCount(int userId, String conversationId) &#123;        return messageMapper.selectLetterUnreadCount(userId, conversationId);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class MessageController &#123;    @Autowired    private MessageService messageService;    @Autowired    private HostHolder hostHolder;    @Autowired    private UserService userService;    @RequestMapping(path &#x3D; &quot;&#x2F;letter&#x2F;list&quot;, method &#x3D; RequestMethod.GET)    public String getLetterList(Model model, Page page) &#123;        User user &#x3D; hostHolder.getUser();        &#x2F;&#x2F;分页信息        page.setLimit(5);        page.setPath(&quot;&#x2F;letter&#x2F;list&quot;);        page.setRows(messageService.findConversationCount(user.getId()));        &#x2F;&#x2F;会话列表        List&lt;Message&gt; conversationList &#x3D; messageService.findConversations(                user.getId(), page.getOffset(), page.getLimit());        List&lt;Map&lt;String, Object&gt;&gt; conversations &#x3D; new ArrayList&lt;&gt;();        if (conversationList !&#x3D; null) &#123;            for (Message message : conversationList) &#123;                Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();                map.put(&quot;conversation&quot;, message);                map.put(&quot;letterCount&quot;, messageService.findLetterCount(message.getConversationId()));                map.put(&quot;unreadCount&quot;, messageService.findLetterUnreadCount(user.getId(), message.getConversationId()));                int targetId &#x3D; user.getId() &#x3D;&#x3D; message.getFromId() ? message.getToId() : message.getFromId();                map.put(&quot;target&quot;, userService.findUserById(targetId));                conversations.add(map);            &#125;        &#125;        model.addAttribute(&quot;conversations&quot;, conversations);        &#x2F;&#x2F; 查询未读的消息数量        int letterUnreadCount &#x3D; messageService.findLetterUnreadCount(user.getId(), null);        model.addAttribute(&quot;letterUnreadCount&quot;, letterUnreadCount);        return &quot;&#x2F;site&#x2F;letter&quot;;    &#125;    @RequestMapping(path &#x3D; &quot;&#x2F;letter&#x2F;detail&#x2F;&#123;conversationId&#125;&quot;, method &#x3D; RequestMethod.GET)    public String getLetterDetail(@PathVariable(&quot;conversationId&quot;) String conversationId, Page page, Model model) &#123;        &#x2F;&#x2F; 分页信息        page.setLimit(5);        page.setPath(&quot;&#x2F;letter&#x2F;detail&#x2F;&quot; + conversationId);        page.setRows(messageService.findLetterCount(conversationId));        &#x2F;&#x2F; 私信列表        List&lt;Message&gt; letterList &#x3D; messageService.findLetters(conversationId, page.getOffset(), page.getLimit());        List&lt;Map&lt;String, Object&gt;&gt; letters &#x3D; new ArrayList&lt;&gt;();        if (letterList !&#x3D; null) &#123;            for (Message message : letterList) &#123;                Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();                map.put(&quot;letter&quot;, message);                map.put(&quot;fromUser&quot;, userService.findUserById(message.getFromId()));                letters.add(map);            &#125;        &#125;        model.addAttribute(&quot;letters&quot;, letters);        &#x2F;&#x2F; 私信目标        model.addAttribute(&quot;target&quot;, getLetterTarget(conversationId));        return &quot;&#x2F;site&#x2F;letter-detail&quot;;    &#125;    private User getLetterTarget(String conversationId) &#123;        String[] ids &#x3D; conversationId.split(&quot;_&quot;);        int id0 &#x3D; Integer.parseInt(ids[0]);        int id1 &#x3D; Integer.parseInt(ids[1]);        if (hostHolder.getUser().getId() &#x3D;&#x3D; id0) &#123;            return userService.findUserById(id1);        &#125; else &#123;            return userService.findUserById(id0);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理页面模板"><a href="#处理页面模板" class="headerlink" title="处理页面模板"></a>处理页面模板</h2><h3 id="letter-页面处理"><a href="#letter-页面处理" class="headerlink" title="letter 页面处理"></a>letter 页面处理</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124213944033.png" alt="image-20220124213944033"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124214314923.png" alt="image-20220124214314923"></p><p>复用首页的分页</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124214815481.png" alt="image-20220124214815481"></p><p>如果未读消息不为0则显示</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124214940575.png" alt="image-20220124214940575"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124220018443.png" alt="image-20220124220018443"></p><h3 id="letter-detail-页面处理"><a href="#letter-detail-页面处理" class="headerlink" title="letter-detail 页面处理"></a>letter-detail 页面处理</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124221436190.png" alt="image-20220124221436190"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124221751526.png" alt="image-20220124221751526"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124221620832.png" alt="image-20220124221620832"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124222346336.png" alt="image-20220124222346336"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124222548418.png" alt="image-20220124222548418"></p><h2 id="删除私信"><a href="#删除私信" class="headerlink" title="删除私信"></a>删除私信</h2><h3 id="Service层-1"><a href="#Service层-1" class="headerlink" title="Service层"></a>Service层</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127193053780.png" alt="image-20220127193053780"></p><h3 id="Controller层-1"><a href="#Controller层-1" class="headerlink" title="Controller层"></a>Controller层</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127193125800.png" alt="image-20220127193125800"></p><h3 id="页面处理"><a href="#页面处理" class="headerlink" title="页面处理"></a>页面处理</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127193154095.png" alt="image-20220127193154095"></p><h3 id="异步请求处理"><a href="#异步请求处理" class="headerlink" title="异步请求处理"></a>异步请求处理</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220127193220136.png" alt="image-20220127193220136"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-添加评论</title>
      <link href="/2022/01/24/niu-ke-xiang-mu-tian-jia-ping-lun/"/>
      <url>/2022/01/24/niu-ke-xiang-mu-tian-jia-ping-lun/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220122151013863.png" alt="image-20220122151013863"></p><h2 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h2><p>增加插入评论的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">int insertComment(Comment comment);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    user_id    ,entity_type,entity_id,target_id,content,status,create_time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertComment<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into comment(<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>)    values (#&#123;userId&#125;,#&#123;entityType&#125;,#&#123;entityId&#125;,#&#123;targetId&#125;,#&#123;content&#125;,#&#123;status&#125;,#&#123;createTime&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Autowiredprivate CommentMapper commentMapper;@Autowiredprivate SensitiveFilter sensitiveFilter;@Autowiredprivate DiscussPostService discussPostService;@Transactional(isolation &#x3D; Isolation.READ_COMMITTED,propagation &#x3D; Propagation.REQUIRED)public int addComment(Comment comment)&#123;    if (comment &#x3D;&#x3D; null)&#123;    throw new IllegalArgumentException(&quot;参数不能为空!&quot;);    &#125;    &#x2F;&#x2F; 添加评论,过滤    comment.setContent(HtmlUtils.htmlEscape(comment.getContent()));    comment.setContent(sensitiveFilter.filter(comment.getContent()));    int rows &#x3D; commentMapper.insertComment(comment);    &#x2F;&#x2F; 更新帖子评论数量    if (comment.getEntityType() &#x3D;&#x3D; ENTITY_TYPE_POST)&#123;        int count &#x3D; commentMapper.selectCountByEntity(comment.getEntityType(),comment.getEntityId());        discussPostService.updateCommentCount(comment.getEntityId(),count);    &#125;    return rows;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controller@RequestMapping(&quot;&#x2F;comment&quot;)public class CommentController &#123;    @Autowired    private CommentService commentService;    @Autowired    private HostHolder hostHolder;    @RequestMapping(path &#x3D; &quot;&#x2F;add&#x2F;&#123;discussPostId&#125;&quot;,method &#x3D; RequestMethod.POST)    public String addComment(@PathVariable(&quot;discussPostId&quot;) int discussPostId, Comment comment)&#123;        comment.setUserId(hostHolder.getUser().getId());        comment.setStatus(0);        comment.setCreateTime(new Date());        commentService.addComment(comment);        return &quot;redirect:&#x2F;discuss&#x2F;detail&#x2F;&quot;+discussPostId;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理页面模板"><a href="#处理页面模板" class="headerlink" title="处理页面模板"></a>处理页面模板</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 回帖输入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container mt-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>replyform<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;|/comment/add/$&#123;post.id&#125;|&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>replyform<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>在这里畅所欲言你的看法吧!<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>entityType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>entityId<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;post.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>回<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>帖<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 回复输入框 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pb-3 pt-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;|/comment/add/$&#123;post.id&#125;|&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input-size<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入你的观点<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>entityType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>entityId<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;cvo.comment.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-right mt-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary btn-sm<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">#</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>回<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>复<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|huifu-$&#123;rvoStat.count&#125;|<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-4 collapse<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;|/comment/add/$&#123;post.id&#125;|&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input-size<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|回复$&#123;rvo.user.username&#125;|<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>entityType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>entityId<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;cvo.comment.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>targetId<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;rvo.user.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-right mt-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary btn-sm<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">#</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>回<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>复<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目-显示评论</title>
      <link href="/2022/01/24/niu-ke-xiang-mu-xian-shi-ping-lun/"/>
      <url>/2022/01/24/niu-ke-xiang-mu-xian-shi-ping-lun/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121173855727.png" alt="image-20220121173855727"></p><p><img src="C:\Users\QX\AppData\Roaming\Typora\typora-user-images\image-20220121184416521.png" alt="image-20220121184416521"></p><p>可以针对帖子，针对评论，针对用户，针对。。。发表评论，因此将评论的业务进行抽象，用一张表解决所有评论的问题</p><p>实体字段：entity_type，entity_id</p><p>entity_type：评论的目标的类别，例如：</p><ul><li>1 代表帖子</li><li>2 代表评论</li><li>3 代表用户</li><li>4 代表题</li><li>5 代表课程</li></ul><p>entity_id：这一个类型的目标具体是哪个目标，具体228的帖子还是229的帖子</p><p>target_id：回复指向某个人时，用于记住这个被指向的目标人</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124173507627.png" alt="image-20220124173507627"></p><h2 id="Dao-层"><a href="#Dao-层" class="headerlink" title="Dao 层"></a>Dao 层</h2><p><a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1217864791925600">sql 分页查询</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapperpublic interface CommentMapper &#123;    List&lt;Comment&gt; selectCommentsByEntity(int entityType, int entityId, int offset, int limit);    int selectCountByEntity(int entityType, int entityId);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.nowcoder.community.dao.CommentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id        ,user_id,entity_type,entity_id,target_id,content,status,create_time    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectCommentsByEntity<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from comment        where status = 0        and entity_type = #&#123;entityType&#125;        and entity_id = #&#123;entityId&#125;        order by create_time asc        limit #&#123;offset&#125;,#&#123;limit&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectCountByEntity<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select count(id)        from comment        where status = 0          and entity_type = #&#123;entityType&#125;          and entity_id = #&#123;entityId&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">public List&lt;Comment&gt; findCommentsByEntity(int entityType, int entityId, int offset, int limit) &#123;    return commentMapper.selectCommentsByEntity(entityType, entityId, offset, limit);&#125;public int findCommentCount(int entityType, int entityId) &#123;    return commentMapper.selectCountByEntity(entityType, entityId);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><p>page 接收整理分页条件 ，只要是实体类型JavaBean ，声明在条件当中作为一个参数，SpringMVC 都会把 bean 存入这个 model 里，在页面上，通过model 可以获取这个 page </p><p>帖子表里有个记录评论数的字段 comment_count ，可以从帖子里获取评论数，也可以从评论表里统计出来</p><p>通过一共多少条评论数算出总的页数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(path &#x3D; &quot;&#x2F;detail&#x2F;&#123;discussPostId&#125;&quot;, method &#x3D; RequestMethod.GET)public String getDiscussPost(@PathVariable(&quot;discussPostId&quot;) int discussPostId, Model model, Page page) &#123;    &#x2F;&#x2F; 帖子    DiscussPost post &#x3D; discussPostService.findDiscussPostById(discussPostId);    model.addAttribute(&quot;post&quot;, post);    &#x2F;&#x2F; 作者    User user &#x3D; userService.findUserById(post.getUserId());    model.addAttribute(&quot;user&quot;, user);    &#x2F;&#x2F; 评论分页信息    page.setLimit(5);    page.setPath(&quot;&#x2F;discuss&#x2F;detail&#x2F;&quot; + discussPostId);    page.setRows(post.getCommentCount());    &#x2F;&#x2F; 评论：给帖子的评论    &#x2F;&#x2F; 回复：给评论的评论    &#x2F;&#x2F; 评论列表    List&lt;Comment&gt; commentList &#x3D; commentService.findCommentsByEntity(        ENTITY_TYPE_POST, post.getId(), page.getOffset(), page.getLimit());    &#x2F;&#x2F; 评论VO列表 viewObject    List&lt;Map&lt;String, Object&gt;&gt; commentVoList &#x3D; new ArrayList&lt;&gt;();    if (commentList !&#x3D; null) &#123;        for (Comment comment : commentList) &#123;            &#x2F;&#x2F; 评论VO            Map&lt;String, Object&gt; commentVo &#x3D; new HashMap&lt;&gt;();            &#x2F;&#x2F; 评论            commentVo.put(&quot;comment&quot;, comment);            &#x2F;&#x2F; 作者            commentVo.put(&quot;user&quot;, userService.findUserById(comment.getUserId()));            &#x2F;&#x2F; 回复列表            List&lt;Comment&gt; replyList &#x3D; commentService.findCommentsByEntity(                ENTITY_TYPE_COMMENT, comment.getId(), 0, Integer.MAX_VALUE);            &#x2F;&#x2F; 回复VO列表            List&lt;Map&lt;String, Object&gt;&gt; replyVoList &#x3D; new ArrayList&lt;&gt;();            if (replyList !&#x3D; null) &#123;                for (Comment reply : replyList) &#123;                    Map&lt;String, Object&gt; replyVo &#x3D; new HashMap&lt;&gt;();                    &#x2F;&#x2F; 回复                    replyVo.put(&quot;reply&quot;, reply);                    &#x2F;&#x2F; 作者                    replyVo.put(&quot;user&quot;, userService.findUserById(reply.getUserId()));                    &#x2F;&#x2F; 回复目标                    User target &#x3D; reply.getTargetId() &#x3D;&#x3D; 0 ? null : userService.findUserById(reply.getTargetId());                    replyVo.put(&quot;target&quot;, target);                    replyVoList.add(replyVo);                &#125;            &#125;            commentVo.put(&quot;replys&quot;, replyVoList);            &#x2F;&#x2F; 回复数量            int replyCount &#x3D; commentService.findCommentCount(ENTITY_TYPE_COMMENT, comment.getId());            commentVo.put(&quot;replyCount&quot;, replyCount);            commentVoList.add(commentVo);        &#125;    &#125;    model.addAttribute(&quot;comments&quot;, commentVoList);    return &quot;&#x2F;site&#x2F;discuss-detail&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理页面模板"><a href="#处理页面模板" class="headerlink" title="处理页面模板"></a>处理页面模板</h2><p>discuss-detail.html</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124203513774.png" alt="image-20220124203513774"></p><p>分页复用首页的处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124203601068.png" alt="image-20220124203601068"></p><p>cvoStat： thymeleaf 会给我们提供一个隐含的状态对象 状态对象的名字是固定的形式（循环变量名+Stat），可以通过它获取循环次数：cvoStart.count </p><p>帖子的评论</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124204336078.png" alt="image-20220124204336078"></p><p>帖子评论的回复</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124205638686.png" alt="image-20220124205638686"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220124210742392.png" alt="image-20220124210742392"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>事务管理</title>
      <link href="/2022/01/21/niu-ke-xiang-mu-shi-wu-guan-li/"/>
      <url>/2022/01/21/niu-ke-xiang-mu-shi-wu-guan-li/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121153938704.png" alt="image-20220121153938704"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121154336660.png" alt="image-20220121154336660"></p><h2 id="第一类丢失更新"><a href="#第一类丢失更新" class="headerlink" title="第一类丢失更新"></a>第一类丢失更新</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121155032455.png" alt="image-20220121155032455"></p><h2 id="第二类丢失更新"><a href="#第二类丢失更新" class="headerlink" title="第二类丢失更新"></a>第二类丢失更新</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121155102486.png" alt="image-20220121155102486"></p><h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121155236806.png" alt="image-20220121155236806"></p><h2 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121155257974.png" alt="image-20220121155257974"></p><h2 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121155415647.png" alt="image-20220121155415647"></p><h2 id="事物隔离级别"><a href="#事物隔离级别" class="headerlink" title="事物隔离级别"></a>事物隔离级别</h2><p>主要用 read committed 和 repeatable read</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121155637199.png" alt="image-20220121155637199"></p><h2 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h2><p>锁要自己实现</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121160027895.png" alt="image-20220121160027895"></p><h2 id="Spring-事物管理"><a href="#Spring-事物管理" class="headerlink" title="Spring 事物管理"></a>Spring 事物管理</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121160402413.png" alt="image-20220121160402413"></p><h2 id="测试（插入注解方法，常用）"><a href="#测试（插入注解方法，常用）" class="headerlink" title="测试（插入注解方法，常用）"></a>测试（插入注解方法，常用）</h2><p>在方法上加上注解 @Transactional </p><ul><li>isolation：隔离级别为…</li><li>propagation：事物的传播机制</li></ul><p>传播机制：在写业务方法时有可能调用另外的业务组件方法即：业务方法 A 可能会调用业务方法 B ，两个方法都可能加上注解，去管理事物，如果 A 调了 B 那么事物以什么为准呢？（以 A 自身事务为准还是以 B 事务为准还是其他），涉及了两个事务交叉在一起的问题，事务传播机制就是解决这种交叉的问题</p><ul><li>REQUIRED：支持当前事务，A 调 B  B 要按照 A 的事务执行（对 B 来说 A 就是外部事务），如果不存在则创建新事务。</li><li>REQUIRES_NEW：创建一个新事务，并且暂停当前事务（外部事务），A调B，B无视A的事务，创建新事务。</li><li>NESTED：如果当前存在事务（外部事务），则嵌套在该事务中执行，A调B，A有事务，B嵌套在A的事务里执行（B有独立的提交和回滚），如果不存在就和 REQUIRED 一样创建新事务。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Autowiredprivate AlphaDao alphaDao;@Autowiredprivate UserMapper userMapper;&#x2F;&#x2F; REQUIRED&#x2F;&#x2F; REQUIRES_NEW&#x2F;&#x2F; NESTED@Transactional(isolation &#x3D; Isolation.READ_COMMITTED,propagation &#x3D; Propagation.REQUIRED)public Object save1()&#123;    &#x2F;&#x2F; 新增用户    User user &#x3D; new User();    user.setUsername(&quot;alpha&quot;);    user.setSalt(CommunityUtil.generateUUID().substring(0,5));    user.setPassword(CommunityUtil.md5(&quot;123&quot;+user.getSalt()));    user.setEmail(&quot;alpha@qq.com&quot;);    user.setHeaderUrl(&quot;http:&#x2F;&#x2F;image.nowcoder.com&#x2F;head&#x2F;99t.png&quot;);    user.setCreateTime(new Date());    userMapper.insertUser(user);    &#x2F;&#x2F; 新增帖子    DiscussPost post &#x3D; new DiscussPost();    post.setUserId(user.getId());    post.setTitle(&quot;Hello&quot;);    post.setContent(&quot;新人报道！&quot;);    post.setCreateTime(new Date());    discussPostMapper.insertDiscussPostRows(post);    Integer.valueOf(&quot;abc&quot;);    return &quot;ok&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TransactionTests &#123;    @Autowired    private AlphaService alphaService;    @Test    public void testSave1()&#123;        Object obj &#x3D; alphaService.save1();        System.out.println(obj);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序报错，查看数据库，未插入数据（当程序出错时回滚，保证了业务的完整性）</p><h2 id="测试（编程式）"><a href="#测试（编程式）" class="headerlink" title="测试（编程式）"></a>测试（编程式）</h2><p>业务逻辑比较复杂，只需管理其中一小部分的时候用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Object save2() &#123;    transactionTemplate.setIsolationLevel(TransactionDefinition.ISOLATION_READ_COMMITTED);    transactionTemplate.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);    return transactionTemplate.execute(new TransactionCallback&lt;Object&gt;() &#123;        @Override        public Object doInTransaction(TransactionStatus status) &#123;            &#x2F;&#x2F; 这个方法是一个回调方法，是由template底层自动调的，但逻辑是自己提供的            &#x2F;&#x2F; 在方法里实现想要的逻辑，template在调方法时，实现事务的自动管理，status自动传入            &#x2F;&#x2F; 新增用户            User user &#x3D; new User();            user.setUsername(&quot;beta&quot;);            user.setSalt(CommunityUtil.generateUUID().substring(0, 5));            user.setPassword(CommunityUtil.md5(&quot;123&quot; + user.getSalt()));            user.setEmail(&quot;alpha@qq.com&quot;);            user.setHeaderUrl(&quot;http:&#x2F;&#x2F;image.nowcoder.com&#x2F;head&#x2F;999t.png&quot;);            user.setCreateTime(new Date());            userMapper.insertUser(user);            &#x2F;&#x2F; 新增帖子            DiscussPost post &#x3D; new DiscussPost();            post.setUserId(user.getId());            post.setTitle(&quot;Hello world !&quot;);            post.setContent(&quot;I am new here ！&quot;);            post.setCreateTime(new Date());            discussPostMapper.insertDiscussPostRows(post);            Integer.valueOf(&quot;abc&quot;);            return &quot;ok &quot;;        &#125;    &#125;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>帖子详情</title>
      <link href="/2022/01/21/niu-ke-xiang-mu-tie-zi-xiang-qing/"/>
      <url>/2022/01/21/niu-ke-xiang-mu-tie-zi-xiang-qing/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121111045307.png" alt="image-20220121111045307"></p><p>用th:text不会解析html，用th:utext会解析html，在页面中显示相应的样式</p><p>用户在发帖时，可能带有标签，用utext 可以正常显示标签的样子，若不用utext 会显示转义的字符</p><h2 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h2><p>增加方法根据帖子id 查询帖子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">DiscussPost selectDiscussPostById(int id);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在discusspost-mapper内编写对应的sql语句</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectDiscussPostById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DiscussPost<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    from discuss_post    where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><p>DiscussPostService中增加对应的查询帖子业务</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">public DiscussPost findDiscussPostById(int id)&#123;return discussPostMapper.selectDiscussPostById(id);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><p>ontroller负责请求转发，接受页面过来的参数，传给Service处理，接到返回值，再传给页面。controller层一般会和前台的js文件进行数据的交互， controller层是前台数据的接收器，后台处理好的数据也是通过controller层传递到前台显示的。</p><p>路径：/detail/{discussPostId} ，discussPostId 帖子id，变化的值，请求方式get</p><p><a href="https://blog.csdn.net/u011410529/article/details/66974974">@RequestParam，@PathParam，@PathVariable等注解区别</a></p><p>@PathVariable 这个注解能够识别URL里面的一个模板</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Autowiredprivate UserService userService;@Autowiredprivate DiscussPostService discussPostService;@RequestMapping(path &#x3D; &quot;&#x2F;detail&#x2F;&#123;discussPostId&#125;&quot;, method &#x3D; RequestMethod.GET)public String getDiscussPost(@PathVariable(&quot;discussPostId&quot;) int discussPostId, Model model) &#123;    &#x2F;&#x2F; 帖子    DiscussPost post &#x3D; discussPostService.findDiscussPostById(discussPostId);    model.addAttribute(&quot;post&quot;, post);    &#x2F;&#x2F; 作者    User user &#x3D; userService.findUserById(post.getUserId());    model.addAttribute(&quot;user&quot;, user);    return &quot;&#x2F;site&#x2F;discuss-detail&quot;; &#x2F;&#x2F; 跳转到帖子的详情页&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在首页上的帖子标题增加访问链接"><a href="#在首页上的帖子标题增加访问链接" class="headerlink" title="在首页上的帖子标题增加访问链接"></a>在首页上的帖子标题增加访问链接</h2><p>处理静态资源的访问路径，获取帖子的 id 使用到社区首页开发的内容</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;|/discuss/detail/$&#123;map.post.id&#125;|&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.post.title&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>备战春招，面试刷题跟他复习，一个月全搞定！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="帖子详情页"><a href="#帖子详情页" class="headerlink" title="帖子详情页"></a>帖子详情页</h2><h3 id="thymeleaf-模板处理"><a href="#thymeleaf-模板处理" class="headerlink" title="thymeleaf 模板处理"></a>thymeleaf 模板处理</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121130318490.png" alt="image-20220121130318490"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121130332697.png" alt="image-20220121130332697"></p><h3 id="复用首页的头部"><a href="#复用首页的头部" class="headerlink" title="复用首页的头部"></a>复用首页的头部</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121130421889.png" alt="image-20220121130421889"></p><h3 id="修改或增加thymeleaf-模板处理方法"><a href="#修改或增加thymeleaf-模板处理方法" class="headerlink" title="修改或增加thymeleaf 模板处理方法"></a>修改或增加thymeleaf 模板处理方法</h3><p>获取对应帖子和作者对象里的属性</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121130617442.png" alt="image-20220121130617442"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121130649781.png" alt="image-20220121130649781"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121130714680.png" alt="image-20220121130714680"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>发布帖子</title>
      <link href="/2022/01/21/niu-ke-xiang-mu-fa-bu-tie-zi/"/>
      <url>/2022/01/21/niu-ke-xiang-mu-fa-bu-tie-zi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120205644840.png"></p><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120212805901.png"></p><h2 id="根据包中的api-编写方法"><a href="#根据包中的api-编写方法" class="headerlink" title="根据包中的api 编写方法"></a>根据包中的api 编写方法</h2><p>服务器给浏览器返回的JSON数据，往往会包含几部分内容</p><ol><li>通常会给浏览器返回一个编号，如 0,1 编码代表什么意思</li><li>给浏览器返回一个提示信息，成功还是失败 …. </li><li>返回业务数据</li></ol><p>JSON返回的是字符串，code ：编码，msg：提示信息，map：封装的业务数据，将这三个条件封装为JSON对象，将JSON对象转换为字符串，就得到了JSON格式的字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static String getJSONString(int code, String msg, Map&lt;String, Object&gt; map) &#123;        JSONObject json &#x3D; new JSONObject();        json.put(&quot;code&quot;, code);        json.put(&quot;msg&quot;, msg);        if (map !&#x3D; null) &#123;            for (String key : map.keySet()) &#123; &#x2F;&#x2F; 遍历map的key                json.put(key, map.get(key)); &#x2F;&#x2F; 将value封装进JSON对象            &#125;        &#125;        return json.toJSONString(); &#x2F;&#x2F; 转变为JSON类型的字符串    &#125;    &#x2F;&#x2F; 有时候没有map或msg，增加重载方法，便于调用    public static String getJSONString(int code, String msg) &#123;        return getJSONString(code, msg, null);    &#125;    public static String getJSONString(int code) &#123;        return getJSONString(code, null, null);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><p>浏览器将数据转换为 js 对象，可以得到 key 对应的值，实现前后端的交互<br> <img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120211146907.png"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120211201328.png"></p><h2 id="演示-AJAX-示例，如何发送异步请求"><a href="#演示-AJAX-示例，如何发送异步请求" class="headerlink" title="演示 AJAX 示例，如何发送异步请求"></a>演示 AJAX 示例，如何发送异步请求</h2><p>Controller 层增加处理方法</p><p>方式：post 因为返回的是数据不是网页，加@ResponseBody<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120214427571.png"></p><ul><li><p>增加一个静态网页，写 jquery 代码，来访问这个方法</p></li><li><p>写一个按钮，点击按钮就向服务器发送这个请求，类型：button 值：发送 单击事件：send() 方法</p></li><li><p>要实现 send() 方法要引入 jquery </p></li><li><p>写一个script 标签实现 send 方法</p></li></ul><p>$.get，$.post，$.ajax 三个方法，$.ajax 是万能方法，get和post是简化之后的方法<br>这个方法常用的参数有3个：</p><ol><li>访问路径</li><li>向服务器提交的数据（写一个 js 对象，也是json格式，js 对象的直接量就是json 格式）</li><li>声明一个回调函数（匿名，服务器给浏览器做出响应后，浏览器会调这个方法，并且会把返回的数据传给这个方法，data 就是服务器给浏览器返回的数据，证明：在控制台打印出来，typeof（js的一个函数）看data 是不是string，再将json 字符串转变为 json 对象 ）</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>AJAX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>发送<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.3.1.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>                <span class="token string">"/community/alpha/ajax"</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    data <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120222827968.png"></p><h2 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h2><p>在 DiscussPostMapper 中增加一个方法，用于增加帖子<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120223746477.png"></p><p>在 discusspost-mapper.xml 中写插入帖子的sql 语句<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120224705198.png"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120224652152.png"></p><h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">public int addDiscussPost(DiscussPost post) &#123;    if (post &#x3D;&#x3D; null) &#123;        throw new IllegalArgumentException(&quot;参数不能为空&quot;);    &#125;    &#x2F;&#x2F;转义HTML标记，HtmlUtils是springMVC提供的工具    post.setTitle(HtmlUtils.htmlEscape(post.getTitle()));    post.setContent(HtmlUtils.htmlEscape(post.getContent()));    &#x2F;&#x2F;过滤敏感词    post.setTitle(sensitiveFilter.filter(post.getTitle()));    post.setContent(sensitiveFilter.filter(post.getContent()));    return discussPostMapper.insertDiscussPostRows(post);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h2><p>新建一个发帖相关的类 DiscussPostController </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller;import com.nowcoder.community.entity.DiscussPost;import com.nowcoder.community.entity.User;import com.nowcoder.community.service.DiscussPostService;import com.nowcoder.community.util.CommunityUtil;import com.nowcoder.community.util.HostHolder;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import java.util.Date;&#x2F;** * @author giegie * @create 2022-01-21-8:56 *&#x2F;@Controller@RequestMapping(&quot;&#x2F;discuss&quot;)public class DiscussPostController &#123;    @Autowired    private DiscussPostService discussPostService;    @Autowired    private HostHolder hostHolder;    @RequestMapping(path &#x3D; &quot;&#x2F;add&quot;,method &#x3D; RequestMethod.POST)    @ResponseBody    public String addDiscussPost(String title,String content)&#123;        User user &#x3D; hostHolder.getUser();        if (user &#x3D;&#x3D; null)&#123;            return CommunityUtil.getJSONString(403,&quot;你还没有登录喔！&quot;);        &#125;        DiscussPost post &#x3D; new DiscussPost();        post.setUserId(user.getId());        post.setTitle(title);        post.setContent(content);        post.setCreateTime(new Date());        discussPostService.addDiscussPost(post);                &#x2F;&#x2F; 报错的情况，将来统一处理        return CommunityUtil.getJSONString(0,&quot;发布成功！&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理页面"><a href="#处理页面" class="headerlink" title="处理页面"></a>处理页面</h2><p>index.js<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121091402753.png"></p><p>当点发布时，将填数据的对话框隐藏掉，这个先不动<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121091605907.png"></p><p>向服务器发送消息后，等返回结果以后再显示提示框，这个是后显示的<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121091617800.png"></p><p>两者之间发异步请求</p><p>获取标题和内容，用到 id ，首先取的是标题，用 jquery id 选择器，选中的是文本框，得到的是它们的值，同理取内容<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220121092427545.png"></p><h3 id="处理异步请求"><a href="#处理异步请求" class="headerlink" title="处理异步请求"></a>处理异步请求</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#publishBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>publish<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#publishModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"hide"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取标题和内容</span>    <span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#recipient-name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message-text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发送异步请求（POST）</span>    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>        <span class="token constant">CONTEXT_PATH</span> <span class="token operator">+</span> <span class="token string">"/discuss/add"</span><span class="token punctuation">,</span><span class="token comment">// 访问路径</span>        <span class="token punctuation">&#123;</span><span class="token string">"title"</span><span class="token operator">:</span> title<span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token operator">:</span> content<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 传入的数据</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 回调函数来处理返回的结果</span>            data <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将字符串转变为 json对象</span>            <span class="token comment">// 服务器返回一个状态和提示消息</span>            <span class="token comment">// 在提示框中显示返回的消息,利用id获取提示框，修改它的内容</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#hintBody"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 显示提示框</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#hintModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2秒后，自动隐藏提示框</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#hintModal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">"hide"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果返回的结果是ok的，添加完以后要把当前页面刷新一下，看到这个数据；失败报错，就不刷新，成功的才算页面</span>                <span class="token comment">// 刷新页面</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
            <tag> js </tag>
            
            <tag> json </tag>
            
            <tag> jQuery </tag>
            
            <tag> 增量更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤敏感词</title>
      <link href="/2022/01/21/guo-lu-min-gan-ci/"/>
      <url>/2022/01/21/guo-lu-min-gan-ci/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120111129041.png" alt="image-20220120111129041"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.util;import org.apache.commons.lang3.CharUtils;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Component;import javax.annotation.PostConstruct;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.HashMap;import java.util.Map;&#x2F;** * @author giegie * @create 2022-01-20-15:20 *&#x2F;@Componentpublic class SensitiveFilter &#123;    private static final Logger logger &#x3D; LoggerFactory.getLogger(SensitiveFilter.class);    &#x2F;&#x2F; 替换节点    private static final String REPLACEMENT &#x3D; &quot;***&quot;;    &#x2F;&#x2F; 根节点    private TrieNode rootNode &#x3D; new TrieNode();    @PostConstruct &#x2F;&#x2F; 程序编译时，初始化读取配置文件    public void init() &#123;        try (                InputStream is &#x3D; this.getClass().getClassLoader().getResourceAsStream(&quot;sensitive-words.txt&quot;);&#x2F;&#x2F; 获取文件的字节流                BufferedReader reader &#x3D; new BufferedReader(new InputStreamReader(is)); &#x2F;&#x2F; 字节流转变为字符流，字符流转变为缓冲流        ) &#123;            String keyword;            while ((keyword &#x3D; reader.readLine()) !&#x3D; null) &#123;                &#x2F;&#x2F; 添加到前缀树                this.addKeyword(keyword);            &#125;        &#125; catch (IOException e) &#123;            logger.error(&quot;加载敏感词文件失败：&quot; + e.getMessage());        &#125;    &#125;    &#x2F;&#x2F; 将一个敏感词添加到前缀树中    private void addKeyword(String keyword) &#123;        TrieNode tempNode &#x3D; rootNode;        for (int i &#x3D; 0; i &lt; keyword.length(); i++) &#123;            char c &#x3D; keyword.charAt(i); &#x2F;&#x2F; 获取敏感词每个字符            TrieNode subNode &#x3D; tempNode.getSubNode(c); &#x2F;&#x2F;根节点查看是否有该字符的子节点            if (subNode &#x3D;&#x3D; null) &#123;                &#x2F;&#x2F; 若没有对应的子节点，就初始化子节点                subNode &#x3D; new TrieNode();                tempNode.addSubNode(c, subNode); &#x2F;&#x2F; 将子节点挂到根节点上            &#125;            &#x2F;&#x2F; 指向子节点，进入下一轮循环            tempNode &#x3D; subNode;            &#x2F;&#x2F; 设置结束标识            if (i &#x3D;&#x3D; keyword.length() - 1) &#123;                tempNode.setKeywordEnd(true);            &#125;        &#125;    &#125;    &#x2F;**     * 过滤敏感词     *     * @param text 待过滤的文本     * @return 过滤后的文本     *&#x2F;    public String filter(String text) &#123;        if (StringUtils.isBlank(text)) &#123;            return null;        &#125;        &#x2F;&#x2F; 指针1        TrieNode tempNode &#x3D; rootNode;        &#x2F;&#x2F; 指针2        int begin &#x3D; 0;        &#x2F;&#x2F; 指针3        int position &#x3D; 0;        &#x2F;&#x2F; 结果        StringBuilder sb &#x3D; new StringBuilder();        while (position &lt; text.length()) &#123;            char c &#x3D; text.charAt(position);            &#x2F;&#x2F; 跳过符号            if (isSymbol(c)) &#123;                &#x2F;&#x2F; 若指针1处于根节点，就将此符号计入结果，让指针2向下走一步                if (tempNode &#x3D;&#x3D; rootNode) &#123;                    sb.append(c);                    begin++;                &#125;                &#x2F;&#x2F; 无论符号在开头或中间，指针3都向下走一步                position++;                continue;            &#125;            &#x2F;&#x2F; 检查下级节点            tempNode &#x3D; tempNode.getSubNode(c);            if (tempNode &#x3D;&#x3D; null)&#123;                &#x2F;&#x2F; 以begin开头的字符串不是敏感词                sb.append(text.charAt(begin));                &#x2F;&#x2F; 进入下一个位置                position &#x3D; ++begin;                &#x2F;&#x2F; 重新指向根节点                tempNode &#x3D; rootNode;            &#125; else if (tempNode.isKeywordEnd)&#123;                &#x2F;&#x2F; 发现敏感词，将begin~position字符串替换掉                sb.append(REPLACEMENT);                &#x2F;&#x2F; 进入下一个位置                begin&#x3D;++position;                &#x2F;&#x2F; 重新指向根节点                tempNode &#x3D; rootNode;            &#125; else &#123;                &#x2F;&#x2F; 检查下一个字符                position++;            &#125;        &#125;        &#x2F;&#x2F; 将最后一批字符计入结果        sb.append(text.substring(begin));        return sb.toString();    &#125;    &#x2F;&#x2F; 判断是否为符号    private boolean isSymbol(Character c) &#123;        &#x2F;&#x2F; 0x2E80~0x9FFF 是东亚文字范围        return !CharUtils.isAsciiAlphanumeric(c) &amp;&amp; (c &lt; 0x2E80 || c &gt; 0x9FFF);    &#125;    &#x2F;&#x2F; 前缀树    private class TrieNode &#123; &#x2F;&#x2F; 内部类        &#x2F;&#x2F; 关键词结束标识        private boolean isKeywordEnd &#x3D; false;        &#x2F;&#x2F; 子节点(key是下级字符，value是下级节点)        private Map&lt;Character, TrieNode&gt; subNodes &#x3D; new HashMap&lt;&gt;();        public boolean isKeywordEnd() &#123;            return isKeywordEnd;        &#125;        public void setKeywordEnd(boolean keywordEnd) &#123;            isKeywordEnd &#x3D; keywordEnd;        &#125;        &#x2F;&#x2F; 添加子节点        public void addSubNode(Character c, TrieNode node) &#123;            subNodes.put(c, node);        &#125;        &#x2F;&#x2F; 获取子节点的        public TrieNode getSubNode(Character c) &#123;            return subNodes.get(c);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community;import com.nowcoder.community.util.SensitiveFilter;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.ContextConfiguration;&#x2F;** * @author giegie * @create 2022-01-20-17:36 *&#x2F;@SpringBootTest@ContextConfiguration(classes &#x3D; CommunityApplication.class)public class SensitiveTests &#123;    @Autowired    private SensitiveFilter sensitiveFilter;    @Test    public void testSensitiveFilter()&#123;        String text &#x3D; &quot;这里可以赌博，可以嫖娼，可以开票，哈哈哈&quot;;        text &#x3D; sensitiveFilter.filter(text);        System.out.println(text);        text &#x3D; &quot;这里可以☆赌☆博☆,可以☆嫖☆娼☆,可以☆吸☆毒☆,可以☆开☆票☆,哈哈哈!&quot;;        text &#x3D; sensitiveFilter.filter(text);        System.out.println(text);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>检查登录状态</title>
      <link href="/2022/01/20/niu-ke-xiang-mu-jian-cha-deng-lu-zhuang-tai/"/>
      <url>/2022/01/20/niu-ke-xiang-mu-jian-cha-deng-lu-zhuang-tai/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120094641087.png" alt="image-20220120094641087"></p><p>@Target 注解声明自定义注解可以写在哪个位置，作用在哪个类型上（类，方法，属性）</p><p>@Retention 声明自定义注解保留的时间或有效的时间，编译有效还是运行有效</p><p>@Document 声明自定义注解在生成文档时，要不要带上</p><p>@Inherited 用于继承，子类继承于父类，父类上有自定义注解，子类是否要继承这些注解</p><p>Method.getDeclaredAnnotations() 获取这个方法上所有的注解</p><p>Method.getAnnotation(Class<T> annotationClass) 获取这个指定类型的注解</p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>community下新增一个包 annotation 新建一个自定义注解 LoginRequired </p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120103726928.png" alt="image-20220120103726928"></p><h2 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h2><p>在需要登录后才能访问的方法上，加上自定义注解</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120100126620.png" alt="image-20220120100126620"></p><h2 id="新增拦截器"><a href="#新增拦截器" class="headerlink" title="新增拦截器"></a>新增拦截器</h2><p>在 interceptor 包下新增一个拦截器 LoginRequiredInterceptor</p><ul><li>在程序中，可以通过反射的方式解析注解</li><li>通过Method 对象可以获取某方法上标注的所有注解</li><li>通过Method 对象可以获取某方法上指定类型的注解</li><li>Method 对象上还有很多其他的方法，可以获取该方法上标注的注解</li></ul><p>如果 loginRequired 不为空且获取不到当前的用户，则直接重定向到登录页面，return false意味着请求执行到此为止, 不会继续执行后续的部分了, 因为重定向已经完成了对这个请求的处理，</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120104014444.png" alt="image-20220120104014444"></p><h2 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220120105812408.png" alt="image-20220120105812408"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拦截器 </tag>
            
            <tag> 登录状态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忘记密码</title>
      <link href="/2022/01/19/niu-ke-xiang-mu-wang-ji-mi-ma/"/>
      <url>/2022/01/19/niu-ke-xiang-mu-wang-ji-mi-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><p>登录页面点击忘记密码跳转到 forget 页面，请求的方式为 get，再处理登录页面，使点击可以跳转到忘记密码页面</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119203608355.png" alt="image-20220119203608355"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119205017503.png" alt="image-20220119205017503"></p><h2 id="service-层"><a href="#service-层" class="headerlink" title="service 层"></a>service 层</h2><p>service 层增加重置密码的业务，接收参数为邮箱和密码，先进行空值处理，验证邮箱：根据传入的邮箱查找是否有对应的用户，将传入的用户输入的密码再加上对应的 salt 做md5 加密处理，更改数据库中原先的密码，将处理的信息装入 map 并返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 重置密码    public Map&lt;String, Object&gt; resetPassword(String email, String password) &#123;        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();        &#x2F;&#x2F; 空值处理        if (StringUtils.isBlank(email)) &#123;            map.put(&quot;emailMsg&quot;, &quot;邮箱不能为空！&quot;);            return map;        &#125;        if (StringUtils.isBlank(password)) &#123;            map.put(&quot;passwordMsg&quot;, &quot;密码不能为空&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证邮箱        User user &#x3D; userMapper.selectByEmail(email);        if (user &#x3D;&#x3D; null) &#123;            map.put(&quot;emailMsg&quot;, &quot;该邮箱尚未注册!&quot;);            return map;        &#125;        &#x2F;&#x2F; 重置密码        password &#x3D; CommunityUtil.md5(password + user.getSalt());        userMapper.updatePassword(user.getId(), password);        map.put(&quot;user&quot;, user);        return map;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="conroller-层"><a href="#conroller-层" class="headerlink" title="conroller 层"></a>conroller 层</h2><p>注入邮件发送工具和模板引擎</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119204846083.png" alt="image-20220119204846083"></p><p>增加获取验证码的处理</p><p>路径 /forget/code 请求的方式 get ，参数是邮箱和 session ，先判断邮箱是否为空，不为空就处理邮件发送，随机生成4位的验证码，将邮箱和验证码装进context 中，通过模板引擎将context 传进 mail/forget.html 页面，并将content 邮件内容发送给用户，将生成的验证码保存进 session </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取验证码    @RequestMapping(path &#x3D; &quot;&#x2F;forget&#x2F;code&quot;, method &#x3D; RequestMethod.GET)    @ResponseBody    public String getForgetCode(String email, HttpSession session) &#123;        if (StringUtils.isBlank(email)) &#123;            return CommunityUtil.getJSONString(1, &quot;邮箱不能为空！&quot;);        &#125;        &#x2F;&#x2F; 发送邮件        Context context &#x3D; new Context();        context.setVariable(&quot;email&quot;, email);        String code &#x3D; CommunityUtil.generateUUID().substring(0, 4);        context.setVariable(&quot;verifyCode&quot;, code);        String content &#x3D; templateEngine.process(&quot;&#x2F;mail&#x2F;forget&quot;, context);        mailClient.sendMail(email, &quot;找回密码&quot;, content);        &#x2F;&#x2F; 保存验证码        session.setAttribute(&quot;verifyCode&quot;, code);        return CommunityUtil.getJSONString(0);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理-mail-forget-html-页面"><a href="#处理-mail-forget-html-页面" class="headerlink" title="处理 mail/forget.html 页面"></a>处理 mail/forget.html 页面</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119210202820.png" alt="image-20220119210202820"></p><p>进行重置密码操作，访问路径 forget/password 请求的方式 post，传入的参数为 用户输入的邮箱，用户输入的验证码，用户输入的新密码，model，session，从session中获取生成的4位验证码，判断用户输入的验证码是否为空，session 中的验证码是否为空，生成的验证码和用户输入的验证码是否相同，验证码没问题调用service 中的重置密码方法，得到返回的map ，若map 里有user 则重定向到登录页面。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 重置密码    @RequestMapping(path &#x3D; &quot;&#x2F;forget&#x2F;password&quot;, method &#x3D; RequestMethod.POST)    public String resetPassword(String email, String verifyCode, String password, Model model, HttpSession session) &#123;        String code &#x3D; (String) session.getAttribute(&quot;verifyCode&quot;);        if (StringUtils.isBlank(verifyCode) || StringUtils.isBlank(code) || !code.equalsIgnoreCase(verifyCode)) &#123;            model.addAttribute(&quot;codeMsg&quot;, &quot;验证码错误&quot;);            return &quot;&#x2F;site&#x2F;forget&quot;;        &#125;        Map&lt;String, Object&gt; map &#x3D; userService.resetPassword(email, password);        if (map.containsKey(&quot;user&quot;)) &#123;            return &quot;redirect:&#x2F;login&quot;;        &#125; else &#123;            model.addAttribute(&quot;emailMsg&quot;, map.get(&quot;emailMsg&quot;));            model.addAttribute(&quot;passwordMsg&quot;, map.get(&quot;passwordMsg&quot;));            return &quot;&#x2F;site&#x2F;forget&quot;;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置forget 页面</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119212727167.png" alt="image-20220119212727167"></p><p>复用首页</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119212803805.png" alt="image-20220119212803805"></p><p>对内容进行修改</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119213007041.png" alt="image-20220119213007041"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119213120402.png" alt="image-20220119213120402"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119213138119.png" alt="image-20220119213138119"></p><p>获取验证码，导入 forget.js 文件，js 知识</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119213356841.png" alt="image-20220119213356841"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>账号设置</title>
      <link href="/2022/01/19/niu-ke-xiang-mu-zhang-hao-she-zhi/"/>
      <url>/2022/01/19/niu-ke-xiang-mu-zhang-hao-she-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="修改上传头像"><a href="#修改上传头像" class="headerlink" title="修改上传头像"></a>修改上传头像</h1><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118212844688.png" alt="image-20220118212844688"></p><h2 id="跳转账户设置页面"><a href="#跳转账户设置页面" class="headerlink" title="跳转账户设置页面"></a>跳转账户设置页面</h2><p>登录后点击首页的账号设置能跳转到setting 页面</p><p>在 controller 包下新建一个UserController，处理与用户个人有关的设置<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119091455083.png" alt="image-20220119091455083"></p><p>增加访问路径和请求方式，返回账号设置页面<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119091558409.png" alt="image-20220119091558409"></p><p>对首页的账号设置按钮进行配置<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119091808178.png" alt="image-20220119091808178"></p><p>对setting 页面做模板处理<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119091926946.png" alt="image-20220119091926946"></p><p>复用首页的头部设置<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119091947281.png" alt="image-20220119091947281"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在application.properties 配置中增加一个图片的上传路径<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119105214469.png" alt="image-20220119105214469"></p><h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><p>在 UserService 中增加一个更改头像路径的方法<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119105333884.png" alt="image-20220119105333884"></p><h2 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h2><p>在UserController中注入 上传路径，域名，项目名，service层，持有的用户信息<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119105535979.png" alt="image-20220119105535979"></p><h2 id="增加图片上传的方法"><a href="#增加图片上传的方法" class="headerlink" title="增加图片上传的方法"></a>增加图片上传的方法</h2><p>路径：upload，请求方式：post，图片上传至指定的路径，并更改用户的 headUrl ，最后重定向到首页<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119105700943.png" alt="image-20220119105700943"></p><h2 id="获取图片方法"><a href="#获取图片方法" class="headerlink" title="获取图片方法"></a>获取图片方法</h2><p>增加方法：浏览器从服务端获取头像<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119110354892.png" alt="image-20220119110354892"></p><h2 id="设置setting页面"><a href="#设置setting页面" class="headerlink" title="设置setting页面"></a>设置setting页面</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119125504097.png" alt="image-20220119125504097"></p><h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><h2 id="service-层"><a href="#service-层" class="headerlink" title="service 层"></a>service 层</h2><p>参数 用户id，旧密码，新密码，先判断旧密码和新密码是否为空，验证用户输入的原始密码是否与存在数据库里该用户的密码一致，更改密码，并将新密码修改保存进数据库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 修改密码    public Map&lt;String, Object&gt; updatePassword(int userId, String oldePassword, String newPassword) &#123;        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();        &#x2F;&#x2F; 空值处理        if (StringUtils.isBlank(oldePassword)) &#123;            map.put(&quot;oldPasswordMsg&quot;, &quot;原密码不能为空！&quot;);            return map;        &#125;        if (StringUtils.isBlank(newPassword)) &#123;            map.put(&quot;newPasswordMsg&quot;, &quot;新密码不能为空！&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证原始密码        User user &#x3D; userMapper.selectById(userId);        oldePassword &#x3D; CommunityUtil.md5(oldePassword + user.getSalt());        if (!user.getPassword().equals(oldePassword)) &#123;            map.put(&quot;oldPassword&quot;, &quot;原始密码输入有误&quot;);            return map;        &#125;        &#x2F;&#x2F; 更新密码        newPassword &#x3D; CommunityUtil.md5(newPassword + user.getSalt());        userMapper.updatePassword(userId, newPassword);        return map;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="controller-层"><a href="#controller-层" class="headerlink" title="controller 层"></a>controller 层</h2><p>获取当前持有的用户调用service 层的方法，判断返回的 map 是否为空，若为空则重定向到退出登录页面（<strong>先退出，再登录</strong>）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 修改密码    @RequestMapping(path &#x3D; &quot;&#x2F;updatePassword&quot;,method &#x3D; RequestMethod.POST)    public String updatePassword(String oldPassword,String newPassword,Model model)&#123;        User user &#x3D; hostHolder.getUser();        Map&lt;String,Object&gt; map &#x3D; userService.updatePassword(user.getId(),oldPassword,newPassword);        if (map &#x3D;&#x3D; null || map.isEmpty())&#123;            return &quot;redirect:&#x2F;logout&quot;;        &#125;else&#123;            model.addAttribute(&quot;oldPasswordMsg&quot;,map.get(&quot;oldPasswordMsg&quot;));            model.addAttribute(&quot;newPasswordMsg&quot;,map.get(&quot;newPasswordMsg&quot;));            return &quot;&#x2F;site&#x2F;setting&quot;;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置setting页面-1"><a href="#设置setting页面-1" class="headerlink" title="设置setting页面"></a>设置setting页面</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220119232226476.png" alt="image-20220119232226476"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 账号设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>显示登陆信息</title>
      <link href="/2022/01/18/niu-ke-xiang-mu-xian-shi-deng-lu-xin-xi/"/>
      <url>/2022/01/18/niu-ke-xiang-mu-xian-shi-deng-lu-xin-xi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118084242965.png" alt="image-20220118084242965"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118142149512.png" alt="image-20220118142149512"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118171035706.png" alt="image-20220118171035706"></p><p>在Util 包下新建类CookieUtil 对浏览器发来的cookie 进行封装，从cookie中获取要查找的指定字符串</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118161715578.png" alt="image-20220118161715578"></p><p>在UserService中增加一个方法，根据ticket 查找用户的凭证</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118162158060.png" alt="image-20220118162158060"></p><h2 id="难点：多线程"><a href="#难点：多线程" class="headerlink" title="难点：多线程"></a>难点：多线程</h2><p>将user 用户存储起来，方便后面的使用</p><p>因为服务器会出现并发处理的情况，每一个线程要单独处理一个请求，服务器在处理请求的时候是一个多线程的环境，在多个线程中要隔离存储user 对象，使用 ThreadLocal工具作线程隔离操作，将这个对user 的操作封装进一个工具里，在 util包下新建 HostHolder类，对user进行隔离操作</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118170908977.png" alt="image-20220118170908977"></p><p>在拦截器里对浏览器发送给服务器的请求进行处理，获取cookie中的ticket 根据凭证查到user 用户，将用户装进model 里，传给模板</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller.interceptor;import com.nowcoder.community.entity.LoginTicket;import com.nowcoder.community.entity.User;import com.nowcoder.community.service.UserService;import com.nowcoder.community.util.CookieUtil;import com.nowcoder.community.util.HostHolder;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.Date;&#x2F;** * @author giegie * @create 2022-01-18-16:04 *&#x2F;@Componentpublic class LoginTicketInterceptor implements HandlerInterceptor &#123;    @Autowired    private UserService userService;    @Autowired    private HostHolder hostHolder;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;        &#x2F;&#x2F; 从cookie中获取凭证        String ticket &#x3D; CookieUtil.getValue(request, &quot;ticket&quot;);        if (ticket !&#x3D; null) &#123;            &#x2F;&#x2F; 查询凭证            LoginTicket loginTicket &#x3D; userService.findLoginTicket(ticket);            &#x2F;&#x2F; 检查凭证是否有效            if (loginTicket !&#x3D; null &amp;&amp; loginTicket.getStatus() &#x3D;&#x3D; 0 &amp;&amp; loginTicket.getExpired().after(new Date())) &#123;                &#x2F;&#x2F; 根据凭证查询用户                User user &#x3D; userService.findUserById(loginTicket.getUserId());                &#x2F;&#x2F; 在本次请求中持有用户                hostHolder.setUser(user);            &#125;        &#125;        return true;    &#125;    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;        User user &#x3D; hostHolder.getUser();        if (user!&#x3D;null &amp;&amp; modelAndView!&#x3D;null)&#123;            modelAndView.addObject(&quot;loginUser&quot;,user);        &#125;    &#125;    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;        hostHolder.clear();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对拦截器进行相关的配置，不拦截静态的 css，js ….文件</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118171526745.png" alt="image-20220118171526745"></p><p>对index 首页进行处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118172446362.png" alt="image-20220118172446362"></p><p>判断loginUser 是否为空，若为空，则未登陆，页面头部应显示注册和登陆信息，不显示登录后的消息信息，不为空则反之，登录后从用户获取头像headerUrl 。</p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拦截器 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登录退出功能</title>
      <link href="/2022/01/18/niu-ke-xiang-mu-deng-lu-tui-chu-gong-neng/"/>
      <url>/2022/01/18/niu-ke-xiang-mu-deng-lu-tui-chu-gong-neng/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117074744905.png" alt="image-20220117074744905"></p><p>dao -&gt; service -&gt; controller</p><p>包 entity 下新建实体类 LoginTicket 属性与表中的字段对应，并生成对应的set，get，tostring方法</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117171204796.png" alt="image-20220117171204796"></p><p>包 dao 下新建接口 LoginTicketMapper 声明 @Mapper 注解</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117171613280.png" alt="image-20220117171613280"></p><p>在方法上直接注入sql 语句 有别于.xml 方法</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117173315324.png" alt="image-20220117173315324"></p><p>整张表围绕 ticket 来设计，ticket 是凭证，发送 ticket 字符串给浏览器进行保存，其他数据服务端存一份</p><p>客户端通过 cookie 存了 ticket 数据后，再次访问服务器会把 ticket 给服务器，服务端通过 ticket 查到整条数据</p><p>写完 dao 进行测试</p><p>在MapperTests里进行测试，注入LoginTicketMapper</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117173851830.png" alt="image-20220117173851830"></p><p>开发业务层，写登录业务，接收页面传入的条件，在 UserService 里写 service 注入 LoginTicketMapper ，登录方法返回值类型为 Map ，将多条信息放进去，参数为：用户名，密码，有效时间，先做空值处理，然后对账号、状态、密码进行验证，从客户端得到的密码要结合salt 值做md5 加密处理再和数据库中的密码进行比对，最后没问题就生成登录凭证，将 ticket 放进map 中并返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Map&lt;String, Object&gt; login(String username, String password, long expiredSeconds) &#123;        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();        &#x2F;&#x2F; 空值处理        if (StringUtils.isBlank(username)) &#123;            map.put(&quot;usernameMsg&quot;, &quot;账号不能为空&quot;);            return map;        &#125;        if (StringUtils.isBlank(password)) &#123;            map.put(&quot;password&quot;, &quot;密码不能为空&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证账号        User user &#x3D; userMapper.selectByName(username);        if (user &#x3D;&#x3D; null) &#123;            map.put(&quot;usernameMsg&quot;, &quot;该账号不存在&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证状态        if (user.getStatus() &#x3D;&#x3D; 0) &#123;            map.put(&quot;usernameMsg&quot;, &quot;该账号未激活&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证密码,从客户端获取到的密码为明文，要进行md5加密，在与数据库中的密码进行比较        password &#x3D; CommunityUtil.md5(password + user.getSalt());        if (!user.getPassword().equals(password)) &#123;            map.put(&quot;passwordMsg&quot;, &quot;密码不正确&quot;);            return map;        &#125;        &#x2F;&#x2F; 生成登录凭证        LoginTicket loginTicket &#x3D; new LoginTicket();        loginTicket.setUserId(user.getId());        loginTicket.setTicket(CommunityUtil.generateUUID());        loginTicket.setStatus(0);        loginTicket.setExpired(new Date(System.currentTimeMillis() + expiredSeconds * 1000));        map.put(&quot;ticket&quot;,loginTicket.getTicket());        return map;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 LoginController 里写 controller 路径“/login” 请求方式 post ,login方法的参数为 用户名，密码，验证码，是否记住，model，session，response。先判断验证码是否正确，然后检查账号和密码，调用service 里的 login 方法，传入参数，如果map 里包含了 ticket 就是成功，否则失败，成功重定向到首页，失败回到登录页面 。成功后发送 cookie 到浏览器进行保存，设置cookie 的有效路径，用户登录以后有效路径包含整个项目，路径不要写死，@Value 注入配置里的项目路径 text-path，设置cookie 的有效时间，通过response.add(cookie) 将cookie 发送给页面；失败后，将错误信息加入到 model 中带给登录页面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(path &#x3D; &quot;&#x2F;login&quot;, method &#x3D; RequestMethod.POST)public String login(String username, String password, String code, boolean rememberme,                    Model model, HttpSession session, HttpServletResponse response) &#123;    &#x2F;&#x2F; 先检查验证码    String kaptcha &#x3D; (String) session.getAttribute(&quot;kaptcha&quot;);    if (StringUtils.isBlank(kaptcha) || StringUtils.isBlank(code) || !kaptcha.equalsIgnoreCase(code)) &#123;        model.addAttribute(&quot;codeMsg&quot;, &quot;验证码不正确！&quot;);        &#x2F;&#x2F; 错误信息放到model中带入到登录页面        return &quot;&#x2F;site&#x2F;login&quot;; &#x2F;&#x2F; 重回登录页面    &#125;    &#x2F;&#x2F; 检查账号，密码    int expiredSceonds &#x3D; rememberme ? REMEMBER_EXPIRED_SECONDS : DEFAULT_EXPIRED_SECONDS;    Map&lt;String,Object&gt; map &#x3D; userService.login(username,password,expiredSceonds);    if (map.containsKey(&quot;ticket&quot;))&#123;        Cookie cookie &#x3D; new Cookie(&quot;ticket&quot;,map.get(&quot;ticket&quot;).toString());        &#x2F;&#x2F;new一个cookie,cookie中要存取字符串        cookie.setPath(contextPath); &#x2F;&#x2F; 设置cookie的路径：整个项目        cookie.setMaxAge(expiredSceonds); &#x2F;&#x2F; 设置cookie的有效时间        response.addCookie(cookie); &#x2F;&#x2F; 给浏览器的响应带上cookie        return &quot;redirect:&#x2F;index&quot;; &#x2F;&#x2F; 重定向到首页    &#125;else &#123;        model.addAttribute(&quot;usernameMsg&quot;,map.get(&quot;usernameMsg&quot;));        model.addAttribute(&quot;passwordMsg&quot;,map.get(&quot;passwordMsg&quot;));        return &quot;&#x2F;site&#x2F;login&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对登录页面进行设置，表单提交的方式，提交的路径，每个表单项增加一个 name ，name与controller 里的参数名要一致，对错误信息作一个展现，从请求的 Request 当中获取参数</p><p>提交的方式，路径</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117233626480.png" alt="image-20220117233626480"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220117233852084.png" alt="image-20220117233852084"></p><p>①：判断usernameMsg 是否为空，若不为空，则输出 ${usernameMsg} 里的值<br>②：从请求 Request 中获取提交的 username，显示在登录页面的用户名输入框中<br>③：增加一个对应的 name 值与 controller 里的参数名相同<br>④：根据情况动态显示登录出现的错误</p><p>退出登录</p><p>service 层</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118004914552.png" alt="image-20220118004914552"></p><p>controller 层，重定向返回的默认是 get 方式的 login 登录页面</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118004951388.png" alt="image-20220118004951388"></p><p>在index 页面作设置</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220118005137804.png" alt="image-20220118005137804"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 登录功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成验证码</title>
      <link href="/2022/01/16/niu-ke-xiang-mu-sheng-cheng-yan-zheng-ma/"/>
      <url>/2022/01/16/niu-ke-xiang-mu-sheng-cheng-yan-zheng-ma/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116083330183.png" alt="image-20220116083330183"></p><p>导入 jar 包</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116084123482.png" alt="image-20220116084123482"></p><p>编写配置类（config 包下新建类 KaptchaConfig）</p><p>要实现 Producer 接口，</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116084606993.png" alt="image-20220116084606993"></p><p>DefaultKaptcha 是这个接口的实现类</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116084720082.png" alt="image-20220116084720082"></p><p>KaptchaConfig 配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.config;import com.google.code.kaptcha.Producer;import com.google.code.kaptcha.impl.DefaultKaptcha;import com.google.code.kaptcha.util.Config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.util.Properties;&#x2F;** * @author giegie * @create 2022-01-16-8:40 *&#x2F;@Configurationpublic class KaptchaConfig &#123;    @Bean &#x2F;&#x2F; 声明一个Bean,这个Bean将会被Spring容器所装配    public Producer kaptchaProducer() &#123;        Properties properties &#x3D; new Properties();        properties.setProperty(&quot;kaptcha.image.width&quot;, &quot;100&quot;);&#x2F;&#x2F; 宽        properties.setProperty(&quot;kaptcha.image.height&quot;, &quot;40&quot;);&#x2F;&#x2F; 高        properties.setProperty(&quot;kaptcha.textproducer.font.size&quot;, &quot;30&quot;);&#x2F;&#x2F; 字体大小        properties.setProperty(&quot;kaptcha.textproducer.font.color&quot;, &quot;0.0.0&quot;);&#x2F;&#x2F; 字体颜色        properties.setProperty(&quot;kaptcha.textproducer.char.string&quot;, &quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;);&#x2F;&#x2F; 字符范围        properties.setProperty(&quot;kaptcha.textproducer.char.length&quot;, &quot;4&quot;);&#x2F;&#x2F; 字符长度        properties.setProperty(&quot;kaptcha.noise.impl&quot;, &quot;com.google.code.kaptcha.impl.NoNoise&quot;);&#x2F;&#x2F; 验证码干扰因素        DefaultKaptcha kaptcha &#x3D; new DefaultKaptcha();        Config config &#x3D; new Config(properties);        &#x2F;&#x2F; 给kaptcha传入一些参数，参数封装进Config对象，Config对象传入Properties对象        &#x2F;&#x2F; Properties对象里存的都是key-value及Map,Map里存的就是参数        kaptcha.setConfig(config);        return kaptcha;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务启动 bean 被自动装配进容器里，通过容器得到一个Producer实例，实例有两个方法创建图片创建验证码</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116145842259.png" alt="image-20220116145842259"></p><p>getLoginPage方法的目的是给浏览器返回一个html，html里会包含一个图片的路径，浏览器会依据路径再次访问服务器，获得这个图片，因此要单独写一个请求，向浏览器返回验证码图片</p><p>在 LoginController.java 增加一个请求提供获取验证码的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(path &#x3D; &quot;&#x2F;kaptcha&quot;,method &#x3D; RequestMethod.GET)public void getKaptcha(HttpServletResponse response, HttpSession session)&#123;    &#x2F;&#x2F; 生成验证码    String text &#x3D; kaptchaProducer.createText(); &#x2F;&#x2F; 生成4位随机字符串    BufferedImage image &#x3D; kaptchaProducer.createImage(text); &#x2F;&#x2F; 利用字符串生成一个与之对应的图片    &#x2F;&#x2F; 将验证码存入session中    session.setAttribute(&quot;kaptcha&quot;,text);    &#x2F;&#x2F; 将图片输出给浏览器    response.setContentType(&quot;image&#x2F;png&quot;); &#x2F;&#x2F; 声明给浏览器返回的什么类型的数据    try &#123;        OutputStream os &#x3D; response.getOutputStream(); &#x2F;&#x2F; 从response中获取输出流        ImageIO.write(image,&quot;png&quot;,os);        &#x2F;&#x2F; 向浏览器输出图片的工具ImageIo，image:输出的图片，png:输出格式，os:输出流        &#x2F;&#x2F; 流不用关闭，整个response是由SpringMVC来维护的，会自动关闭    &#125; catch (IOException e) &#123;        logger.error(&quot;响应验证码失败&quot;+e.getMessage());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把验证码应用到 login.html 页面，并通过 js 来实现点击刷新验证码按钮来刷新验证码的功能（JS 部分知识）</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116143954545.png" alt="image-20220116143954545"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116145045619.png" alt="image-20220116145045619"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116145243941.png" alt="image-20220116145243941"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220116145210414.png" alt="image-20220116145210414"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话管理</title>
      <link href="/2022/01/15/niu-ke-xiang-mu-hui-hua-guan-li/"/>
      <url>/2022/01/15/niu-ke-xiang-mu-hui-hua-guan-li/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115113933803.png" alt="image-20220115113933803"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115083941854.png" alt="image-20220115083941854"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115084250343.png" alt="image-20220115084250343"></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115085041513.png" alt="image-20220115085041513"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115113707338.png" alt="image-20220115113707338"></p><h2 id="session-优点：数据存在服务端安全；缺点：有些内存上的压力"><a href="#session-优点：数据存在服务端安全；缺点：有些内存上的压力" class="headerlink" title="session 优点：数据存在服务端安全；缺点：有些内存上的压力"></a>session 优点：数据存在服务端安全；缺点：有些内存上的压力</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115115244393.png" alt="image-20220115115244393"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115152906928.png" alt="image-20220115152906928"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115155153663.png" alt="image-20220115155153663"></p><p>用户变多，服务器分布式部署</p><p>nginx：用于负载均衡</p><p>问题：第一次访问服务器①，生成session，第二次访问服务器③，就要重新生成session</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ol><li>设置负载均衡的策略：粘性session，根据 ip 固定访问某台服务器。问题：不能保证负载均衡</li><li>同步session，当一台服务器有了session 后，同步给其他的服务器，所有服务器的 session 都是统一的。问题：对服务器性能产生影响，服务器之间产生关联及耦合，对部署不友好</li><li>共享session ，多出一台服务器存储处理 session ，其他服务器向这台服务器获取 session 。问题：如果over ，其他服务器无法工作</li></ol><h2 id="主流方案："><a href="#主流方案：" class="headerlink" title="主流方案："></a>主流方案：</h2><p>会话数据存入数据库中，数据库作集群，传统关系型数据库是将数据存入硬盘里，没有存内存中性能好，因此用 nosql 数据库，使用Redis</p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发注册功能</title>
      <link href="/2022/01/15/niu-ke-xiang-mu-kai-fa-zhu-ce-gong-neng/"/>
      <url>/2022/01/15/niu-ke-xiang-mu-kai-fa-zhu-ce-gong-neng/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114130504396.png" alt="image-20220114130504396"></p><h2 id="访问注册页面：点击顶部区域内的链接，打开注册页面"><a href="#访问注册页面：点击顶部区域内的链接，打开注册页面" class="headerlink" title="访问注册页面：点击顶部区域内的链接，打开注册页面"></a>访问注册页面：点击顶部区域内的链接，打开注册页面</h2><h3 id="在controller包下新建LoginController"><a href="#在controller包下新建LoginController" class="headerlink" title="在controller包下新建LoginController"></a>在controller包下新建LoginController</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;&#x2F;** * @author giegie * @create 2022-01-14-13:41 *&#x2F;@Controllerpublic class LoginController &#123;    @RequestMapping(path &#x3D; &quot;&#x2F;register&quot;,method &#x3D; RequestMethod.GET) &#x2F;&#x2F; 设置访问路径和请求方式    public String getRegisterPage()&#123;        return &quot;&#x2F;site&#x2F;register&quot;; &#x2F;&#x2F; register是模板    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接着对register-html-模板进行设置，加入-thymeleaf-标签"><a href="#接着对register-html-模板进行设置，加入-thymeleaf-标签" class="headerlink" title="接着对register.html 模板进行设置，加入 thymeleaf 标签"></a>接着对register.html 模板进行设置，加入 thymeleaf 标签</h3><p>首先加入 thymeleaf 声明</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114135044987.png" alt="image-20220114135044987"></p><p>对头尾处的相对路径进行处理</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114135237723.png" alt="image-20220114135237723"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114135457763.png" alt="image-20220114135457763"></p><p>访问注册页面是通过首页 index页面的注册按钮点击跳转的，因此修改 index 页面的注册链接<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114140330315.png" alt="image-20220114140330315"></p><p>让首页顶部的代码在多个页面复用 </p><p>在header标签上增加一个属性及给这段代码起个名字，方便复用<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114140508490.png" alt="image-20220114140508490"></p><p>在另一个页面复用 index 页面的header<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114140902669.png" alt="image-20220114140902669"></p><h2 id="提交注册数据"><a href="#提交注册数据" class="headerlink" title="提交注册数据"></a>提交注册数据</h2><p>导包：用来判断字符串集合空值的情况（经常用到）<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114141840236.png" alt="image-20220114141840236"></p><p>配置文件里增加域名<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114142232050.png" alt="image-20220114142232050"></p><p>在 util 包下新建工具类 CommunityUtil<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114143842659.png" alt="image-20220114143842659"></p><h3 id="开始写Service-层业务"><a href="#开始写Service-层业务" class="headerlink" title="开始写Service 层业务"></a>开始写Service 层业务</h3><p>注入邮件的客户端（在注册的时候会发邮件），注入模板引擎<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114144222402.png" alt="image-20220114144222402"></p><p>发邮件时生成激活码，包含域名和项目名，因此要注入配置中的域名和项目名<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114145010787.png" alt="image-20220114145010787"></p><p>向controller返回map，包含处理的多个结果，若注册成功返回null，并发激活邮件给用户</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.service;import com.nowcoder.community.dao.UserMapper;import com.nowcoder.community.entity.User;import com.nowcoder.community.util.CommunityUtil;import com.nowcoder.community.util.MailClient;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.thymeleaf.TemplateEngine;import org.thymeleaf.context.Context;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.Random;&#x2F;** * @author giegie * @create 2022-01-12-9:52 *&#x2F;@Servicepublic class UserService &#123;    @Autowired    private UserMapper userMapper;    @Autowired    private MailClient mailClient;    @Autowired    private TemplateEngine templateEngine;    @Value(&quot;$&#123;community.path.domain&#125;&quot;) &#x2F;&#x2F; 通过表达式的方式取 key的值    private String domain;    @Value(&quot;$&#123;server.servlet.context-path&#125;&quot;)    private String contextPath;    public User findUserById(int id) &#123;        return userMapper.selectById(id);    &#125;    public Map&lt;String, Object&gt; register(User user) &#123; &#x2F;&#x2F; 将返回的多个结果封装到 Map中        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();        &#x2F;&#x2F; 空值处理        if (user &#x3D;&#x3D; null) &#123;            throw new IllegalArgumentException(&quot;参数不能为空&quot;);        &#125;        if (StringUtils.isBlank(user.getUsername())) &#123;            map.put(&quot;usernameMsg&quot;, &quot;账号不能为空&quot;);            return map;        &#125;        if (StringUtils.isBlank(user.getPassword())) &#123;            map.put(&quot;passwordMsg&quot;, &quot;密码不能为空&quot;);            return map;        &#125;        if (StringUtils.isBlank(user.getEmail())) &#123;            map.put(&quot;emailMsg&quot;, &quot;邮箱不能为空&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证账号        User u &#x3D; userMapper.selectByName(user.getUsername());        if (u !&#x3D; null)&#123;            map.put(&quot;usernameMsg&quot;,&quot;账号已存在&quot;);            return map;        &#125;        &#x2F;&#x2F; 验证邮箱        u &#x3D; userMapper.selectByEmail(user.getEmail());        if (u !&#x3D; null)&#123;            map.put(&quot;emailMsg&quot;,&quot;该邮箱已被注册&quot;);            return map;        &#125;        &#x2F;&#x2F; 注册用户，将用户信息存到库里        user.setSalt(CommunityUtil.generateUUID().substring(0,5));        user.setPassword(CommunityUtil.md5(user.getPassword() + user.getSalt()));        user.setType(0);        user.setStatus(0);        user.setActivationCode(CommunityUtil.generateUUID());        user.setHeaderUrl(String.format(&quot;https:&#x2F;&#x2F;images.nowcoder.com&#x2F;head&#x2F;&amp;dt.png&quot;,new Random().nextInt(1000)));        user.setCreateTime(new Date());        userMapper.insertUser(user);        &#x2F;&#x2F; 激活邮件        Context context &#x3D; new Context();        context.setVariable(&quot;eamil&quot;,user.getEmail());        &#x2F;&#x2F; http:&#x2F;&#x2F;localhost:8080&#x2F;community&#x2F;activation&#x2F;101&#x2F;code        String url &#x3D; domain + contextPath + &quot;&#x2F;activation&#x2F;&quot;+user.getId() + &quot;&#x2F;&quot; + user.getActivationCode();        context.setVariable(&quot;url&quot;,url);        String content &#x3D; templateEngine.process(&quot;&#x2F;mail&#x2F;activation&quot;,context);        mailClient.sendMail(user.getEmail(),&quot;激活账号&quot;,content);                return map;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>邮件发送内容的 html 模板 activation.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://static.nowcoder.com/images/logo_87_87.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>牛客网-激活账号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;email&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxx@xxx.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>您好!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>您正在注册牛客网, 这是一封激活邮件, 请点击 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>此链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>,激活您的牛客账号!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller;import com.nowcoder.community.entity.User;import com.nowcoder.community.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import java.util.Map;&#x2F;** * @author giegie * @create 2022-01-14-13:41 *&#x2F;@Controllerpublic class LoginController &#123;    @Autowired    private UserService userService;    @RequestMapping(path &#x3D; &quot;&#x2F;register&quot;, method &#x3D; RequestMethod.GET)    public String getRegisterPage() &#123;        return &quot;&#x2F;site&#x2F;register&quot;;    &#125;    @RequestMapping(path &#x3D; &quot;register&quot;, method &#x3D; RequestMethod.POST)    public String register(Model model, User user) &#123;        Map&lt;String, Object&gt; map &#x3D; userService.register(user);        if (map &#x3D;&#x3D; null || map.isEmpty()) &#123;            model.addAttribute(&quot;msg&quot;,&quot;注册成功，我们已经向您的邮箱发送了一封激活邮件，请尽快激活&quot;);            model.addAttribute(&quot;target&quot;,&quot;&#x2F;index&quot;);            return &quot;&#x2F;site&#x2F;operate-result&quot;;        &#125;else&#123;            model.addAttribute(&quot;usernameMsg&quot;,map.get(&quot;usernameMsg&quot;));            model.addAttribute(&quot;passwordMsg&quot;,map.get(&quot;passwordMsg&quot;));            model.addAttribute(&quot;emailMsg&quot;,map.get(&quot;emailMsg&quot;));            return &quot;&#x2F;site&#x2F;register&quot;;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若注册成功跳转至 operate-result 页面，并在8秒后自动返回首页</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114233058282.png" alt="image-20220114233058282"></p><p>对 register.html页面作修改</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114233324477.png" alt="image-20220114233324477"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114233348793.png" alt="image-20220114233348793"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114233509371.png" alt="image-20220114233509371"></p><ol><li>判断账号是否存在，若已存在，提示：该账号已存在！，若不存在则不提示</li><li>若注册失败，输入框中仍显示输入的注册信息：用户名，密码，邮箱</li><li>注册失败，提示失败原因：用户已存在，邮箱已存在…</li></ol><h2 id="激活注册账号"><a href="#激活注册账号" class="headerlink" title="激活注册账号"></a>激活注册账号</h2><p>点击邮件中的链接，访问服务端的激活服务</p><p>在处理激活账号有三种情况：</p><ul><li>激活成功没有问题</li><li>链接点了多次，重复激活，要给个提示</li><li>激活码错误，失败</li></ul><h3 id="三种状态放到一个常量接口中"><a href="#三种状态放到一个常量接口中" class="headerlink" title="三种状态放到一个常量接口中"></a>三种状态放到一个常量接口中</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.util;&#x2F;** * @author giegie * @create 2022-01-14-23:49 *&#x2F;public interface CommunityConstant &#123;    &#x2F;**     * 激活成功     *&#x2F;    int ACTIVATION_SUCCESS &#x3D; 0;    &#x2F;**     * 重复激活     *&#x2F;    int ACTIVATION_PETEAT &#x3D; 1;    &#x2F;**     * 激活失败     *&#x2F;    int ACTIVATION_FAILURE &#x3D; 2;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="service-实现接口"><a href="#service-实现接口" class="headerlink" title="service 实现接口"></a>service 实现接口</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115002611171.png" alt="image-20220115002611171"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115002626723.png" alt="image-20220115002626723"></p><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115002837821.png" alt="image-20220115002837821"></p><p>引入路径<br><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115002936651.png" alt="image-20220115002936651"></p><h3 id="对登录页面作模板修改"><a href="#对登录页面作模板修改" class="headerlink" title="对登录页面作模板修改"></a>对登录页面作模板修改</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220115003059394.png" alt="image-20220115003059394"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/2022/01/14/git-shi-yong/"/>
      <url>/2022/01/14/git-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220113082458327.png" alt="image-20220113082458327"></p><p>进入目录</p><p>git init</p><p>git add 增加</p><p>git commit -m “注释语句” 提交</p><p>git status 看状态</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识spring</title>
      <link href="/2022/01/14/chu-shi-spring/"/>
      <url>/2022/01/14/chu-shi-spring/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220113195429108.png" alt="image-20220113195429108"></p><p>spring 管理的对象称为 bean</p><p> 若不用 IoC 自己管理对象，new对象A,对象B，A.set 使A和B产生联系，A调用B，缺点：A和B产生了耦合，项目规模变大，不易维护</p><p>Spring Container是IoC容器要装两份数据：① 需要向其提供bean的类型 ② 配置文件，配置描述bean之间的关系<br>会自动实例化Bean 然后被调用，bean 之间不会产生直接关系，它们之间的关系体现在配置文件的配置中，降低了耦合度</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220113195809413.png" alt="image-20220113195809413"></p><p>spring 应用运行启动，底层自动启动了tomcat，并创建了spring容器，容器会自动扫描某些包下的某些类，将这些Bean自动装配到容器中</p><p>CommunityApplication 这个类就是配置文件，注解@SpringBootApplication 标识的类就是配置文件</p><p><strong>进到@SpringBootApplication 底层</strong></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114080336197.png" alt="image-20220114080336197"></p><p>@SpringBootConfiguration 表示这个类是个配置文件</p><p>@EnableAutoConfiguration 表示启用自动配置</p><p>@ComponentScan 表示主键扫描，会自动扫描某些包下的某些bean，装配到容器里，扫描配置类所在的包以及子包下的bean，并且<br>这些bean上需要有像@Controller这样的注解，才能被扫描<br>和@Controller等价的注解有@Service@Repository@Component，都是由@Component 来实现的</p><p>如果开发业务组件用@Service标明，如果开发处理请求的组件用@Controller标识，如果开发数据库访问的组件用@Repository<br>如果开发的类在任何地方都能用，用@Component 通用</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114082620382.png" alt="image-20220114082620382"></p><p>①：加注解 @ContextConfiguration 使测试类启用 CommunityApplication 作为配置类</p><p>②：哪个类要得到容器，就实现 ApplicationContextAware 这个接口</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114083153895.png" alt="image-20220114083153895"></p><p>BeanFactory是容器的顶层接口</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114085343478.png" alt="image-20220114085343478"></p><p>@Autowired 注入<br>spring 容器将AlphaDao 注入到 alphaDao 属性中，直接使用这个属性就可以</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目（发送邮件）</title>
      <link href="/2022/01/14/niu-ke-xiang-mu-1/"/>
      <url>/2022/01/14/niu-ke-xiang-mu-1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114102208602.png" alt="image-20220114102208602"></p><h2 id="开启SMTP服务"><a href="#开启SMTP服务" class="headerlink" title="开启SMTP服务"></a>开启SMTP服务</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114122601574.png" alt="image-20220114122601574"></p><h2 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114122812314.png" alt="image-20220114122812314"></p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114123950892.png" alt="image-20220114123950892"></p><h2 id="邮箱参数配置"><a href="#邮箱参数配置" class="headerlink" title="邮箱参数配置"></a>邮箱参数配置</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114122954538.png" alt="image-20220114122954538"></p><p>password 处填写授权码</p><h2 id="使用-JavaMailSender-发送邮件"><a href="#使用-JavaMailSender-发送邮件" class="headerlink" title="使用 JavaMailSender 发送邮件"></a>使用 JavaMailSender 发送邮件</h2><p>community 包下 新建包util ，建类MailClient</p><p>JavaMailSender 是 Spring Email 的核心组件，负责发送邮件<br>MimeMessage 用于封装邮件的相关信息<br>MimeMessageHelper 用于辅助构建 MimeMessage 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.util;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMessageHelper;import org.springframework.stereotype.Component;import javax.mail.MessagingException;import javax.mail.internet.MimeMessage;&#x2F;** * @author giegie * @create 2022-01-14-10:23 *&#x2F;@Componentpublic class MailClient &#123;    private static final Logger logger &#x3D; LoggerFactory.getLogger(MailClient.class);    @Autowired    private JavaMailSender mailSender;    @Value(&quot;$&#123;spring.mail.username&#125;&quot;)    private String from;    public void sendMail(String to,String subject,String content)&#123;        try &#123;            MimeMessage message &#x3D; mailSender.createMimeMessage();            MimeMessageHelper helper &#x3D; new MimeMessageHelper(message);            helper.setFrom(from);            helper.setTo(to);            helper.setSubject(subject);            helper.setText(content,true);            mailSender.send(helper.getMimeMessage());        &#125; catch (MessagingException e) &#123;            logger.error(&quot;发送邮件失败&quot;+e.getMessage());        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建测试类 MailTests，使用 Thymeleaf 模板发送 HTML 邮件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community;import com.nowcoder.community.util.MailClient;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.ContextConfiguration;import org.thymeleaf.TemplateEngine;import org.thymeleaf.context.Context;&#x2F;** * @author giegie * @create 2022-01-14-10:41 *&#x2F;@SpringBootTest@ContextConfiguration(classes &#x3D; CommunityApplication.class)public class MailTests &#123;    @Autowired    private MailClient mailClient;    @Autowired    private TemplateEngine templateEngine;    @Test    public void testTextMail()&#123;        mailClient.sendMail(&quot;2075314587@qq.com&quot;,&quot;TEST&quot;,&quot;HELLO.&quot;);    &#125;    @Test    public void testHtmlMail()&#123;        Context context &#x3D; new Context();        context.setVariable(&quot;username&quot;,&quot;sunday&quot;);        String content &#x3D; templateEngine.process(&quot;&#x2F;mail&#x2F;demo&quot;, context);        System.out.println(content);        mailClient.sendMail(&quot;2075314587@qq.com&quot;,&quot;HTML&quot;,content);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220114125012558.png" alt="image-20220114125012558"></p>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目调试技巧</title>
      <link href="/2022/01/12/xiang-mu-diao-shi-ji-qiao/"/>
      <url>/2022/01/12/xiang-mu-diao-shi-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112214338461.png" alt="image-20220112214338461"></p><h2 id="状态码："><a href="#状态码：" class="headerlink" title="状态码："></a>状态码：</h2><p>200：成功了</p><p>302：重定向</p><p>404：路径写错了</p><p>500：服务器在处理的过程中发生了问题</p><h2 id="打断点"><a href="#打断点" class="headerlink" title="打断点"></a>打断点</h2><p>F8：程序逐行向下执行</p><p>F7：进入当前行所调方法的内部</p><p>F9：程序向下执行直到执行到下一个断点为止</p><p>客户端断点调试</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112220911302.png" alt="image-20220112220911302"></p><p>F10：向下执行一行</p><p>F11：进入代码</p><p>F8：执行到底</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初学mybatis</title>
      <link href="/2022/01/12/mybatis/"/>
      <url>/2022/01/12/mybatis/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220111123249192.png" alt="image-20220111123249192"></p><h2 id="Mapper接口：UserMapper-java"><a href="#Mapper接口：UserMapper-java" class="headerlink" title="Mapper接口：UserMapper.java"></a>Mapper接口：UserMapper.java</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220111213801345.png" alt="image-20220111213801345"></p><h2 id="mapper映射器：user-mapper-xml"><a href="#mapper映射器：user-mapper-xml" class="headerlink" title="mapper映射器：user-mapper.xml"></a>mapper映射器：user-mapper.xml</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.nowcoder.community.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!--写UserMapper的权限定名，这个配置文件是为UserMapper服务的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        username,password,salt,email,type,status,activation_code,header_url,create_time <span class="token comment">&lt;!--定义查询的字段--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id,username,password,salt,email,type,status,activation_code,header_url,create_time    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--id:写对应的方法的名  resultType:返回类型--></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--引用的sql是selectFields--></span>        from user        where id = #&#123;id&#125; <span class="token comment">&lt;!--#&#123;id&#125; 引用方法的参数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from user        where username = #&#123;username&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByEmail<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from user        where email = #&#123;email&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--parameterType写插入的类型--></span>        insert into user (<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>)        values (#&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;,#&#123;email&#125;,#&#123;type&#125;,#&#123;status&#125;,#&#123;activationCode&#125;,#&#123;headerUrl&#125;,#&#123;createTime&#125;) <span class="token comment">&lt;!--对应的参数从User中来--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateStatus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user set status = #&#123;status&#125; where id = #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateHeader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user set header_Url = #&#123;headerUrl&#125; where id = #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updatePassword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user set password = #&#123;password&#125; where id = #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客项目</title>
      <link href="/2022/01/12/niu-ke-xiang-mu/"/>
      <url>/2022/01/12/niu-ke-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112082629721.png" alt="image-20220112082629721"></p><h1 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h1><h2 id="实体类（DiscussPost-java）"><a href="#实体类（DiscussPost-java）" class="headerlink" title="实体类（DiscussPost.java）"></a>实体类（DiscussPost.java）</h2><h2 id="entity包"><a href="#entity包" class="headerlink" title="entity包"></a>entity包</h2><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112082907145.png" alt="image-20220112082907145"></p><h2 id="DAO接口（DiscussPostMapper-java）写方法"><a href="#DAO接口（DiscussPostMapper-java）写方法" class="headerlink" title="DAO接口（DiscussPostMapper.java）写方法"></a>DAO接口（DiscussPostMapper.java）写方法</h2><h2 id="dao包"><a href="#dao包" class="headerlink" title="dao包"></a>dao包</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.dao;import com.nowcoder.community.entity.DiscussPost;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Param;import java.util.List;&#x2F;** * @author giegie * @create 2022-01-11-22:24 *&#x2F;@Mapperpublic interface DiscussPostMapper &#123;    List&lt;DiscussPost&gt; selectDiscussPosts(int userId,int offset,int limit);    &#x2F;&#x2F; userId 首页查找时用不上，在个人主页中查找时使用    &#x2F;&#x2F;动态sql有时拼userId,有时不拼userId。考虑未来分页的可能    int selectDiscussPostRows(@Param(&quot;userId&quot;) int userId);&#x2F;&#x2F; 为了将来显示页码，查寻一共多少条数据    &#x2F;&#x2F; @Param(&quot;&quot;)注解用于给后面的参数取一个别名    &#x2F;&#x2F; 如果需要动态的拼一个条件，并且这个方法有且只有一个条件，这时这个参数之前就必须取别名    &#x2F;&#x2F; 如果只有一个参数，并且在&lt;if&gt;里使用，则必须加别名。&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mapper映射器（discusspost-mapper-xml）写对应方法的-sql-语句"><a href="#Mapper映射器（discusspost-mapper-xml）写对应方法的-sql-语句" class="headerlink" title="Mapper映射器（discusspost-mapper.xml）写对应方法的 sql 语句"></a>Mapper映射器（discusspost-mapper.xml）写对应方法的 sql 语句</h2><h2 id="resources资源包下的mapper包"><a href="#resources资源包下的mapper包" class="headerlink" title="resources资源包下的mapper包"></a>resources资源包下的mapper包</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.nowcoder.community.dao.DiscussPostMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id,user_id,title,content,type,status,create_time,comment_count,score    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectDiscussPosts<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DiscussPost<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectFields<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from discuss_post        where status != 2 <span class="token comment">&lt;!--拉黑的不看--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId!=0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and user_id = #&#123;userId&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        order by type desc,create_time desc        limit #&#123;offset&#125;,#&#123;limit&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectDiscussPostRows<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select count(id)        from discuss_post        where status != 2        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId!=0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and user_id = #&#123;userId&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h1><h2 id="service包下DiscussPostService-java"><a href="#service包下DiscussPostService-java" class="headerlink" title="service包下DiscussPostService.java"></a>service包下DiscussPostService.java</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.service;import com.nowcoder.community.dao.DiscussPostMapper;import com.nowcoder.community.entity.DiscussPost;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;&#x2F;** * @author giegie * @create 2022-01-12-9:13 *&#x2F;@Servicepublic class DiscussPostService &#123;    @Autowired    private DiscussPostMapper discussPostMapper;    public List&lt;DiscussPost&gt; findDiscussPosts(int userId,int offset,int limit)&#123;        return discussPostMapper.selectDiscussPosts(userId,offset,limit);    &#125;    public int findDiscussPostRows(int userId)&#123;        return discussPostMapper.selectDiscussPostRows(userId);    &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="service包下UserService-java"><a href="#service包下UserService-java" class="headerlink" title="service包下UserService.java"></a>service包下UserService.java</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.service;import com.nowcoder.community.dao.UserMapper;import com.nowcoder.community.entity.User;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;&#x2F;** * @author giegie * @create 2022-01-12-9:52 *&#x2F;@Servicepublic class UserService &#123;    @Autowired    private UserMapper userMapper;    public User findUserById(int id)&#123;        return userMapper.selectById(id);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h1><h2 id="不支持分页"><a href="#不支持分页" class="headerlink" title="不支持分页"></a>不支持分页</h2><h3 id="controller包下HomeController"><a href="#controller包下HomeController" class="headerlink" title="controller包下HomeController"></a>controller包下HomeController</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.controller;import com.nowcoder.community.entity.DiscussPost;import com.nowcoder.community.entity.User;import com.nowcoder.community.service.DiscussPostService;import com.nowcoder.community.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;&#x2F;** * @author giegie * @create 2022-01-12-10:06 *&#x2F;@Controllerpublic class HomeController &#123;    @Autowired    private DiscussPostService discussPostService;    @Autowired    private UserService userService;    &#x2F;&#x2F;处理请求的方法，设置访问路径主页index，请求方式get    @RequestMapping(path&#x3D;&quot;&#x2F;index&quot;,method &#x3D; RequestMethod.GET)    public String getIndexPage(Model model)&#123;        &#x2F;&#x2F; 对象中的userId只是id,不是用户名        List&lt;DiscussPost&gt; list &#x3D; discussPostService.findDiscussPosts(0, 0, 10);        &#x2F;&#x2F; 根据userId查到user，再将数据组装一下，放到新的集合，返回给页面        &#x2F;&#x2F; 新的集合对象能够封装post和user对象        List&lt;Map&lt;String,Object&gt;&gt; discussPosts &#x3D; new ArrayList&lt;&gt;();        if (list!&#x3D;null)&#123;            for (DiscussPost post : list)&#123; &#x2F;&#x2F; 遍历，将两份数据都装到discussPosts中                Map&lt;String ,Object&gt; map &#x3D; new HashMap&lt;&gt;(); &#x2F;&#x2F; 实例化map对象                map.put(&quot;post&quot;,post); &#x2F;&#x2F; 装帖子                User user &#x3D; userService.findUserById(post.getUserId()); &#x2F;&#x2F; 从帖子中找用户id，再根据id查找用户                map.put(&quot;user&quot;,user); &#x2F;&#x2F; 装用户                discussPosts.add(map); &#x2F;&#x2F; 把map装到新的集合里            &#125;        &#125;        &#x2F;&#x2F; 将样本页面展现的结果装到model里        model.addAttribute(&quot;discussPosts&quot;,discussPosts);        return &quot;&#x2F;index&quot;; &#x2F;&#x2F; 返回的路径：templates下的index    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--指定使用的模板引擎--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, shrink-to-fit=no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://static.nowcoder.com/images/logo_87_87.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/css/global.css&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token comment">&lt;!--href里引用的文件通过thymeleaf模板帮助找的，固定到static下面找资源--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>牛客网-首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 帖子列表 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-unstyled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media pb-3 pt-3 mb-3 border-bottom<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map:$&#123;discussPosts&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--通过thymeleaf模板引擎循环输出li 每次循环得到一个map --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>site/profile.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.user.headerUrl&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-4 rounded-circle<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户头像<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>media-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-0 mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.post.title&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>备战春招，面试刷题跟他复习，一个月全搞定！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-secondary bg-primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.post.type==1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>置顶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-secondary bg-danger<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.post.status==1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>精华<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-muted font-size-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-3<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map.user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>寒江雪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span> 发布于 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#dates.format(map.post.createTime,<span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2019-04-15 15:32:18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>                                 <span class="token comment">&lt;!--#是引用工具--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline float-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline ml-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>赞 11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline ml-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-inline ml-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>回帖 7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="支持分页"><a href="#支持分页" class="headerlink" title="支持分页"></a>支持分页</h2><h3 id="在entity包下建一个实体类-Page-封装分页的相关信息"><a href="#在entity包下建一个实体类-Page-封装分页的相关信息" class="headerlink" title="在entity包下建一个实体类 Page 封装分页的相关信息"></a>在entity包下建一个实体类 Page 封装分页的相关信息</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.nowcoder.community.entity;&#x2F;** * @author giegie * @create 2022-01-12-14:00 *&#x2F;&#x2F;** * 封装分页相关的信息 *&#x2F;public class Page &#123;    &#x2F;&#x2F; 当前页码    private int current &#x3D; 1;    &#x2F;&#x2F; 显示上限    private int limit &#x3D; 10;    &#x2F;&#x2F; 数据总数(用于计算总页数)    private int rows;    &#x2F;&#x2F; 查询路径(用于复用分页链接)    private String path;&#x2F;&#x2F;省略get set方法    &#x2F;**     * 获取当前页的起始行     * @return     *&#x2F;    public int getOffset()&#123;        &#x2F;&#x2F; current * limit - limit 当前页*每页显示多少条数据 - 当前页数据条数        return (current - 1) * limit;    &#125;    &#x2F;**     * 获取总页数     * @return     *&#x2F;    public int getTotal()&#123;        &#x2F;&#x2F; rows &#x2F; limit [+1]总的行数&#x2F;每页显示多少条数据        if (rows % limit &#x3D;&#x3D; 0)&#123;            return rows &#x2F; limit;        &#125; else &#123;            return rows &#x2F; limit + 1;        &#125;    &#125;    &#x2F;**     * 获取起始页码     * @return     *&#x2F;    public int getFrom()&#123;        int from &#x3D; current - 2;        return from &lt; 1 ? 1 : from;    &#125;    &#x2F;**     * 获取结束页码     * @return     *&#x2F;    public int getTo()&#123;        int to &#x3D; current + 2;        int total &#x3D; getTotal();        return to &gt; total ? total : to;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HomeController-java增加分页相关的内容"><a href="#HomeController-java增加分页相关的内容" class="headerlink" title="HomeController.java增加分页相关的内容"></a>HomeController.java增加分页相关的内容</h3><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220112144726954.png" alt="image-20220112144726954"></p><h3 id="index-html-1"><a href="#index-html-1" class="headerlink" title="index.html"></a>index.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 分页 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-5<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;page.rows>0&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pagination justify-content-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;$&#123;page.path&#125;(current=1)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|page-item $&#123;page.current==1?<span class="token punctuation">'</span>disabled<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span>&#125;|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--如果是第一页,上一页就不可点 disabled--></span><span class="token comment">&lt;!--固定数据再拼上一个变量,静态值拼上一个动态值 用 |xxx|--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;$&#123;page.path&#125;(current=$&#123;page.current-1&#125;)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|page-item $&#123;i==page.current?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span>&#125;|<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i:$&#123;#numbers.sequence(page.from,page.to)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--生成一个从from到to的连续的数组,i变量引用每一个数字--></span><span class="token comment">&lt;!--页码点亮用active--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;i&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--i显示页码--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|page-item $&#123;page.current==page.total?<span class="token punctuation">'</span>disabled<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span>&#125;|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;$&#123;page.path&#125;(current=$&#123;page.current+1&#125;)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-link<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;$&#123;page.path&#125;(current=$&#123;page.total&#125;)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>末页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 牛客项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>左神讲数据结构与算法</title>
      <link href="/2022/01/01/zuo-shen-jiang-shu-ju-jie-gou-yu-suan-fa/"/>
      <url>/2022/01/01/zuo-shen-jiang-shu-ju-jie-gou-yu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="左神讲解数据结构与算法基础（1）"><a href="#左神讲解数据结构与算法基础（1）" class="headerlink" title="左神讲解数据结构与算法基础（1）"></a>左神讲解数据结构与算法基础（1）</h1><h2 id="认识复杂度与简单排序"><a href="#认识复杂度与简单排序" class="headerlink" title="认识复杂度与简单排序"></a>认识复杂度与简单排序</h2><p><strong>异或</strong>运算-交换 a和b （运用<strong>交换律</strong>与<strong>结合律</strong>，相同为0，不同为1）</p><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20220101085534503.png" alt="image-20220101085534503"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;一个数组中有两个数是奇数个，其余数是偶数个，求奇数个数的两数分别是多少int eor &#x3D; 0;for(int i &#x3D; 0 ; i &lt; arr.length ; i++)&#123;    eor ^&#x3D; arr[i];&#125;&#x2F;&#x2F;eor &#x3D; a ^ b&#x2F;&#x2F;eor !&#x3D; 0&#x2F;&#x2F;eor必然有一个位置上是1int rightOne &#x3D; eor &amp; (~eor + 1); &#x2F;&#x2F;提取出最右的1，常用的方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">int onlyOne &#x3D; 0;&#x2F;&#x2F;eor&#39;for(int cur : arr)&#123;    if((cur &amp; rightOne) &#x3D;&#x3D; 1)&#123;&#x2F;&#x2F;0或1都可        onlyOne ^&#x3D; cur;    &#125;&#125;System.out.println(&quot;一个数是：&quot;+onlyOne+&quot;另一个数是：&quot;+(onlyOne^eor));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="冒泡排序（O（n平方））"><a href="#冒泡排序（O（n平方））" class="headerlink" title="冒泡排序（O（n平方））"></a>冒泡排序（O（n平方））</h2><p><a href="http://javainterview.gitee.io/luffy/2021/09/01/11-%E7%AE%97%E6%B3%95/01.%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/">参考1</a>，<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.md">参考2</a>，<a href="https://www.runoob.com/w3cnote/bubble-sort.html">参考3</a></p><p>思路：从左往右，两两比较，大(小)放后面，第一次排序结束最大值(最小值)已经在数组末尾，n个数需要n-1趟</p><p>实现：两层for循环，外层控制比较的趟数，内层是比较的次数，每比较一趟后，比较次数-1</p><h2 id="选择排序（O（n平方））"><a href="#选择排序（O（n平方））" class="headerlink" title="选择排序（O（n平方））"></a>选择排序（O（n平方））</h2><p><a href="http://javainterview.gitee.io/luffy/2021/09/01/11-%E7%AE%97%E6%B3%95/01.%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/">参考1</a>，<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.md">参考2</a>，<a href="https://www.runoob.com/w3cnote/selection-sort.html">参考3</a></p><p>思路：从数组中选择最小元素，将它与数组的第一个元素交换位置。再从数组剩下的元素中选择出最小的元素，将它与数组的第二个元素交换位置。不断进行这样的操作，直到将整个数组排序。</p><p>实现：设第一个数是最小值，两层for循环，外层控制比较的趟数，内层找到当前趟数的最小值，与第一个数作比较，小于则进行交换</p><h2 id="插入排序（时间复杂度按最差情况来估计）"><a href="#插入排序（时间复杂度按最差情况来估计）" class="headerlink" title="插入排序（时间复杂度按最差情况来估计）"></a>插入排序（时间复杂度按最差情况来估计）</h2><p><a href="http://javainterview.gitee.io/luffy/2021/09/01/11-%E7%AE%97%E6%B3%95/01.%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/">参考1</a>，<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.md">参考2</a>，<a href="https://www.runoob.com/w3cnote/insertion-sort.html">参考3</a></p><p>思路：每次都将当前元素插入到左侧已经排序的数组中，使得插入之后左侧数组依然有序。</p><p>举例：数组 {3, 5, 2, 4, 1}，从小到大排序，3先不动，从5开始与3比较（5&gt;3不动）：3,5,2,4,1；</p><p>2与5比较（2&lt;5），5和2交换位置，2再与3比较（2&lt;3），3和2交换位置：2,3,5,4,1；</p><p>4与5比较（4&lt;5），5和4交换位置，3再与4比较（4&gt;3），4不再与前面数字比较：2,3,4,5,1;</p><p>1与5比较（1&lt;5），5和1交换位置，1再与4比较（1&lt;4），4和1交换位置，1再与3比较（1&lt;3），3和1交换为位置，1再与2比较（1&lt;2），2和1交换位置：1,2,3,4,5</p><h2 id="二分法：O（logN）"><a href="#二分法：O（logN）" class="headerlink" title="二分法：O（logN）"></a>二分法：O（logN）</h2><p><a href="https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">示例</a></p><p>一组有序数中查找一个数；一组有序数中查找最左侧&gt;=num的；一组有序数中查找最右侧&gt;=num的</p><p><strong>注意</strong>：并非有序才能二分</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql 用法</title>
      <link href="/2021/12/28/sql-yong-fa/"/>
      <url>/2021/12/28/sql-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>尝试通过typro来写博客，试试水，检查看看有没有什么问题</p><h2 id="sql-语句"><a href="#sql-语句" class="headerlink" title="sql 语句"></a>sql 语句</h2><ul><li><p>column_name as 别名</p></li><li><p>ROUND(colum_name,decimals) #ROUND()函数用于把数值字段舍入为指定的小数位</p></li><li><p>LIMIT N OFFSET M #limit 设定返回的记录数，offset指定select语句查询的数据偏移量</p></li><li><p>group by 后面有多个条件用 ”, “ 隔开，搭配 having 使用 而不是 where</p></li><li><p>order by 按什么顺序排序</p></li></ul><p><img src="https://gitee.com/qi-xuan-qiaodaima/images/raw/master/img/image-20211228181259946.png"></p><ul><li>inner join 与 join一样</li></ul><pre class="line-numbers language-none"><code class="language-none">select column_name(s)FROM table1INNER JOIN table2ON table1.column_name&#x3D;table2.column_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不去重：union all</li></ul><h2 id="mysql-高级函数"><a href="#mysql-高级函数" class="headerlink" title="mysql 高级函数"></a>mysql 高级函数</h2><pre class="line-numbers language-none"><code class="language-none">if(expr,v1,v2)#如果表达式expr成立，返回结果v1;否做，返回结果v2.&#x2F;&#x2F; 牛客sql 26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">case expressionwhen condition then resultwhen 条件 then 结果...else 其他结果 #描述与输出不一致，以输出为准 end#牛客sql 27<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>附：<a href="https://www.cnblogs.com/chenduzizhong/p/9590741.html">case when用法</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">system.out.println(&quot;hello&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>123</p><p>456</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
